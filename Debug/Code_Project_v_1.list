
Code_Project_v_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800d8a8  0800d8a8  0001d8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd80  0800dd80  000204b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd80  0800dd80  0001dd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd88  0800dd88  000204b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd88  0800dd88  0001dd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd8c  0800dd8c  0001dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b4  20000000  0800dd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200004b4  0800e244  000204b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800e244  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6c8  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345a  00000000  00000000  0003cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00040008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  000415a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001994c  00000000  00000000  000429e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a63c  00000000  00000000  0005c334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099475  00000000  00000000  00076970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fde5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc0  00000000  00000000  0010fe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004b4 	.word	0x200004b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d88c 	.word	0x0800d88c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004b8 	.word	0x200004b8
 80001dc:	0800d88c 	.word	0x0800d88c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MovingAverageFilter_Init>:
#include <stdio.h>
#include "MovingAverageFilter.h"


void MovingAverageFilter_Init(MovingAverageFilter *filter, uint8_t nPoint)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
    /* Set N-Point Size */
    filter->bufferSize = nPoint;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	721a      	strb	r2, [r3, #8]

    /* Clearing Filter Buffers */
    if (filter->buffer != 0) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00c      	beq.n	8000ef0 <MovingAverageFilter_Init+0x34>
        filter->buffer = (float*)realloc(filter->buffer, filter->bufferSize * sizeof(float));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7a1b      	ldrb	r3, [r3, #8]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	f00a fe22 	bl	800bb2c <realloc>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e009      	b.n	8000f04 <MovingAverageFilter_Init+0x48>
    } else {
        filter->buffer = (float*)calloc(filter->bufferSize, sizeof(float));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7a1b      	ldrb	r3, [r3, #8]
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f009 ff38 	bl	800ad6c <calloc>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	601a      	str	r2, [r3, #0]
    }

    if (filter->impulseResponse != 0) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00c      	beq.n	8000f26 <MovingAverageFilter_Init+0x6a>
        filter->impulseResponse = (float*)realloc(filter->impulseResponse, filter->bufferSize * sizeof(float));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7a1b      	ldrb	r3, [r3, #8]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4619      	mov	r1, r3
 8000f18:	4610      	mov	r0, r2
 8000f1a:	f00a fe07 	bl	800bb2c <realloc>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	e009      	b.n	8000f3a <MovingAverageFilter_Init+0x7e>
    } else {
        filter->impulseResponse = (float*)calloc(filter->bufferSize, sizeof(float));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a1b      	ldrb	r3, [r3, #8]
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 ff1d 	bl	800ad6c <calloc>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	605a      	str	r2, [r3, #4]
    }

    /* Init Filter Buffer */
    for (int8_t i = 0; i < filter->bufferSize; i++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e00e      	b.n	8000f5e <MovingAverageFilter_Init+0xa2>
        *((filter->buffer) + i) = 0.0f;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
    for (int8_t i = 0; i < filter->bufferSize; i++) {
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	7a12      	ldrb	r2, [r2, #8]
 8000f66:	4293      	cmp	r3, r2
 8000f68:	dbea      	blt.n	8000f40 <MovingAverageFilter_Init+0x84>
    }

    /* Init Filter Impulse Response */
    for (int8_t i = 0; i < filter->bufferSize; i++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e017      	b.n	8000fa0 <MovingAverageFilter_Init+0xe4>
        *((filter->impulseResponse) + i) = (float)(1.0f / filter->bufferSize);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7a1b      	ldrb	r3, [r3, #8]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f90:	edc3 7a00 	vstr	s15, [r3]
    for (int8_t i = 0; i < filter->bufferSize; i++) {
 8000f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73bb      	strb	r3, [r7, #14]
 8000fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	7a12      	ldrb	r2, [r2, #8]
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	dbe1      	blt.n	8000f70 <MovingAverageFilter_Init+0xb4>
    }

    /* Clear Filter Output */
    filter->output = 0.0f;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MovingAverageFilter_Update>:

float MovingAverageFilter_Update(MovingAverageFilter *filter, float input)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	ed87 0a00 	vstr	s0, [r7]
    filter->output = 0.0f;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]

    /* Data Shift */
    for (int8_t i = (filter->bufferSize - 1); i >= 0; i--) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7a1b      	ldrb	r3, [r3, #8]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e014      	b.n	8001006 <MovingAverageFilter_Update+0x4a>
        *(filter->buffer + i + 1) = *(filter->buffer + i);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	441a      	add	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	601a      	str	r2, [r3, #0]
    for (int8_t i = (filter->bufferSize - 1); i >= 0; i--) {
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3b01      	subs	r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dae6      	bge.n	8000fdc <MovingAverageFilter_Update+0x20>
    }
    *(filter->buffer) = input;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	601a      	str	r2, [r3, #0]

    /* Filter Output Calculation */
    for (int8_t i = 0; i < filter->bufferSize; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	73bb      	strb	r3, [r7, #14]
 800101a:	e01f      	b.n	800105c <MovingAverageFilter_Update+0xa0>
        filter->output = filter->output + (*(filter->buffer + i) * (*(filter->impulseResponse + i)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	edd3 6a00 	vldr	s13, [r3]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edc3 7a03 	vstr	s15, [r3, #12]
    for (int8_t i = 0; i < filter->bufferSize; i++) {
 8001050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	3301      	adds	r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	73bb      	strb	r3, [r7, #14]
 800105c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	7a12      	ldrb	r2, [r2, #8]
 8001064:	4293      	cmp	r3, r2
 8001066:	dbd9      	blt.n	800101c <MovingAverageFilter_Update+0x60>
    }

    return filter->output;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <PID_Init>:
#include "i2c.h"
#include <stdint.h>



void PID_Init(PID_Param_t* PID){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	PID -> Kp = 1.8410;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <PID_Init+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
	PID -> Ki = 0.0118;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a16      	ldr	r2, [pc, #88]	; (80010ec <PID_Init+0x6c>)
 8001092:	605a      	str	r2, [r3, #4]
	PID -> Kd = 60.8833;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <PID_Init+0x70>)
 8001098:	609a      	str	r2, [r3, #8]
	PID -> deltaT = 1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010a0:	60da      	str	r2, [r3, #12]
	PID -> derivative = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
	PID -> integral = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
	PID -> current_error = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
	PID -> current_output = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	PID -> prev_error = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
	PID -> prev_output = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
	PID -> saturation = false;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	3feba5e3 	.word	0x3feba5e3
 80010ec:	3c4154ca 	.word	0x3c4154ca
 80010f0:	42738880 	.word	0x42738880

080010f4 <Pump_Init>:

void Pump_Init(Pump_t* pump){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	pump -> PowerCurrent = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <Tank1_Init>:

void Tank1_Init(Tank_Param_t* tank){
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	tank -> height = 25.5;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <Tank1_Init+0x30>)
 800111c:	609a      	str	r2, [r3, #8]
	tank -> level_current = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
	tank -> level_target = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
	tank -> sensor_height = 29.5;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <Tank1_Init+0x34>)
 8001132:	60da      	str	r2, [r3, #12]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	41cc0000 	.word	0x41cc0000
 8001144:	41ec0000 	.word	0x41ec0000

08001148 <Tank2_Init>:

void Tank2_Init(Tank_Param_t* tank){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	tank -> height = 25.5;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <Tank2_Init+0x30>)
 8001154:	609a      	str	r2, [r3, #8]
	tank -> level_current = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
	tank -> level_target = 10;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <Tank2_Init+0x34>)
 8001162:	605a      	str	r2, [r3, #4]
	tank -> sensor_height = 29.5;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <Tank2_Init+0x38>)
 8001168:	60da      	str	r2, [r3, #12]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	41cc0000 	.word	0x41cc0000
 800117c:	41200000 	.word	0x41200000
 8001180:	41ec0000 	.word	0x41ec0000

08001184 <LQI_Init>:

void LQI_Init(LQI_Param_t* lqi){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	lqi -> K1 = -15.7345;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <LQI_Init+0x58>)
 8001190:	601a      	str	r2, [r3, #0]
	lqi -> K2 = -23.1724;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <LQI_Init+0x5c>)
 8001196:	605a      	str	r2, [r3, #4]
	lqi -> K3 = 0.3162;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <LQI_Init+0x60>)
 800119c:	609a      	str	r2, [r3, #8]
	lqi -> current_error = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
	lqi -> current_output = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
	lqi -> deltaT = 1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011b4:	60da      	str	r2, [r3, #12]
	lqi -> prev_error = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
	lqi -> prev_output = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
	lqi -> saturation = false;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	c17bc083 	.word	0xc17bc083
 80011e0:	c1b96113 	.word	0xc1b96113
 80011e4:	3ea1e4f7 	.word	0x3ea1e4f7

080011e8 <PID_Control>:


float PID_Control(PID_Param_t* PID, Tank_Param_t* tank){
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	float epsilon = 0.1;
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <PID_Control+0x130>)
 80011f4:	60fb      	str	r3, [r7, #12]
	PID -> prev_output = PID -> current_output;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	61da      	str	r2, [r3, #28]
	PID -> current_error = -tank->level_current + tank->level_target;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	ed93 7a01 	vldr	s14, [r3, #4]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edc3 7a04 	vstr	s15, [r3, #16]
	if(fabsf(PID -> current_error) > epsilon){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a04 	vldr	s15, [r3, #16]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	d565      	bpl.n	80012f8 <PID_Control+0x110>
		PID -> integral += PID -> current_error*PID -> deltaT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a03 	vldr	s15, [r3, #12]
 8001238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edc3 7a08 	vstr	s15, [r3, #32]
		PID -> derivative = (PID -> current_error - PID -> prev_error)/PID->deltaT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a06 	vldr	s15, [r3, #24]
 8001258:	ee77 6a67 	vsub.f32	s13, s14, s15
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		PID -> current_output = PID->Kp*PID->current_error + PID->Ki*PID ->integral + PID->Kd*PID->derivative;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edd3 7a04 	vldr	s15, [r3, #16]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	edd3 7a08 	vldr	s15, [r3, #32]
 8001288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 6a02 	vldr	s13, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800129c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	edc3 7a05 	vstr	s15, [r3, #20]
		if(PID -> current_output > 100){
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80012b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800131c <PID_Control+0x134>
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	dd07      	ble.n	80012ce <PID_Control+0xe6>
			PID -> saturation = true;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PID -> current_output = 100;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <PID_Control+0x138>)
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	e014      	b.n	80012f8 <PID_Control+0x110>
		}
		else if(PID -> current_output < 0){
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80012d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d508      	bpl.n	80012f0 <PID_Control+0x108>
			PID -> saturation = true;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PID -> current_output = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	e003      	b.n	80012f8 <PID_Control+0x110>
		}
		else{
			PID -> saturation = false;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	PID -> prev_error = PID -> current_error;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]

	return PID ->current_output;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	ee07 3a90 	vmov	s15, r3
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	3dcccccd 	.word	0x3dcccccd
 800131c:	42c80000 	.word	0x42c80000
 8001320:	42c80000 	.word	0x42c80000

08001324 <actuation_pump>:
	LQI -> prev_error = LQI -> current_error;
	return LQI ->current_output;

}

void actuation_pump(Pump_t* pump, float DC){
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	ed87 0a00 	vstr	s0, [r7]

	pump->PowerCurrent = (DC);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	601a      	str	r2, [r3, #0]
	if(pump->PowerCurrent > 0){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd12      	ble.n	800136c <actuation_pump+0x48>
		TIM2->CCR1 = ((pump->PowerCurrent)/100)*(4199 + 1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001380 <actuation_pump+0x5c>
 8001350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001354:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001384 <actuation_pump+0x60>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001364:	ee17 2a90 	vmov	r2, s15
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		TIM2->CCR1 = 0;
	}
}
 800136a:	e003      	b.n	8001374 <actuation_pump+0x50>
		TIM2->CCR1 = 0;
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	42c80000 	.word	0x42c80000
 8001384:	45834000 	.word	0x45834000

08001388 <MapLevel>:

void MapLevel(uint32_t *data1,uint32_t *data2,Tank_Param_t* tank1,Tank_Param_t* tank2,float* lev1,float* lev2)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
	*lev1 = tank1->sensor_height - (float)(*data2)/10; /* todo:  invertire sensori */
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 7a03 	vldr	s14, [r3, #12]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013a8:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80013ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	edc3 7a00 	vstr	s15, [r3]
	*lev2 = tank2->sensor_height - (float)(*data1)/10;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013cc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80013d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	edc3 7a00 	vstr	s15, [r3]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <MX_GPIO_Init+0xfc>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a29      	ldr	r2, [pc, #164]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_GPIO_Init+0xfc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <MX_GPIO_Init+0xfc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_GPIO_Init+0xfc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, X_SHUT_2_Pin|X_SHUT_1_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001478:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_GPIO_Init+0x100>)
 800147a:	f001 fb87 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	21e0      	movs	r1, #224	; 0xe0
 8001482:	481b      	ldr	r0, [pc, #108]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001484:	f001 fb82 	bl	8002b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_GPIO_Init+0x100>)
 80014a0:	f001 f9f0 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = X_SHUT_2_Pin|X_SHUT_1_Pin;
 80014a4:	f44f 7384 	mov.w	r3, #264	; 0x108
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <MX_GPIO_Init+0x100>)
 80014be:	f001 f9e1 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80014c2:	23e0      	movs	r3, #224	; 0xe0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_GPIO_Init+0x104>)
 80014da:	f001 f9d3 	bl	8002884 <HAL_GPIO_Init>

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020000 	.word	0x40020000

080014f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C1_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <MX_I2C1_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C1_Init+0x50>)
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <MX_I2C1_Init+0x58>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C1_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_I2C1_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_I2C1_Init+0x50>)
 8001512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001516:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_I2C1_Init+0x50>)
 8001532:	f001 fb5f 	bl	8002bf4 <HAL_I2C_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800153c:	f000 fa66 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200004d0 	.word	0x200004d0
 8001548:	40005400 	.word	0x40005400
 800154c:	000186a0 	.word	0x000186a0

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_I2C_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12c      	bne.n	80015cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001594:	2312      	movs	r3, #18
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a0:	2304      	movs	r3, #4
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <HAL_I2C_MspInit+0x8c>)
 80015ac:	f001 f96a 	bl	8002884 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 80015ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_I2C_MspInit+0x88>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40005400 	.word	0x40005400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020400 	.word	0x40020400

080015e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001600:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001608:	e000      	b.n	800160c <ITM_SendChar+0x2c>
    {
      __NOP();
 800160a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800160c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f9      	beq.n	800160a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x26>
        ITM_SendChar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffc9 	bl	80015e0 <ITM_SendChar>
    for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x12>

    return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	f2ad 6dcc 	subw	sp, sp, #1740	; 0x6cc
 800166e:	afd6      	add	r7, sp, #856	; 0x358
	/* definition sensor struct*/
	struct sensors array_sensor;
	uint32_t data1,data2; /*data from sensors*/

	//struct sensors array_sensor;
	array_sensor.Dev_array[0] = &array_sensor.vl53l0x_c[0];
 8001670:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001674:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001678:	f107 0210 	add.w	r2, r7, #16
 800167c:	3238      	adds	r2, #56	; 0x38
 800167e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	array_sensor.Dev_array[1] = &array_sensor.vl53l0x_c[1];
 8001682:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001686:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800168a:	f107 0210 	add.w	r2, r7, #16
 800168e:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8001692:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001696:	f000 ff4d 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169a:	f000 f8d5 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169e:	f7ff fea5 	bl	80013ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016a2:	f000 feab 	bl	80023fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016a6:	f7ff ff25 	bl	80014f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80016aa:	f000 fcd5 	bl	8002058 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016ae:	f000 fc5f 	bl	8001f70 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016b2:	f000 fd47 	bl	8002144 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  Pump_Init(&Pump1);
 80016b6:	4855      	ldr	r0, [pc, #340]	; (800180c <main+0x1a4>)
 80016b8:	f7ff fd1c 	bl	80010f4 <Pump_Init>
  Tank1_Init(&Tank1);
 80016bc:	4854      	ldr	r0, [pc, #336]	; (8001810 <main+0x1a8>)
 80016be:	f7ff fd27 	bl	8001110 <Tank1_Init>
  Tank2_Init(&Tank2);
 80016c2:	4854      	ldr	r0, [pc, #336]	; (8001814 <main+0x1ac>)
 80016c4:	f7ff fd40 	bl	8001148 <Tank2_Init>
  PID_Init(&PID1);
 80016c8:	4853      	ldr	r0, [pc, #332]	; (8001818 <main+0x1b0>)
 80016ca:	f7ff fcd9 	bl	8001080 <PID_Init>
  LQI_Init(&LQI1);
 80016ce:	4853      	ldr	r0, [pc, #332]	; (800181c <main+0x1b4>)
 80016d0:	f7ff fd58 	bl	8001184 <LQI_Init>

  /*Sensors Initialization*/
  array_sensor.Dev_array[0]->I2cHandle = &hi2c1;
 80016d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016d8:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80016dc:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80016e0:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <main+0x1b8>)
 80016e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  array_sensor.Dev_array[1]->I2cHandle = &hi2c1;
 80016e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016ea:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80016ee:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80016f2:	4a4b      	ldr	r2, [pc, #300]	; (8001820 <main+0x1b8>)
 80016f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  array_sensor.Dev_array[0]->I2cDevAddr =  array_sensor.Dev_array[1]->I2cDevAddr = original_addr;
 80016f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016fc:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001700:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8001704:	2252      	movs	r2, #82	; 0x52
 8001706:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 800170a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800170e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8001712:	f8d2 2358 	ldr.w	r2, [r2, #856]	; 0x358
 8001716:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800171a:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
  printf("Sensor Init:\n\r");
 800171e:	4841      	ldr	r0, [pc, #260]	; (8001824 <main+0x1bc>)
 8001720:	f00a f9ec 	bl	800bafc <iprintf>
  Sensor_Init(array_sensor,HIGH_ACCURACY); // function from sensors.h
 8001724:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001728:	f5a3 7458 	sub.w	r4, r3, #864	; 0x360
 800172c:	2302      	movs	r3, #2
 800172e:	93d4      	str	r3, [sp, #848]	; 0x350
 8001730:	4668      	mov	r0, sp
 8001732:	f104 0310 	add.w	r3, r4, #16
 8001736:	f44f 7254 	mov.w	r2, #848	; 0x350
 800173a:	4619      	mov	r1, r3
 800173c:	f009 fb5a 	bl	800adf4 <memcpy>
 8001740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001744:	f000 f968 	bl	8001a18 <Sensor_Init>

  /* For PWM */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); /* PA6 filo nero*/
 8001748:	2201      	movs	r2, #1
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	4836      	ldr	r0, [pc, #216]	; (8001828 <main+0x1c0>)
 800174e:	f001 fa1d 	bl	8002b8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); /* PA7 filo arancione*/
 8001752:	2200      	movs	r2, #0
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	4834      	ldr	r0, [pc, #208]	; (8001828 <main+0x1c0>)
 8001758:	f001 fa18 	bl	8002b8c <HAL_GPIO_WritePin>

  // Start timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 800175c:	4833      	ldr	r0, [pc, #204]	; (800182c <main+0x1c4>)
 800175e:	f002 fe87 	bl	8004470 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim3);

  MovingAverageFilter_Init(&filter1, 2);
 8001762:	2102      	movs	r1, #2
 8001764:	4832      	ldr	r0, [pc, #200]	; (8001830 <main+0x1c8>)
 8001766:	f7ff fba9 	bl	8000ebc <MovingAverageFilter_Init>
  MovingAverageFilter_Init(&filter2, 2);
 800176a:	2102      	movs	r1, #2
 800176c:	4831      	ldr	r0, [pc, #196]	; (8001834 <main+0x1cc>)
 800176e:	f7ff fba5 	bl	8000ebc <MovingAverageFilter_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001772:	2100      	movs	r1, #0
 8001774:	4830      	ldr	r0, [pc, #192]	; (8001838 <main+0x1d0>)
 8001776:	f002 ff37 	bl	80045e8 <HAL_TIM_PWM_Start>

	  Tank2.level_target = 10;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <main+0x1ac>)
 800177c:	4a2f      	ldr	r2, [pc, #188]	; (800183c <main+0x1d4>)
 800177e:	605a      	str	r2, [r3, #4]

	  /*get data from sensors -- distance from sensors to liquid*/
	  Get_Data_Sensors(array_sensor,&data1,&data2);
 8001780:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001784:	f5a3 7458 	sub.w	r4, r3, #864	; 0x360
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	93d5      	str	r3, [sp, #852]	; 0x354
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	93d4      	str	r3, [sp, #848]	; 0x350
 8001794:	4668      	mov	r0, sp
 8001796:	f104 0310 	add.w	r3, r4, #16
 800179a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800179e:	4619      	mov	r1, r3
 80017a0:	f009 fb28 	bl	800adf4 <memcpy>
 80017a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017a8:	f000 fa4a 	bl	8001c40 <Get_Data_Sensors>
	  /*get tanks liquid level -- difference from height of sensor and data sensors*/
	  MapLevel(&data1,&data2,Tank1_ptr,Tank2_ptr,&level1,&level2);
 80017ac:	4b24      	ldr	r3, [pc, #144]	; (8001840 <main+0x1d8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <main+0x1dc>)
 80017b2:	681c      	ldr	r4, [r3, #0]
 80017b4:	f107 0108 	add.w	r1, r7, #8
 80017b8:	f107 000c 	add.w	r0, r7, #12
 80017bc:	463b      	mov	r3, r7
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4623      	mov	r3, r4
 80017c6:	f7ff fddf 	bl	8001388 <MapLevel>
		//*ptr_DC = LQI_Control(LQI1_ptr,Tank1_ptr, Tank2_ptr);

	  /*moving average filter for data get from sensors*/
	  Tank1.level_current = MovingAverageFilter_Update(&filter1, level1);
 80017ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017ce:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <main+0x1c8>)
 80017dc:	f7ff fbee 	bl	8000fbc <MovingAverageFilter_Update>
 80017e0:	eef0 7a40 	vmov.f32	s15, s0
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <main+0x1a8>)
 80017e6:	edc3 7a00 	vstr	s15, [r3]
	  Tank2.level_current = MovingAverageFilter_Update(&filter2, level2);
 80017ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017ee:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <main+0x1cc>)
 80017fc:	f7ff fbde 	bl	8000fbc <MovingAverageFilter_Update>
 8001800:	eef0 7a40 	vmov.f32	s15, s0
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <main+0x1ac>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800180a:	e7b2      	b.n	8001772 <main+0x10a>
 800180c:	2000052c 	.word	0x2000052c
 8001810:	20000530 	.word	0x20000530
 8001814:	20000540 	.word	0x20000540
 8001818:	20000550 	.word	0x20000550
 800181c:	2000057c 	.word	0x2000057c
 8001820:	200004d0 	.word	0x200004d0
 8001824:	0800d8a8 	.word	0x0800d8a8
 8001828:	40020000 	.word	0x40020000
 800182c:	200005d0 	.word	0x200005d0
 8001830:	200005a4 	.word	0x200005a4
 8001834:	200005b4 	.word	0x200005b4
 8001838:	20000618 	.word	0x20000618
 800183c:	41200000 	.word	0x41200000
 8001840:	2000000c 	.word	0x2000000c
 8001844:	20000010 	.word	0x20000010

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	; 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f009 fada 	bl	800ae10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <SystemClock_Config+0xc8>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a26      	ldr	r2, [pc, #152]	; (8001910 <SystemClock_Config+0xc8>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <SystemClock_Config+0xc8>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <SystemClock_Config+0xcc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a20      	ldr	r2, [pc, #128]	; (8001914 <SystemClock_Config+0xcc>)
 8001892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <SystemClock_Config+0xcc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ac:	2310      	movs	r3, #16
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b0:	2302      	movs	r3, #2
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018b8:	2310      	movs	r3, #16
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018bc:	23c0      	movs	r3, #192	; 0xc0
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 f927 	bl	8003b20 <HAL_RCC_OscConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018d8:	f000 f898 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018dc:	230f      	movs	r3, #15
 80018de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e0:	2302      	movs	r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2103      	movs	r1, #3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fb89 	bl	8004010 <HAL_RCC_ClockConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001904:	f000 f882 	bl	8001a0c <Error_Handler>
  }
}
 8001908:	bf00      	nop
 800190a:	3750      	adds	r7, #80	; 0x50
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000

08001918 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af06      	add	r7, sp, #24
 8001920:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2f      	ldr	r2, [pc, #188]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d155      	bne.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0xc0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
	{
		__disable_irq();
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001930:	2120      	movs	r1, #32
 8001932:	482d      	ldr	r0, [pc, #180]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001934:	f001 f943 	bl	8002bbe <HAL_GPIO_TogglePin>
		else if(*(ptr_t) >= T_MAX || ptr_t == NULL)
		{
			*ptr_DC = 0;
		} */

		*ptr_t = *ptr_t + T_S;
 8001938:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194c:	edc3 7a00 	vstr	s15, [r3]
		*ptr_DC = PID_Control(PID1_ptr, Tank2_ptr);
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4927      	ldr	r1, [pc, #156]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800195a:	680c      	ldr	r4, [r1, #0]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fc42 	bl	80011e8 <PID_Control>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
 8001968:	edc4 7a00 	vstr	s15, [r4]
		//*ptr_DC = LQI_Control(LQI1_ptr,Tank1_ptr, Tank2_ptr);
		actuation_pump(Pump1_ptr,*ptr_DC);
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	4610      	mov	r0, r2
 800197e:	f7ff fcd1 	bl	8001324 <actuation_pump>

		printf("%.2f,L1:%.3f,L2:%.3f,DC:%.3f\n",*(ptr_t),Tank1.level_current, Tank2.level_current,*(ptr_DC));
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fde5 	bl	8000558 <__aeabi_f2d>
 800198e:	4682      	mov	sl, r0
 8001990:	468b      	mov	fp, r1
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdde 	bl	8000558 <__aeabi_f2d>
 800199c:	4604      	mov	r4, r0
 800199e:	460d      	mov	r5, r1
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdd7 	bl	8000558 <__aeabi_f2d>
 80019aa:	4680      	mov	r8, r0
 80019ac:	4689      	mov	r9, r1
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdcf 	bl	8000558 <__aeabi_f2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80019c6:	e9cd 4500 	strd	r4, r5, [sp]
 80019ca:	4652      	mov	r2, sl
 80019cc:	465b      	mov	r3, fp
 80019ce:	480e      	ldr	r0, [pc, #56]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80019d0:	f00a f894 	bl	800bafc <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80019d4:	b662      	cpsie	i
}
 80019d6:	bf00      	nop

		__enable_irq();
	}

}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40020000 	.word	0x40020000
 80019ec:	20000004 	.word	0x20000004
 80019f0:	20000014 	.word	0x20000014
 80019f4:	20000010 	.word	0x20000010
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000530 	.word	0x20000530
 8001a04:	20000540 	.word	0x20000540
 8001a08:	0800d8b8 	.word	0x0800d8b8

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>
	...

08001a18 <Sensor_Init>:
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;


void Sensor_Init(struct sensors s,sensor_modes mode){
 8001a18:	b084      	sub	sp, #16
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	f107 0c10 	add.w	ip, r7, #16
 8001a24:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOC, arr_gpio[0], GPIO_PIN_RESET); 	// Disable XSHUT
 8001a28:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <Sensor_Init+0x110>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	483e      	ldr	r0, [pc, #248]	; (8001b2c <Sensor_Init+0x114>)
 8001a32:	f001 f8ab 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, arr_gpio[1], GPIO_PIN_RESET); 	// Disable XSHUT
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <Sensor_Init+0x110>)
 8001a38:	885b      	ldrh	r3, [r3, #2]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	483b      	ldr	r0, [pc, #236]	; (8001b2c <Sensor_Init+0x114>)
 8001a40:	f001 f8a4 	bl	8002b8c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001a44:	200a      	movs	r0, #10
 8001a46:	f000 fde7 	bl	8002618 <HAL_Delay>

	for (int i = 0; i<2;i++){
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	e060      	b.n	8001b12 <Sensor_Init+0xfa>

		HAL_GPIO_WritePin(GPIOC, arr_gpio[i], GPIO_PIN_SET); 		// Enable XSHUT
 8001a50:	4a35      	ldr	r2, [pc, #212]	; (8001b28 <Sensor_Init+0x110>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4833      	ldr	r0, [pc, #204]	; (8001b2c <Sensor_Init+0x114>)
 8001a5e:	f001 f895 	bl	8002b8c <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8001a62:	2014      	movs	r0, #20
 8001a64:	f000 fdd8 	bl	8002618 <HAL_Delay>

		VL53L0X_WaitDeviceBooted(s.Dev_array[i]);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	33d6      	adds	r3, #214	; 0xd6
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fc57 	bl	8006328 <VL53L0X_WaitDeviceBooted>
		VL53L0X_DataInit((s.Dev_array[i]));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	33d6      	adds	r3, #214	; 0xd6
 8001a7e:	f107 0210 	add.w	r2, r7, #16
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 f968 	bl	8005d5c <VL53L0X_DataInit>
		if (i == 0){
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <Sensor_Init+0xac>
			printf("Addr change 1: %i \n\r\n\r", VL53L0X_SetDeviceAddress(s.Dev_array[i], sensor1_addr));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	33d6      	adds	r3, #214	; 0xd6
 8001a96:	f107 0210 	add.w	r2, r7, #16
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	2154      	movs	r1, #84	; 0x54
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 f942 	bl	8005d2a <VL53L0X_SetDeviceAddress>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4821      	ldr	r0, [pc, #132]	; (8001b30 <Sensor_Init+0x118>)
 8001aac:	f00a f826 	bl	800bafc <iprintf>
			s.Dev_array[i]->I2cDevAddr = sensor1_addr;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	33d6      	adds	r3, #214	; 0xd6
 8001ab4:	f107 0210 	add.w	r2, r7, #16
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	2254      	movs	r2, #84	; 0x54
 8001abe:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001ac2:	e017      	b.n	8001af4 <Sensor_Init+0xdc>
		}else{
			printf("Addr change 2: %i \n\r\n\r", VL53L0X_SetDeviceAddress(s.Dev_array[i], sensor2_addr));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	33d6      	adds	r3, #214	; 0xd6
 8001ac8:	f107 0210 	add.w	r2, r7, #16
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	2156      	movs	r1, #86	; 0x56
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 f929 	bl	8005d2a <VL53L0X_SetDeviceAddress>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4815      	ldr	r0, [pc, #84]	; (8001b34 <Sensor_Init+0x11c>)
 8001ade:	f00a f80d 	bl	800bafc <iprintf>
			s.Dev_array[i]->I2cDevAddr = sensor2_addr;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	33d6      	adds	r3, #214	; 0xd6
 8001ae6:	f107 0210 	add.w	r2, r7, #16
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	2256      	movs	r2, #86	; 0x56
 8001af0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		}
		Sensor_Config(s.Dev_array[i],mode);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	33d6      	adds	r3, #214	; 0xd6
 8001af8:	f107 0210 	add.w	r2, r7, #16
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	f897 2370 	ldrb.w	r2, [r7, #880]	; 0x370
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f816 	bl	8001b38 <Sensor_Config>
	for (int i = 0; i<2;i++){
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	dd9b      	ble.n	8001a50 <Sensor_Init+0x38>
	}
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b24:	b004      	add	sp, #16
 8001b26:	4770      	bx	lr
 8001b28:	20000018 	.word	0x20000018
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	0800d8d8 	.word	0x0800d8d8
 8001b34:	0800d8f0 	.word	0x0800d8f0

08001b38 <Sensor_Config>:


void Sensor_Config(VL53L0X_DEV Dev,sensor_modes mode){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]

	VL53L0X_WaitDeviceBooted( Dev );
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f004 fbef 	bl	8006328 <VL53L0X_WaitDeviceBooted>
	VL53L0X_StaticInit( Dev );
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f004 fa6a 	bl	8006024 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev,  &VhvSettings, &PhaseCal);
 8001b50:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <Sensor_Config+0xe8>)
 8001b52:	4934      	ldr	r1, [pc, #208]	; (8001c24 <Sensor_Config+0xec>)
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f005 f907 	bl	8006d68 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8001b5a:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <Sensor_Config+0xf0>)
 8001b5c:	4933      	ldr	r1, [pc, #204]	; (8001c2c <Sensor_Config+0xf4>)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 fd90 	bl	8007684 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8001b64:	2100      	movs	r1, #0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f004 fc7c 	bl	8006464 <VL53L0X_SetDeviceMode>

	switch(mode){
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d03a      	beq.n	8001be8 <Sensor_Config+0xb0>
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	dc4c      	bgt.n	8001c10 <Sensor_Config+0xd8>
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <Sensor_Config+0x48>
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d01f      	beq.n	8001bbe <Sensor_Config+0x86>
 8001b7e:	e047      	b.n	8001c10 <Sensor_Config+0xd8>
					case 0:
						printf("LONG RANGE");
 8001b80:	482b      	ldr	r0, [pc, #172]	; (8001c30 <Sensor_Config+0xf8>)
 8001b82:	f009 ffbb 	bl	800bafc <iprintf>
						VL53L0X_SetLimitCheckValue(Dev,VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,(FixPoint1616_t)(0.1*65536));
 8001b86:	f641 1299 	movw	r2, #6553	; 0x1999
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f004 ff95 	bl	8006abc <VL53L0X_SetLimitCheckValue>
						VL53L0X_SetLimitCheckValue(Dev,VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,(FixPoint1616_t)(60*65536));
 8001b92:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f004 ff8f 	bl	8006abc <VL53L0X_SetLimitCheckValue>
						VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,33000);
 8001b9e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f004 fcbc 	bl	8006520 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
						VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001ba8:	2212      	movs	r2, #18
 8001baa:	2100      	movs	r1, #0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f004 fcdd 	bl	800656c <VL53L0X_SetVcselPulsePeriod>
						VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001bb2:	220e      	movs	r2, #14
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f004 fcd8 	bl	800656c <VL53L0X_SetVcselPulsePeriod>
						break;
 8001bbc:	e028      	b.n	8001c10 <Sensor_Config+0xd8>
					case 1:
						printf("HIGH SPEED");
 8001bbe:	481d      	ldr	r0, [pc, #116]	; (8001c34 <Sensor_Config+0xfc>)
 8001bc0:	f009 ff9c 	bl	800bafc <iprintf>
						VL53L0X_SetLimitCheckValue(Dev,VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,(FixPoint1616_t)(0.25*65536));
 8001bc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f004 ff76 	bl	8006abc <VL53L0X_SetLimitCheckValue>
						VL53L0X_SetLimitCheckValue(Dev,VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,(FixPoint1616_t)(32*65536));
 8001bd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f004 ff70 	bl	8006abc <VL53L0X_SetLimitCheckValue>
						VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,	20000);
 8001bdc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f004 fc9d 	bl	8006520 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
						break;
 8001be6:	e013      	b.n	8001c10 <Sensor_Config+0xd8>
					case 2:
						printf("HIGH ACCURACY");
 8001be8:	4813      	ldr	r0, [pc, #76]	; (8001c38 <Sensor_Config+0x100>)
 8001bea:	f009 ff87 	bl	800bafc <iprintf>
						VL53L0X_SetLimitCheckValue(Dev,VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
 8001bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f004 ff61 	bl	8006abc <VL53L0X_SetLimitCheckValue>
						(FixPoint1616_t)(0.25*65536));
						VL53L0X_SetLimitCheckValue(Dev,VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,(FixPoint1616_t)(18*65536));
 8001bfa:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f004 ff5b 	bl	8006abc <VL53L0X_SetLimitCheckValue>
						VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,200000);
 8001c06:	490d      	ldr	r1, [pc, #52]	; (8001c3c <Sensor_Config+0x104>)
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f004 fc89 	bl	8006520 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
						break;
 8001c0e:	bf00      	nop

	}
	HAL_Delay(100);
 8001c10:	2064      	movs	r0, #100	; 0x64
 8001c12:	f000 fd01 	bl	8002618 <HAL_Delay>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200005ca 	.word	0x200005ca
 8001c24:	200005c9 	.word	0x200005c9
 8001c28:	200005c8 	.word	0x200005c8
 8001c2c:	200005c4 	.word	0x200005c4
 8001c30:	0800d908 	.word	0x0800d908
 8001c34:	0800d914 	.word	0x0800d914
 8001c38:	0800d920 	.word	0x0800d920
 8001c3c:	00030d40 	.word	0x00030d40

08001c40 <Get_Data_Sensors>:


void Get_Data_Sensors(struct sensors s, uint32_t* data1,uint32_t* data2){
 8001c40:	b084      	sub	sp, #16
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	f107 0c08 	add.w	ip, r7, #8
 8001c4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		/*Check that these are not pointing to NULL*/
		assert(data1);
 8001c4e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <Get_Data_Sensors+0x22>
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <Get_Data_Sensors+0xac>)
 8001c58:	4a25      	ldr	r2, [pc, #148]	; (8001cf0 <Get_Data_Sensors+0xb0>)
 8001c5a:	2156      	movs	r1, #86	; 0x56
 8001c5c:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <Get_Data_Sensors+0xb4>)
 8001c5e:	f009 f867 	bl	800ad30 <__assert_func>
		assert(data2);
 8001c62:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d105      	bne.n	8001c76 <Get_Data_Sensors+0x36>
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <Get_Data_Sensors+0xb8>)
 8001c6c:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <Get_Data_Sensors+0xb0>)
 8001c6e:	2157      	movs	r1, #87	; 0x57
 8001c70:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <Get_Data_Sensors+0xb4>)
 8001c72:	f009 f85d 	bl	800ad30 <__assert_func>

		if((VL53L0X_PerformSingleRangingMeasurement(s.Dev_array[0], &s.RangingData[0]) == 0) ){
 8001c76:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001c7a:	f107 0108 	add.w	r1, r7, #8
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f005 fb14 	bl	80072ac <VL53L0X_PerformSingleRangingMeasurement>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10f      	bne.n	8001caa <Get_Data_Sensors+0x6a>

			if( (s.RangingData[0].RangeStatus == 0)  ){
 8001c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <Get_Data_Sensors+0x5e>
				*data1 = s.RangingData[0].RangeMilliMeter;
 8001c92:	8a3b      	ldrh	r3, [r7, #16]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e005      	b.n	8001caa <Get_Data_Sensors+0x6a>

			}
			else{
				printf("STATUS1: %i\n\r",  s.RangingData[0].RangeStatus);
 8001c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <Get_Data_Sensors+0xbc>)
 8001ca6:	f009 ff29 	bl	800bafc <iprintf>
			}
		}

		if((VL53L0X_PerformSingleRangingMeasurement(s.Dev_array[1], &s.RangingData[1]) == 0) ){
 8001caa:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001cae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f005 faf9 	bl	80072ac <VL53L0X_PerformSingleRangingMeasurement>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10f      	bne.n	8001ce0 <Get_Data_Sensors+0xa0>

				if( (s.RangingData[1].RangeStatus == 0)  ){
 8001cc0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <Get_Data_Sensors+0x94>
					*data2 = s.RangingData[1].RangeMilliMeter;
 8001cc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001cd0:	601a      	str	r2, [r3, #0]
					printf("STATUS2: %i\n\r", s.RangingData[1].RangeStatus);
				}
			}


}
 8001cd2:	e005      	b.n	8001ce0 <Get_Data_Sensors+0xa0>
					printf("STATUS2: %i\n\r", s.RangingData[1].RangeStatus);
 8001cd4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4809      	ldr	r0, [pc, #36]	; (8001d00 <Get_Data_Sensors+0xc0>)
 8001cdc:	f009 ff0e 	bl	800bafc <iprintf>
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ce8:	b004      	add	sp, #16
 8001cea:	4770      	bx	lr
 8001cec:	0800d930 	.word	0x0800d930
 8001cf0:	0800d978 	.word	0x0800d978
 8001cf4:	0800d938 	.word	0x0800d938
 8001cf8:	0800d950 	.word	0x0800d950
 8001cfc:	0800d958 	.word	0x0800d958
 8001d00:	0800d968 	.word	0x0800d968

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f000 fd5c 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <NMI_Handler+0x4>

08001d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler+0x4>

08001d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da0:	f000 fc1a 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001dae:	f002 fd24 	bl	80047fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200005d0 	.word	0x200005d0

08001dbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dc2:	f002 fd1a 	bl	80047fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200005d0 	.word	0x200005d0

08001dd0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001dd6:	f002 fd10 	bl	80047fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200005d0 	.word	0x200005d0

08001de4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIM1_CC_IRQHandler+0x10>)
 8001dea:	f002 fd06 	bl	80047fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200005d0 	.word	0x200005d0

08001df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_kill>:

int _kill(int pid, int sig)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e12:	f008 ffb3 	bl	800ad7c <__errno>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2216      	movs	r2, #22
 8001e1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_exit>:

void _exit (int status)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ffe7 	bl	8001e08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e3a:	e7fe      	b.n	8001e3a <_exit+0x12>

08001e3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e00a      	b.n	8001e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4e:	f3af 8000 	nop.w
 8001e52:	4601      	mov	r1, r0
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	b2ca      	uxtb	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbf0      	blt.n	8001e4e <_read+0x12>
  }

  return len;
 8001e6c:	687b      	ldr	r3, [r7, #4]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_isatty>:

int _isatty(int file)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d207      	bcs.n	8001f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f10:	f008 ff34 	bl	800ad7c <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	220c      	movs	r2, #12
 8001f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e009      	b.n	8001f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <_sbrk+0x64>)
 8001f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f32:	68fb      	ldr	r3, [r7, #12]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20020000 	.word	0x20020000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	200005cc 	.word	0x200005cc
 8001f48:	20000740 	.word	0x20000740

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	f107 0318 	add.w	r3, r7, #24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001f9c:	4a2d      	ldr	r2, [pc, #180]	; (8002054 <MX_TIM1_Init+0xe4>)
 8001f9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2000;
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fa2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fb0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc8:	4821      	ldr	r0, [pc, #132]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fca:	f002 fa01 	bl	80043d0 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001fd4:	f7ff fd1a 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481a      	ldr	r0, [pc, #104]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001fe6:	f002 fe6f 	bl	8004cc8 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001ff0:	f7ff fd0c 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ff4:	4816      	ldr	r0, [pc, #88]	; (8002050 <MX_TIM1_Init+0xe0>)
 8001ff6:	f002 fba7 	bl	8004748 <HAL_TIM_IC_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002000:	f7ff fd04 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	480f      	ldr	r0, [pc, #60]	; (8002050 <MX_TIM1_Init+0xe0>)
 8002014:	f003 fb32 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800201e:	f7ff fcf5 	bl	8001a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002022:	2300      	movs	r3, #0
 8002024:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002026:	2301      	movs	r3, #1
 8002028:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM1_Init+0xe0>)
 800203a:	f002 fce6 	bl	8004a0a <HAL_TIM_IC_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002044:	f7ff fce2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200005d0 	.word	0x200005d0
 8002054:	40010000 	.word	0x40010000

08002058 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <MX_TIM2_Init+0xe8>)
 800208a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800208e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002092:	2201      	movs	r2, #1
 8002094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <MX_TIM2_Init+0xe8>)
 800209e:	f241 0267 	movw	r2, #4199	; 0x1067
 80020a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b0:	4823      	ldr	r0, [pc, #140]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020b2:	f002 f98d 	bl	80043d0 <HAL_TIM_Base_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020bc:	f7ff fca6 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ca:	4619      	mov	r1, r3
 80020cc:	481c      	ldr	r0, [pc, #112]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020ce:	f002 fdfb 	bl	8004cc8 <HAL_TIM_ConfigClockSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020d8:	f7ff fc98 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020dc:	4818      	ldr	r0, [pc, #96]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020de:	f002 fa29 	bl	8004534 <HAL_TIM_PWM_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020e8:	f7ff fc90 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f4:	f107 0320 	add.w	r3, r7, #32
 80020f8:	4619      	mov	r1, r3
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <MX_TIM2_Init+0xe8>)
 80020fc:	f003 fabe 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002106:	f7ff fc81 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	; 0x60
 800210c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800210e:	23fa      	movs	r3, #250	; 0xfa
 8002110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002122:	f002 fd0f 	bl	8004b44 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800212c:	f7ff fc6e 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM2_Init+0xe8>)
 8002132:	f000 f92b 	bl	800238c <HAL_TIM_MspPostInit>

}
 8002136:	bf00      	nop
 8002138:	3738      	adds	r7, #56	; 0x38
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000618 	.word	0x20000618

08002144 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0318 	add.w	r3, r7, #24
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800216e:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <MX_TIM3_Init+0xdc>)
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <MX_TIM3_Init+0xe0>)
 8002172:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <MX_TIM3_Init+0xdc>)
 8002176:	f240 3247 	movw	r2, #839	; 0x347
 800217a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <MX_TIM3_Init+0xdc>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <MX_TIM3_Init+0xdc>)
 8002184:	f242 720f 	movw	r2, #9999	; 0x270f
 8002188:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <MX_TIM3_Init+0xdc>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <MX_TIM3_Init+0xdc>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002196:	4822      	ldr	r0, [pc, #136]	; (8002220 <MX_TIM3_Init+0xdc>)
 8002198:	f002 f91a 	bl	80043d0 <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80021a2:	f7ff fc33 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	4619      	mov	r1, r3
 80021b2:	481b      	ldr	r0, [pc, #108]	; (8002220 <MX_TIM3_Init+0xdc>)
 80021b4:	f002 fd88 	bl	8004cc8 <HAL_TIM_ConfigClockSource>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80021be:	f7ff fc25 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80021c2:	4817      	ldr	r0, [pc, #92]	; (8002220 <MX_TIM3_Init+0xdc>)
 80021c4:	f002 fac0 	bl	8004748 <HAL_TIM_IC_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80021ce:	f7ff fc1d 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	4619      	mov	r1, r3
 80021e0:	480f      	ldr	r0, [pc, #60]	; (8002220 <MX_TIM3_Init+0xdc>)
 80021e2:	f003 fa4b 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80021ec:	f7ff fc0e 	bl	8001a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021f0:	2300      	movs	r3, #0
 80021f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021f4:	2301      	movs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	4619      	mov	r1, r3
 8002206:	4806      	ldr	r0, [pc, #24]	; (8002220 <MX_TIM3_Init+0xdc>)
 8002208:	f002 fbff 	bl	8004a0a <HAL_TIM_IC_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002212:	f7ff fbfb 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000660 	.word	0x20000660
 8002224:	40000400 	.word	0x40000400

08002228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4c      	ldr	r2, [pc, #304]	; (8002378 <HAL_TIM_Base_MspInit+0x150>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d14d      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b44      	ldr	r3, [pc, #272]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002294:	2301      	movs	r3, #1
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	4838      	ldr	r0, [pc, #224]	; (8002380 <HAL_TIM_Base_MspInit+0x158>)
 80022a0:	f000 faf0 	bl	8002884 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2018      	movs	r0, #24
 80022aa:	f000 fab4 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80022ae:	2018      	movs	r0, #24
 80022b0:	f000 facd 	bl	800284e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2019      	movs	r0, #25
 80022ba:	f000 faac 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022be:	2019      	movs	r0, #25
 80022c0:	f000 fac5 	bl	800284e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	201a      	movs	r0, #26
 80022ca:	f000 faa4 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022ce:	201a      	movs	r0, #26
 80022d0:	f000 fabd 	bl	800284e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	201b      	movs	r0, #27
 80022da:	f000 fa9c 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022de:	201b      	movs	r0, #27
 80022e0:	f000 fab5 	bl	800284e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022e4:	e044      	b.n	8002370 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d10e      	bne.n	800230e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	4a20      	ldr	r2, [pc, #128]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]
}
 800230c:	e030      	b.n	8002370 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM3)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_TIM_Base_MspInit+0x15c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d12b      	bne.n	8002370 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a16      	ldr	r2, [pc, #88]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a0f      	ldr	r2, [pc, #60]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_TIM_Base_MspInit+0x154>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002350:	2340      	movs	r3, #64	; 0x40
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002360:	2302      	movs	r3, #2
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <HAL_TIM_Base_MspInit+0x160>)
 800236c:	f000 fa8a 	bl	8002884 <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40010000 	.word	0x40010000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	40000400 	.word	0x40000400
 8002388:	40020800 	.word	0x40020800

0800238c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d11d      	bne.n	80023ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_TIM_MspPostInit+0x68>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_TIM_MspPostInit+0x68>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_TIM_MspPostInit+0x68>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ca:	2301      	movs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023da:	2301      	movs	r3, #1
 80023dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <HAL_TIM_MspPostInit+0x6c>)
 80023e6:	f000 fa4d 	bl	8002884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <MX_USART2_UART_Init+0x50>)
 8002404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800240c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002422:	220c      	movs	r2, #12
 8002424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002434:	f003 f9a4 	bl	8005780 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800243e:	f7ff fae5 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200006a8 	.word	0x200006a8
 800244c:	40004400 	.word	0x40004400

08002450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_UART_MspInit+0x84>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12b      	bne.n	80024ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x88>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_UART_MspInit+0x88>)
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x88>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_UART_MspInit+0x88>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_UART_MspInit+0x88>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_UART_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024aa:	230c      	movs	r3, #12
 80024ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ba:	2307      	movs	r3, #7
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	; (80024dc <HAL_UART_MspInit+0x8c>)
 80024c6:	f000 f9dd 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024ca:	bf00      	nop
 80024cc:	3728      	adds	r7, #40	; 0x28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40004400 	.word	0x40004400
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024fc:	4c0b      	ldr	r4, [pc, #44]	; (800252c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250a:	f7ff fd1f 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f008 fc4d 	bl	800adac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7ff f8a9 	bl	8001668 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	200004b4 	.word	0x200004b4
  ldr r2, =_sidata
 8002524:	0800dd90 	.word	0x0800dd90
  ldr r2, =_sbss
 8002528:	200004b4 	.word	0x200004b4
  ldr r4, =_ebss
 800252c:	20000740 	.word	0x20000740

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <HAL_Init+0x40>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_Init+0x40>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800254e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <HAL_Init+0x40>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f000 f94f 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	2000      	movs	r0, #0
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7ff fbcc 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f967 	bl	800286a <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f000 f92f 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000001c 	.word	0x2000001c
 80025d0:	20000024 	.word	0x20000024
 80025d4:	20000020 	.word	0x20000020

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000024 	.word	0x20000024
 80025fc:	200006ec 	.word	0x200006ec

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200006ec 	.word	0x200006ec

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000024 	.word	0x20000024

08002660 <__NVIC_SetPriorityGrouping>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	; (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff29 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff3e 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff31 	bl	80026c4 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa2 	bl	80027bc <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e159      	b.n	8002b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8148 	bne.w	8002b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d130      	bne.n	8002938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a2 	beq.w	8002b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b54      	ldr	r3, [pc, #336]	; (8002b6c <HAL_GPIO_Init+0x2e8>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a26:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_GPIO_Init+0x2ec>)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_GPIO_Init+0x2f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0x202>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a48      	ldr	r2, [pc, #288]	; (8002b78 <HAL_GPIO_Init+0x2f4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x1fe>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a47      	ldr	r2, [pc, #284]	; (8002b7c <HAL_GPIO_Init+0x2f8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x1fa>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a46      	ldr	r2, [pc, #280]	; (8002b80 <HAL_GPIO_Init+0x2fc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x1f6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a45      	ldr	r2, [pc, #276]	; (8002b84 <HAL_GPIO_Init+0x300>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x1f2>
 8002a72:	2304      	movs	r3, #4
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a76:	2307      	movs	r3, #7
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x204>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4935      	ldr	r1, [pc, #212]	; (8002b70 <HAL_GPIO_Init+0x2ec>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b48:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <HAL_GPIO_Init+0x304>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f aea2 	bls.w	80028a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40013800 	.word	0x40013800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba8:	e003      	b.n	8002bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	041a      	lsls	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd0:	887a      	ldrh	r2, [r7, #2]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	041a      	lsls	r2, r3, #16
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	400b      	ands	r3, r1
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e12b      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fc98 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c58:	f001 fb92 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a81      	ldr	r2, [pc, #516]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d807      	bhi.n	8002c78 <HAL_I2C_Init+0x84>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a80      	ldr	r2, [pc, #512]	; (8002e6c <HAL_I2C_Init+0x278>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e006      	b.n	8002c86 <HAL_I2C_Init+0x92>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a7d      	ldr	r2, [pc, #500]	; (8002e70 <HAL_I2C_Init+0x27c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0e7      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a78      	ldr	r2, [pc, #480]	; (8002e74 <HAL_I2C_Init+0x280>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9b      	lsrs	r3, r3, #18
 8002c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_I2C_Init+0xd4>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	e009      	b.n	8002cdc <HAL_I2C_Init+0xe8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a69      	ldr	r2, [pc, #420]	; (8002e78 <HAL_I2C_Init+0x284>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	495c      	ldr	r1, [pc, #368]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	d819      	bhi.n	8002d30 <HAL_I2C_Init+0x13c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e59      	subs	r1, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0a:	1c59      	adds	r1, r3, #1
 8002d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d10:	400b      	ands	r3, r1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_I2C_Init+0x138>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e59      	subs	r1, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	e051      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	e04f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <HAL_I2C_Init+0x168>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e012      	b.n	8002d82 <HAL_I2C_Init+0x18e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x196>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e022      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <HAL_I2C_Init+0x1bc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e58      	subs	r0, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	440b      	add	r3, r1
 8002da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dae:	e00f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	6809      	ldr	r1, [r1, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6911      	ldr	r1, [r2, #16]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	000186a0 	.word	0x000186a0
 8002e6c:	001e847f 	.word	0x001e847f
 8002e70:	003d08ff 	.word	0x003d08ff
 8002e74:	431bde83 	.word	0x431bde83
 8002e78:	10624dd3 	.word	0x10624dd3

08002e7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff fbb6 	bl	8002600 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 80e0 	bne.w	8003064 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2319      	movs	r3, #25
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4970      	ldr	r1, [pc, #448]	; (8003070 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fc58 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0d3      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x50>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0cc      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d007      	beq.n	8002ef2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	893a      	ldrh	r2, [r7, #8]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a50      	ldr	r2, [pc, #320]	; (8003074 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fac2 	bl	80034c4 <I2C_MasterRequestWrite>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e08d      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f60:	e066      	b.n	8003030 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fcd2 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d107      	bne.n	8002f8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11b      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x188>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	6a39      	ldr	r1, [r7, #32]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fcc2 	bl	8003992 <I2C_WaitOnBTFFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b04      	cmp	r3, #4
 800301a:	d107      	bne.n	800302c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01a      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d194      	bne.n	8002f62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	00100002 	.word	0x00100002
 8003074:	ffff0000 	.word	0xffff0000

08003078 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	460b      	mov	r3, r1
 8003086:	817b      	strh	r3, [r7, #10]
 8003088:	4613      	mov	r3, r2
 800308a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff fab8 	bl	8002600 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b20      	cmp	r3, #32
 800309c:	f040 820b 	bne.w	80034b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2319      	movs	r3, #25
 80030a6:	2201      	movs	r2, #1
 80030a8:	497c      	ldr	r1, [pc, #496]	; (800329c <HAL_I2C_Master_Receive+0x224>)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fb5a 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	e1fe      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_I2C_Master_Receive+0x50>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e1f7      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d007      	beq.n	80030ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2222      	movs	r2, #34	; 0x22
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2210      	movs	r2, #16
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	893a      	ldrh	r2, [r7, #8]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <HAL_I2C_Master_Receive+0x228>)
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003130:	8979      	ldrh	r1, [r7, #10]
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fa46 	bl	80035c8 <I2C_MasterRequestRead>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1b8      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d113      	bne.n	8003176 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e18c      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b01      	cmp	r3, #1
 800317c:	d11b      	bne.n	80031b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e16c      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d11b      	bne.n	80031f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	e14c      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800321c:	e138      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	2b03      	cmp	r3, #3
 8003224:	f200 80f1 	bhi.w	800340a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	2b01      	cmp	r3, #1
 800322e:	d123      	bne.n	8003278 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fbed 	bl	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e139      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003276:	e10b      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	2b02      	cmp	r3, #2
 800327e:	d14e      	bne.n	800331e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2200      	movs	r2, #0
 8003288:	4906      	ldr	r1, [pc, #24]	; (80032a4 <HAL_I2C_Master_Receive+0x22c>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fa6a 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e10e      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
 800329a:	bf00      	nop
 800329c:	00100002 	.word	0x00100002
 80032a0:	ffff0000 	.word	0xffff0000
 80032a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800331c:	e0b8      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	2200      	movs	r2, #0
 8003326:	4966      	ldr	r1, [pc, #408]	; (80034c0 <HAL_I2C_Master_Receive+0x448>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa1b 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0bf      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	2200      	movs	r2, #0
 8003382:	494f      	ldr	r1, [pc, #316]	; (80034c0 <HAL_I2C_Master_Receive+0x448>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f9ed 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e091      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003408:	e042      	b.n	8003490 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fb00 	bl	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e04c      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d118      	bne.n	8003490 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f aec2 	bne.w	800321e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	00010004 	.word	0x00010004

080034c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d006      	beq.n	80034ee <I2C_MasterRequestWrite+0x2a>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <I2C_MasterRequestWrite+0x2a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ec:	d108      	bne.n	8003500 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e00b      	b.n	8003518 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	2b12      	cmp	r3, #18
 8003506:	d107      	bne.n	8003518 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f91d 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d103      	bne.n	8003548 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e035      	b.n	80035b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003554:	d108      	bne.n	8003568 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	e01b      	b.n	80035a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	11db      	asrs	r3, r3, #7
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0306 	and.w	r3, r3, #6
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f063 030f 	orn	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <I2C_MasterRequestWrite+0xfc>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f943 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e010      	b.n	80035b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <I2C_MasterRequestWrite+0x100>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f933 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	00010008 	.word	0x00010008
 80035c4:	00010002 	.word	0x00010002

080035c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	460b      	mov	r3, r1
 80035d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d006      	beq.n	8003602 <I2C_MasterRequestRead+0x3a>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d003      	beq.n	8003602 <I2C_MasterRequestRead+0x3a>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003600:	d108      	bne.n	8003614 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e00b      	b.n	800362c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b11      	cmp	r3, #17
 800361a:	d107      	bne.n	800362c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f893 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003652:	d103      	bne.n	800365c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e079      	b.n	8003754 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003668:	d108      	bne.n	800367c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e05f      	b.n	800373c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	11db      	asrs	r3, r3, #7
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f063 030f 	orn	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4930      	ldr	r1, [pc, #192]	; (800375c <I2C_MasterRequestRead+0x194>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f8b9 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e054      	b.n	8003754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4929      	ldr	r1, [pc, #164]	; (8003760 <I2C_MasterRequestRead+0x198>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f8a9 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e044      	b.n	8003754 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f831 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003716:	d103      	bne.n	8003720 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e017      	b.n	8003754 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003724:	897b      	ldrh	r3, [r7, #10]
 8003726:	11db      	asrs	r3, r3, #7
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 0306 	and.w	r3, r3, #6
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f063 030e 	orn	r3, r3, #14
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4907      	ldr	r1, [pc, #28]	; (8003760 <I2C_MasterRequestRead+0x198>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f865 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00010008 	.word	0x00010008
 8003760:	00010002 	.word	0x00010002

08003764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003774:	e025      	b.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d021      	beq.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe ff3f 	bl	8002600 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d116      	bne.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e023      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10d      	bne.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	e00c      	b.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	429a      	cmp	r2, r3
 8003806:	d0b6      	beq.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003820:	e051      	b.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003830:	d123      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003840:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800384a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e046      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d021      	beq.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe febd 	bl	8002600 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e020      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e00b      	b.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d18d      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391c:	e02d      	b.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f8ce 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e02d      	b.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fe63 	bl	8002600 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d1ca      	bne.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800399e:	e02d      	b.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f88d 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e02d      	b.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d021      	beq.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	f7fe fe22 	bl	8002600 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e007      	b.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d1ca      	bne.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a20:	e042      	b.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d119      	bne.n	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0210 	mvn.w	r2, #16
 8003a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e029      	b.n	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fe fdcc 	bl	8002600 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d1b5      	bne.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d11b      	bne.n	8003b10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e267      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d075      	beq.n	8003c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d00c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d112      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d05b      	beq.n	8003c28 <HAL_RCC_OscConfig+0x108>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d157      	bne.n	8003c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e242      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x74>
 8003b86:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e01d      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x98>
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6c      	ldr	r2, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003bb8:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fd12 	bl	8002600 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe fd0e 	bl	8002600 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e207      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0xc0>
 8003bfe:	e014      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fcfe 	bl	8002600 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fcfa 	bl	8002600 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1f3      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0xe8>
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d063      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c36:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d11c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1c7      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4937      	ldr	r1, [pc, #220]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	e03a      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fcb3 	bl	8002600 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fcaf 	bl	8002600 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1a8      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4925      	ldr	r1, [pc, #148]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
 8003cd0:	e015      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fc92 	bl	8002600 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fc8e 	bl	8002600 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e187      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fe fc72 	bl	8002600 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fe fc6e 	bl	8002600 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e167      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x200>
 8003d3e:	e01b      	b.n	8003d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d46:	f7fe fc5b 	bl	8002600 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	e00e      	b.n	8003d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fe fc57 	bl	8002600 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d907      	bls.n	8003d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e150      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	42470000 	.word	0x42470000
 8003d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ea      	bne.n	8003d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8097 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a7c      	ldr	r2, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b74      	ldr	r3, [pc, #464]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a73      	ldr	r2, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fc17 	bl	8002600 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fe fc13 	bl	8002600 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e10c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
 8003dfc:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a63      	ldr	r2, [pc, #396]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e01c      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x30c>
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a5e      	ldr	r2, [pc, #376]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fbd8 	bl	8002600 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe fbd4 	bl	8002600 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0cb      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ee      	beq.n	8003e54 <HAL_RCC_OscConfig+0x334>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fe fbc2 	bl	8002600 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe fbbe 	bl	8002600 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0b5      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80a1 	beq.w	8004000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d05c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d141      	bne.n	8003f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fb92 	bl	8002600 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe fb8e 	bl	8002600 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e087      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	491b      	ldr	r1, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fb67 	bl	8002600 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fe fb63 	bl	8002600 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e05c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x416>
 8003f54:	e054      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe fb50 	bl	8002600 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fb4c 	bl	8002600 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e045      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x444>
 8003f82:	e03d      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e038      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000
 8003f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x4ec>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d028      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d121      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d11a      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fcc:	4013      	ands	r3, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0cc      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d90c      	bls.n	800404c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d044      	beq.n	8004130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d119      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e067      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4934      	ldr	r1, [pc, #208]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7fe fa7e 	bl	8002600 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fe fa7a 	bl	8002600 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20c      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe f9de 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	0800d98c 	.word	0x0800d98c
 80041d4:	2000001c 	.word	0x2000001c
 80041d8:	20000020 	.word	0x20000020

080041dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b090      	sub	sp, #64	; 0x40
 80041e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
 80041e8:	2300      	movs	r3, #0
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	2300      	movs	r3, #0
 80041ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d00d      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x40>
 8004200:	2b08      	cmp	r3, #8
 8004202:	f200 80a1 	bhi.w	8004348 <HAL_RCC_GetSysClockFreq+0x16c>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x3a>
 800420e:	e09b      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_GetSysClockFreq+0x184>)
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004214:	e09b      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_GetSysClockFreq+0x188>)
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800421a:	e098      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d028      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	2200      	movs	r2, #0
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	627a      	str	r2, [r7, #36]	; 0x24
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004244:	2100      	movs	r1, #0
 8004246:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCC_GetSysClockFreq+0x188>)
 8004248:	fb03 f201 	mul.w	r2, r3, r1
 800424c:	2300      	movs	r3, #0
 800424e:	fb00 f303 	mul.w	r3, r0, r3
 8004252:	4413      	add	r3, r2
 8004254:	4a43      	ldr	r2, [pc, #268]	; (8004364 <HAL_RCC_GetSysClockFreq+0x188>)
 8004256:	fba0 1202 	umull	r1, r2, r0, r2
 800425a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800425c:	460a      	mov	r2, r1
 800425e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004262:	4413      	add	r3, r2
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	2200      	movs	r2, #0
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	61fa      	str	r2, [r7, #28]
 800426e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004276:	f7fc fc9f 	bl	8000bb8 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4613      	mov	r3, r2
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004282:	e053      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	2200      	movs	r2, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	617a      	str	r2, [r7, #20]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004296:	f04f 0b00 	mov.w	fp, #0
 800429a:	4652      	mov	r2, sl
 800429c:	465b      	mov	r3, fp
 800429e:	f04f 0000 	mov.w	r0, #0
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	0159      	lsls	r1, r3, #5
 80042a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ac:	0150      	lsls	r0, r2, #5
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	ebb2 080a 	subs.w	r8, r2, sl
 80042b6:	eb63 090b 	sbc.w	r9, r3, fp
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042ce:	ebb2 0408 	subs.w	r4, r2, r8
 80042d2:	eb63 0509 	sbc.w	r5, r3, r9
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	00eb      	lsls	r3, r5, #3
 80042e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	4614      	mov	r4, r2
 80042e8:	461d      	mov	r5, r3
 80042ea:	eb14 030a 	adds.w	r3, r4, sl
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	eb45 030b 	adc.w	r3, r5, fp
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004302:	4629      	mov	r1, r5
 8004304:	028b      	lsls	r3, r1, #10
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800430c:	4621      	mov	r1, r4
 800430e:	028a      	lsls	r2, r1, #10
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004316:	2200      	movs	r2, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	60fa      	str	r2, [r7, #12]
 800431c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004320:	f7fc fc4a 	bl	8000bb8 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	3301      	adds	r3, #1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800433c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004346:	e002      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetSysClockFreq+0x184>)
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800434c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004350:	4618      	mov	r0, r3
 8004352:	3740      	adds	r7, #64	; 0x40
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	017d7840 	.word	0x017d7840

08004368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	2000001c 	.word	0x2000001c

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a9b      	lsrs	r3, r3, #10
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	0800d99c 	.word	0x0800d99c

080043a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043ac:	f7ff ffdc 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0b5b      	lsrs	r3, r3, #13
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	0800d99c 	.word	0x0800d99c

080043d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e041      	b.n	8004466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd ff16 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 fd4a 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d001      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e044      	b.n	8004512 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1e      	ldr	r2, [pc, #120]	; (8004520 <HAL_TIM_Base_Start_IT+0xb0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x6c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d013      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x6c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <HAL_TIM_Base_Start_IT+0xb4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x6c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a19      	ldr	r2, [pc, #100]	; (8004528 <HAL_TIM_Base_Start_IT+0xb8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x6c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_TIM_Base_Start_IT+0xbc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x6c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_TIM_Base_Start_IT+0xc0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d111      	bne.n	8004500 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d010      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	e007      	b.n	8004510 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40014000 	.word	0x40014000

08004534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e041      	b.n	80045ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f839 	bl	80045d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fc98 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x24>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e022      	b.n	8004652 <HAL_TIM_PWM_Start+0x6a>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d109      	bne.n	8004626 <HAL_TIM_PWM_Start+0x3e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e015      	b.n	8004652 <HAL_TIM_PWM_Start+0x6a>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x58>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e008      	b.n	8004652 <HAL_TIM_PWM_Start+0x6a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e068      	b.n	800472c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_TIM_PWM_Start+0x82>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	e013      	b.n	8004692 <HAL_TIM_PWM_Start+0xaa>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0x92>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004678:	e00b      	b.n	8004692 <HAL_TIM_PWM_Start+0xaa>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004688:	e003      	b.n	8004692 <HAL_TIM_PWM_Start+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 ffc8 	bl	8005630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <HAL_TIM_PWM_Start+0x14c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_TIM_PWM_Start+0x14c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x10e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046cc:	d013      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x10e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_TIM_PWM_Start+0x150>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x10e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a17      	ldr	r2, [pc, #92]	; (800473c <HAL_TIM_PWM_Start+0x154>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x10e>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a16      	ldr	r2, [pc, #88]	; (8004740 <HAL_TIM_PWM_Start+0x158>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIM_PWM_Start+0x10e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <HAL_TIM_PWM_Start+0x15c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d111      	bne.n	800471a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b06      	cmp	r3, #6
 8004706:	d010      	beq.n	800472a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004718:	e007      	b.n	800472a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40010000 	.word	0x40010000
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40014000 	.word	0x40014000

08004748 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e041      	b.n	80047de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f839 	bl	80047e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 fb8e 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d122      	bne.n	8004856 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d11b      	bne.n	8004856 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f06f 0202 	mvn.w	r2, #2
 8004826:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fb14 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 8004842:	e005      	b.n	8004850 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb06 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fb17 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d122      	bne.n	80048aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d11b      	bne.n	80048aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0204 	mvn.w	r2, #4
 800487a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 faea 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 8004896:	e005      	b.n	80048a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fadc 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 faed 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d122      	bne.n	80048fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d11b      	bne.n	80048fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0208 	mvn.w	r2, #8
 80048ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fac0 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 80048ea:	e005      	b.n	80048f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fab2 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fac3 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b10      	cmp	r3, #16
 800490a:	d122      	bne.n	8004952 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b10      	cmp	r3, #16
 8004918:	d11b      	bne.n	8004952 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0210 	mvn.w	r2, #16
 8004922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2208      	movs	r2, #8
 8004928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa96 	bl	8004e6a <HAL_TIM_IC_CaptureCallback>
 800493e:	e005      	b.n	800494c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa88 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fa99 	bl	8004e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10e      	bne.n	800497e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d107      	bne.n	800497e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f06f 0201 	mvn.w	r2, #1
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fc ffcd 	bl	8001918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d10e      	bne.n	80049aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d107      	bne.n	80049aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fee1 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d10e      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa5e 	bl	8004e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d10e      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d107      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0220 	mvn.w	r2, #32
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 feab 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e088      	b.n	8004b3a <HAL_TIM_IC_ConfigChannel+0x130>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11b      	bne.n	8004a6e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f000 fc3b 	bl	80052c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 020c 	bic.w	r2, r2, #12
 8004a58:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6999      	ldr	r1, [r3, #24]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	619a      	str	r2, [r3, #24]
 8004a6c:	e060      	b.n	8004b30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11c      	bne.n	8004aae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f000 fcb3 	bl	80053ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a96:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6999      	ldr	r1, [r3, #24]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	619a      	str	r2, [r3, #24]
 8004aac:	e040      	b.n	8004b30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d11b      	bne.n	8004aec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6819      	ldr	r1, [r3, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f000 fd00 	bl	80054c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 020c 	bic.w	r2, r2, #12
 8004ad6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69d9      	ldr	r1, [r3, #28]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	61da      	str	r2, [r3, #28]
 8004aea:	e021      	b.n	8004b30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d11c      	bne.n	8004b2c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6819      	ldr	r1, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f000 fd1d 	bl	8005540 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	61da      	str	r2, [r3, #28]
 8004b2a:	e001      	b.n	8004b30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0ae      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	f200 809f 	bhi.w	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004cb1 	.word	0x08004cb1
 8004b80:	08004cb1 	.word	0x08004cb1
 8004b84:	08004cb1 	.word	0x08004cb1
 8004b88:	08004bed 	.word	0x08004bed
 8004b8c:	08004cb1 	.word	0x08004cb1
 8004b90:	08004cb1 	.word	0x08004cb1
 8004b94:	08004cb1 	.word	0x08004cb1
 8004b98:	08004c2f 	.word	0x08004c2f
 8004b9c:	08004cb1 	.word	0x08004cb1
 8004ba0:	08004cb1 	.word	0x08004cb1
 8004ba4:	08004cb1 	.word	0x08004cb1
 8004ba8:	08004c6f 	.word	0x08004c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f9f8 	bl	8004fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0208 	orr.w	r2, r2, #8
 8004bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6999      	ldr	r1, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	619a      	str	r2, [r3, #24]
      break;
 8004bea:	e064      	b.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa3e 	bl	8005074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	021a      	lsls	r2, r3, #8
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	619a      	str	r2, [r3, #24]
      break;
 8004c2c:	e043      	b.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fa89 	bl	800514c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0208 	orr.w	r2, r2, #8
 8004c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0204 	bic.w	r2, r2, #4
 8004c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]
      break;
 8004c6c:	e023      	b.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fad3 	bl	8005220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	021a      	lsls	r2, r3, #8
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	61da      	str	r2, [r3, #28]
      break;
 8004cae:	e002      	b.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e0b4      	b.n	8004e4e <HAL_TIM_ConfigClockSource+0x186>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1c:	d03e      	beq.n	8004d9c <HAL_TIM_ConfigClockSource+0xd4>
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d22:	f200 8087 	bhi.w	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2a:	f000 8086 	beq.w	8004e3a <HAL_TIM_ConfigClockSource+0x172>
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d87f      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d34:	2b70      	cmp	r3, #112	; 0x70
 8004d36:	d01a      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0xa6>
 8004d38:	2b70      	cmp	r3, #112	; 0x70
 8004d3a:	d87b      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d3c:	2b60      	cmp	r3, #96	; 0x60
 8004d3e:	d050      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d40:	2b60      	cmp	r3, #96	; 0x60
 8004d42:	d877      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d44:	2b50      	cmp	r3, #80	; 0x50
 8004d46:	d03c      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d48:	2b50      	cmp	r3, #80	; 0x50
 8004d4a:	d873      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d058      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x13a>
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d86f      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d54:	2b30      	cmp	r3, #48	; 0x30
 8004d56:	d064      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	2b30      	cmp	r3, #48	; 0x30
 8004d5a:	d86b      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d060      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15a>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d867      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d05c      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15a>
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d05a      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x15a>
 8004d6c:	e062      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6899      	ldr	r1, [r3, #8]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f000 fc37 	bl	80055f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	609a      	str	r2, [r3, #8]
      break;
 8004d9a:	e04f      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6899      	ldr	r1, [r3, #8]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f000 fc20 	bl	80055f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dbe:	609a      	str	r2, [r3, #8]
      break;
 8004dc0:	e03c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 fade 	bl	8005390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2150      	movs	r1, #80	; 0x50
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fbed 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8004de0:	e02c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f000 fb3a 	bl	8005468 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2160      	movs	r1, #96	; 0x60
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fbdd 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8004e00:	e01c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 fabe 	bl	8005390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2140      	movs	r1, #64	; 0x40
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fbcd 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8004e20:	e00c      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f000 fbc4 	bl	80055ba <TIM_ITRx_SetConfig>
      break;
 8004e32:	e003      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      break;
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a34      	ldr	r2, [pc, #208]	; (8004f8c <TIM_Base_SetConfig+0xe4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_Base_SetConfig+0x38>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_Base_SetConfig+0x38>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a31      	ldr	r2, [pc, #196]	; (8004f90 <TIM_Base_SetConfig+0xe8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_Base_SetConfig+0x38>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a30      	ldr	r2, [pc, #192]	; (8004f94 <TIM_Base_SetConfig+0xec>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0x38>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <TIM_Base_SetConfig+0xf0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <TIM_Base_SetConfig+0xe4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01b      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f00:	d017      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <TIM_Base_SetConfig+0xe8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <TIM_Base_SetConfig+0xec>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <TIM_Base_SetConfig+0xf0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1f      	ldr	r2, [pc, #124]	; (8004f9c <TIM_Base_SetConfig+0xf4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <TIM_Base_SetConfig+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_Base_SetConfig+0x8a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <TIM_Base_SetConfig+0xfc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <TIM_Base_SetConfig+0xe4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d103      	bne.n	8004f78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	615a      	str	r2, [r3, #20]
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40000c00 	.word	0x40000c00
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 0302 	bic.w	r3, r3, #2
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <TIM_OC1_SetConfig+0xc8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0308 	bic.w	r3, r3, #8
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <TIM_OC1_SetConfig+0xc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d111      	bne.n	800504a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40010000 	.word	0x40010000

08005074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0210 	bic.w	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0320 	bic.w	r3, r3, #32
 80050be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <TIM_OC2_SetConfig+0xd4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d10d      	bne.n	80050f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a15      	ldr	r2, [pc, #84]	; (8005148 <TIM_OC2_SetConfig+0xd4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d113      	bne.n	8005120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <TIM_OC3_SetConfig+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a14      	ldr	r2, [pc, #80]	; (800521c <TIM_OC3_SetConfig+0xd0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d113      	bne.n	80051f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	621a      	str	r2, [r3, #32]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010000 	.word	0x40010000

08005220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800526a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a10      	ldr	r2, [pc, #64]	; (80052bc <TIM_OC4_SetConfig+0x9c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d109      	bne.n	8005294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40010000 	.word	0x40010000

080052c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a24      	ldr	r2, [pc, #144]	; (800537c <TIM_TI1_SetConfig+0xbc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <TIM_TI1_SetConfig+0x56>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d00f      	beq.n	8005316 <TIM_TI1_SetConfig+0x56>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <TIM_TI1_SetConfig+0xc0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00b      	beq.n	8005316 <TIM_TI1_SetConfig+0x56>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a20      	ldr	r2, [pc, #128]	; (8005384 <TIM_TI1_SetConfig+0xc4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <TIM_TI1_SetConfig+0x56>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <TIM_TI1_SetConfig+0xc8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_TI1_SetConfig+0x56>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a1e      	ldr	r2, [pc, #120]	; (800538c <TIM_TI1_SetConfig+0xcc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <TIM_TI1_SetConfig+0x5a>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <TIM_TI1_SetConfig+0x5c>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	e003      	b.n	800533a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	b2db      	uxtb	r3, r3
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 030a 	bic.w	r3, r3, #10
 8005354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 030a 	and.w	r3, r3, #10
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40014000 	.word	0x40014000

08005390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f023 0201 	bic.w	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 030a 	bic.w	r3, r3, #10
 80053cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 0210 	bic.w	r2, r3, #16
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800542c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	031b      	lsls	r3, r3, #12
 8005432:	b29b      	uxth	r3, r3
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005440:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f023 0210 	bic.w	r2, r3, #16
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	031b      	lsls	r3, r3, #12
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 0303 	bic.w	r3, r3, #3
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005504:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	b2db      	uxtb	r3, r3
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005518:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	031b      	lsls	r3, r3, #12
 8005584:	b29b      	uxth	r3, r3
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005592:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	031b      	lsls	r3, r3, #12
 8005598:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f043 0307 	orr.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800560a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	431a      	orrs	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	609a      	str	r2, [r3, #8]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2201      	movs	r2, #1
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	43db      	mvns	r3, r3
 8005652:	401a      	ands	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
}
 800566e:	bf00      	nop
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e050      	b.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d013      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a18      	ldr	r2, [pc, #96]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10c      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40014000 	.word	0x40014000

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e03f      	b.n	8005812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fe52 	bl	8002450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	; 0x24
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f829 	bl	800581c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800581c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005820:	b0c0      	sub	sp, #256	; 0x100
 8005822:	af00      	add	r7, sp, #0
 8005824:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	68d9      	ldr	r1, [r3, #12]
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	ea40 0301 	orr.w	r3, r0, r1
 8005844:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	431a      	orrs	r2, r3
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	431a      	orrs	r2, r3
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005874:	f021 010c 	bic.w	r1, r1, #12
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005882:	430b      	orrs	r3, r1
 8005884:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	6999      	ldr	r1, [r3, #24]
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	ea40 0301 	orr.w	r3, r0, r1
 80058a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <UART_SetConfig+0x2cc>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d005      	beq.n	80058bc <UART_SetConfig+0xa0>
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b8d      	ldr	r3, [pc, #564]	; (8005aec <UART_SetConfig+0x2d0>)
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d104      	bne.n	80058c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7fe fd74 	bl	80043a8 <HAL_RCC_GetPCLK2Freq>
 80058c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058c4:	e003      	b.n	80058ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c6:	f7fe fd5b 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 80058ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d8:	f040 810c 	bne.w	8005af4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	1891      	adds	r1, r2, r2
 80058f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80058f6:	415b      	adcs	r3, r3
 80058f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058fe:	4621      	mov	r1, r4
 8005900:	eb12 0801 	adds.w	r8, r2, r1
 8005904:	4629      	mov	r1, r5
 8005906:	eb43 0901 	adc.w	r9, r3, r1
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800591a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591e:	4690      	mov	r8, r2
 8005920:	4699      	mov	r9, r3
 8005922:	4623      	mov	r3, r4
 8005924:	eb18 0303 	adds.w	r3, r8, r3
 8005928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800592c:	462b      	mov	r3, r5
 800592e:	eb49 0303 	adc.w	r3, r9, r3
 8005932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005942:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005946:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800594a:	460b      	mov	r3, r1
 800594c:	18db      	adds	r3, r3, r3
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
 8005950:	4613      	mov	r3, r2
 8005952:	eb42 0303 	adc.w	r3, r2, r3
 8005956:	657b      	str	r3, [r7, #84]	; 0x54
 8005958:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800595c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005960:	f7fb f92a 	bl	8000bb8 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <UART_SetConfig+0x2d4>)
 800596a:	fba3 2302 	umull	r2, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	011c      	lsls	r4, r3, #4
 8005972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800597c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005980:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	64b9      	str	r1, [r7, #72]	; 0x48
 800598c:	415b      	adcs	r3, r3
 800598e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005994:	4641      	mov	r1, r8
 8005996:	eb12 0a01 	adds.w	sl, r2, r1
 800599a:	4649      	mov	r1, r9
 800599c:	eb43 0b01 	adc.w	fp, r3, r1
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b4:	4692      	mov	sl, r2
 80059b6:	469b      	mov	fp, r3
 80059b8:	4643      	mov	r3, r8
 80059ba:	eb1a 0303 	adds.w	r3, sl, r3
 80059be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059c2:	464b      	mov	r3, r9
 80059c4:	eb4b 0303 	adc.w	r3, fp, r3
 80059c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059e0:	460b      	mov	r3, r1
 80059e2:	18db      	adds	r3, r3, r3
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
 80059e6:	4613      	mov	r3, r2
 80059e8:	eb42 0303 	adc.w	r3, r2, r3
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
 80059ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059f6:	f7fb f8df 	bl	8000bb8 <__aeabi_uldivmod>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005a02:	fba3 2301 	umull	r2, r3, r3, r1
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	2264      	movs	r2, #100	; 0x64
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	1acb      	subs	r3, r1, r3
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005a18:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a24:	441c      	add	r4, r3
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	1891      	adds	r1, r2, r2
 8005a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a40:	415b      	adcs	r3, r3
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a48:	4641      	mov	r1, r8
 8005a4a:	1851      	adds	r1, r2, r1
 8005a4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a4e:	4649      	mov	r1, r9
 8005a50:	414b      	adcs	r3, r1
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a60:	4659      	mov	r1, fp
 8005a62:	00cb      	lsls	r3, r1, #3
 8005a64:	4651      	mov	r1, sl
 8005a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6a:	4651      	mov	r1, sl
 8005a6c:	00ca      	lsls	r2, r1, #3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	4642      	mov	r2, r8
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	460a      	mov	r2, r1
 8005a80:	eb42 0303 	adc.w	r3, r2, r3
 8005a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	18db      	adds	r3, r3, r3
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	eb42 0303 	adc.w	r3, r2, r3
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ab2:	f7fb f881 	bl	8000bb8 <__aeabi_uldivmod>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005abc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	2164      	movs	r1, #100	; 0x64
 8005ac4:	fb01 f303 	mul.w	r3, r1, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	3332      	adds	r3, #50	; 0x32
 8005ace:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <UART_SetConfig+0x2d4>)
 8005ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	f003 0207 	and.w	r2, r3, #7
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4422      	add	r2, r4
 8005ae2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae4:	e105      	b.n	8005cf2 <UART_SetConfig+0x4d6>
 8005ae6:	bf00      	nop
 8005ae8:	40011000 	.word	0x40011000
 8005aec:	40011400 	.word	0x40011400
 8005af0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b06:	4642      	mov	r2, r8
 8005b08:	464b      	mov	r3, r9
 8005b0a:	1891      	adds	r1, r2, r2
 8005b0c:	6239      	str	r1, [r7, #32]
 8005b0e:	415b      	adcs	r3, r3
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b16:	4641      	mov	r1, r8
 8005b18:	1854      	adds	r4, r2, r1
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	eb43 0501 	adc.w	r5, r3, r1
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	00eb      	lsls	r3, r5, #3
 8005b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b2e:	00e2      	lsls	r2, r4, #3
 8005b30:	4614      	mov	r4, r2
 8005b32:	461d      	mov	r5, r3
 8005b34:	4643      	mov	r3, r8
 8005b36:	18e3      	adds	r3, r4, r3
 8005b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	eb45 0303 	adc.w	r3, r5, r3
 8005b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b62:	4629      	mov	r1, r5
 8005b64:	008b      	lsls	r3, r1, #2
 8005b66:	4621      	mov	r1, r4
 8005b68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	008a      	lsls	r2, r1, #2
 8005b70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b74:	f7fb f820 	bl	8000bb8 <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4b60      	ldr	r3, [pc, #384]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	011c      	lsls	r4, r3, #4
 8005b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	1891      	adds	r1, r2, r2
 8005b9e:	61b9      	str	r1, [r7, #24]
 8005ba0:	415b      	adcs	r3, r3
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba8:	4641      	mov	r1, r8
 8005baa:	1851      	adds	r1, r2, r1
 8005bac:	6139      	str	r1, [r7, #16]
 8005bae:	4649      	mov	r1, r9
 8005bb0:	414b      	adcs	r3, r1
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc0:	4659      	mov	r1, fp
 8005bc2:	00cb      	lsls	r3, r1, #3
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bca:	4651      	mov	r1, sl
 8005bcc:	00ca      	lsls	r2, r1, #3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	189b      	adds	r3, r3, r2
 8005bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bdc:	464b      	mov	r3, r9
 8005bde:	460a      	mov	r2, r1
 8005be0:	eb42 0303 	adc.w	r3, r2, r3
 8005be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c00:	4649      	mov	r1, r9
 8005c02:	008b      	lsls	r3, r1, #2
 8005c04:	4641      	mov	r1, r8
 8005c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	008a      	lsls	r2, r1, #2
 8005c0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c12:	f7fa ffd1 	bl	8000bb8 <__aeabi_uldivmod>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	2164      	movs	r1, #100	; 0x64
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	3332      	adds	r3, #50	; 0x32
 8005c2e:	4a34      	ldr	r2, [pc, #208]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3a:	441c      	add	r4, r3
 8005c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c40:	2200      	movs	r2, #0
 8005c42:	673b      	str	r3, [r7, #112]	; 0x70
 8005c44:	677a      	str	r2, [r7, #116]	; 0x74
 8005c46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	1891      	adds	r1, r2, r2
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	415b      	adcs	r3, r3
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	1851      	adds	r1, r2, r1
 8005c5e:	6039      	str	r1, [r7, #0]
 8005c60:	4649      	mov	r1, r9
 8005c62:	414b      	adcs	r3, r1
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c72:	4659      	mov	r1, fp
 8005c74:	00cb      	lsls	r3, r1, #3
 8005c76:	4651      	mov	r1, sl
 8005c78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	00ca      	lsls	r2, r1, #3
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	4642      	mov	r2, r8
 8005c88:	189b      	adds	r3, r3, r2
 8005c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	460a      	mov	r2, r1
 8005c90:	eb42 0303 	adc.w	r3, r2, r3
 8005c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca0:	667a      	str	r2, [r7, #100]	; 0x64
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cae:	4649      	mov	r1, r9
 8005cb0:	008b      	lsls	r3, r1, #2
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb8:	4641      	mov	r1, r8
 8005cba:	008a      	lsls	r2, r1, #2
 8005cbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cc0:	f7fa ff7a 	bl	8000bb8 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005cca:	fba3 1302 	umull	r1, r3, r3, r2
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2164      	movs	r1, #100	; 0x64
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	3332      	adds	r3, #50	; 0x32
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <UART_SetConfig+0x4e4>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	f003 020f 	and.w	r2, r3, #15
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4422      	add	r2, r4
 8005cf0:	609a      	str	r2, [r3, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfe:	bf00      	nop
 8005d00:	51eb851f 	.word	0x51eb851f

08005d04 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 fcca 	bl	80076ae <VL53L0X_get_offset_calibration_data_micro_meter>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	218a      	movs	r1, #138	; 0x8a
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f004 fec3 	bl	800aad0 <VL53L0X_WrByte>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8005d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005d5c:	b5b0      	push	{r4, r5, r7, lr}
 8005d5e:	b096      	sub	sp, #88	; 0x58
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005d6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d107      	bne.n	8005d82 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005d72:	2200      	movs	r2, #0
 8005d74:	2188      	movs	r1, #136	; 0x88
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f004 feaa 	bl	800aad0 <VL53L0X_WrByte>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d90:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005d9a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a9e      	ldr	r2, [pc, #632]	; (800601c <VL53L0X_DataInit+0x2c0>)
 8005da2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a9d      	ldr	r2, [pc, #628]	; (8006020 <VL53L0X_DataInit+0x2c4>)
 8005daa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fac2 	bl	8006344 <VL53L0X_GetDeviceParameters>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005dc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d112      	bne.n	8005df4 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f103 0410 	add.w	r4, r3, #16
 8005ddc:	f107 0510 	add.w	r5, r7, #16
 8005de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2264      	movs	r2, #100	; 0x64
 8005df8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005e02:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005e0c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005e16:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005e22:	2201      	movs	r2, #1
 8005e24:	2180      	movs	r1, #128	; 0x80
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f004 fe52 	bl	800aad0 <VL53L0X_WrByte>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	21ff      	movs	r1, #255	; 0xff
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f004 fe46 	bl	800aad0 <VL53L0X_WrByte>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005e52:	2200      	movs	r2, #0
 8005e54:	2100      	movs	r1, #0
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f004 fe3a 	bl	800aad0 <VL53L0X_WrByte>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005e6a:	f107 030f 	add.w	r3, r7, #15
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2191      	movs	r1, #145	; 0x91
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f004 feae 	bl	800abd4 <VL53L0X_RdByte>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e8e:	2201      	movs	r2, #1
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f004 fe1c 	bl	800aad0 <VL53L0X_WrByte>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	21ff      	movs	r1, #255	; 0xff
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f004 fe10 	bl	800aad0 <VL53L0X_WrByte>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f004 fe04 	bl	800aad0 <VL53L0X_WrByte>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eda:	e014      	b.n	8005f06 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005edc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d114      	bne.n	8005f0e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fd35 	bl	800695c <VL53L0X_SetLimitCheckEnable>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f02:	3301      	adds	r3, #1
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	dde7      	ble.n	8005edc <VL53L0X_DataInit+0x180>
 8005f0c:	e000      	b.n	8005f10 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005f0e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005f10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d107      	bne.n	8005f28 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fd1d 	bl	800695c <VL53L0X_SetLimitCheckEnable>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005f28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f30:	2200      	movs	r2, #0
 8005f32:	2103      	movs	r1, #3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fd11 	bl	800695c <VL53L0X_SetLimitCheckEnable>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005f40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2104      	movs	r1, #4
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fd05 	bl	800695c <VL53L0X_SetLimitCheckEnable>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005f58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d107      	bne.n	8005f70 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005f60:	2200      	movs	r2, #0
 8005f62:	2105      	movs	r1, #5
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fcf9 	bl	800695c <VL53L0X_SetLimitCheckEnable>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005f70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d108      	bne.n	8005f8a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f78:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fd9c 	bl	8006abc <VL53L0X_SetLimitCheckValue>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005f8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d108      	bne.n	8005fa4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f96:	2101      	movs	r1, #1
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fd8f 	bl	8006abc <VL53L0X_SetLimitCheckValue>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d108      	bne.n	8005fbe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005fac:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fd82 	bl	8006abc <VL53L0X_SetLimitCheckValue>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d107      	bne.n	8005fd6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2103      	movs	r1, #3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fd76 	bl	8006abc <VL53L0X_SetLimitCheckValue>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005fe6:	22ff      	movs	r2, #255	; 0xff
 8005fe8:	2101      	movs	r1, #1
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f004 fd70 	bl	800aad0 <VL53L0X_WrByte>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005ffe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006002:	2b00      	cmp	r3, #0
 8006004:	d103      	bne.n	800600e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800600e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006012:	4618      	mov	r0, r3
 8006014:	3758      	adds	r7, #88	; 0x58
 8006016:	46bd      	mov	sp, r7
 8006018:	bdb0      	pop	{r4, r5, r7, pc}
 800601a:	bf00      	nop
 800601c:	00016b85 	.word	0x00016b85
 8006020:	000970a4 	.word	0x000970a4

08006024 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006024:	b5b0      	push	{r4, r5, r7, lr}
 8006026:	b09e      	sub	sp, #120	; 0x78
 8006028:	af02      	add	r7, sp, #8
 800602a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800602c:	2300      	movs	r3, #0
 800602e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006032:	f107 031c 	add.w	r3, r7, #28
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	2100      	movs	r1, #0
 800603a:	4618      	mov	r0, r3
 800603c:	f004 fee8 	bl	800ae10 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800604e:	2300      	movs	r3, #0
 8006050:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006060:	2101      	movs	r1, #1
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f002 fa79 	bl	800855a <VL53L0X_get_info_from_device>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006074:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800607c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006084:	2b01      	cmp	r3, #1
 8006086:	d80d      	bhi.n	80060a4 <VL53L0X_StaticInit+0x80>
 8006088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800608c:	2b01      	cmp	r3, #1
 800608e:	d102      	bne.n	8006096 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006092:	2b20      	cmp	r3, #32
 8006094:	d806      	bhi.n	80060a4 <VL53L0X_StaticInit+0x80>
 8006096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10e      	bne.n	80060bc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800609e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d90b      	bls.n	80060bc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80060a4:	f107 0218 	add.w	r2, r7, #24
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 fcf8 	bl	8007aa4 <VL53L0X_perform_ref_spad_management>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80060ba:	e009      	b.n	80060d0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80060bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c0:	461a      	mov	r2, r3
 80060c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fef9 	bl	8007ebc <VL53L0X_set_reference_spads>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80060d0:	4b94      	ldr	r3, [pc, #592]	; (8006324 <VL53L0X_StaticInit+0x300>)
 80060d2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80060d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10f      	bne.n	80060fc <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80060e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80060e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80060f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f6:	e001      	b.n	80060fc <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80060f8:	4b8a      	ldr	r3, [pc, #552]	; (8006324 <VL53L0X_StaticInit+0x300>)
 80060fa:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80060fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006104:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f003 fdcc 	bl	8009ca4 <VL53L0X_load_tuning_settings>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006112:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800611a:	2300      	movs	r3, #0
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2304      	movs	r3, #4
 8006120:	2200      	movs	r2, #0
 8006122:	2100      	movs	r1, #0
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 f8f1 	bl	800730c <VL53L0X_SetGpioConfig>
 800612a:	4603      	mov	r3, r0
 800612c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006130:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006134:	2b00      	cmp	r3, #0
 8006136:	d121      	bne.n	800617c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006138:	2201      	movs	r2, #1
 800613a:	21ff      	movs	r1, #255	; 0xff
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f004 fcc7 	bl	800aad0 <VL53L0X_WrByte>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006148:	f107 031a 	add.w	r3, r7, #26
 800614c:	461a      	mov	r2, r3
 800614e:	2184      	movs	r1, #132	; 0x84
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f004 fd69 	bl	800ac28 <VL53L0X_RdWord>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800615e:	4313      	orrs	r3, r2
 8006160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006164:	2200      	movs	r2, #0
 8006166:	21ff      	movs	r1, #255	; 0xff
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f004 fcb1 	bl	800aad0 <VL53L0X_WrByte>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006176:	4313      	orrs	r3, r2
 8006178:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800617c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006184:	8b7b      	ldrh	r3, [r7, #26]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006190:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006198:	f107 031c 	add.w	r3, r7, #28
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8d0 	bl	8006344 <VL53L0X_GetDeviceParameters>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80061aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d110      	bne.n	80061d4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80061b2:	f107 0319 	add.w	r3, r7, #25
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f992 	bl	80064e2 <VL53L0X_GetFractionEnable>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80061c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80061cc:	7e7a      	ldrb	r2, [r7, #25]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80061d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10e      	bne.n	80061fa <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f103 0410 	add.w	r4, r3, #16
 80061e2:	f107 051c 	add.w	r5, r7, #28
 80061e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80061f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80061fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d111      	bne.n	8006226 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006202:	f107 0319 	add.w	r3, r7, #25
 8006206:	461a      	mov	r2, r3
 8006208:	2101      	movs	r1, #1
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f004 fce2 	bl	800abd4 <VL53L0X_RdByte>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006216:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800621e:	7e7a      	ldrb	r2, [r7, #25]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006226:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800622a:	2b00      	cmp	r3, #0
 800622c:	d107      	bne.n	800623e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9ca 	bl	80065cc <VL53L0X_SetSequenceStepEnable>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800623e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006242:	2b00      	cmp	r3, #0
 8006244:	d107      	bne.n	8006256 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006246:	2200      	movs	r2, #0
 8006248:	2102      	movs	r1, #2
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9be 	bl	80065cc <VL53L0X_SetSequenceStepEnable>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006256:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2203      	movs	r2, #3
 8006262:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006266:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800626e:	f107 0313 	add.w	r3, r7, #19
 8006272:	461a      	mov	r2, r3
 8006274:	2100      	movs	r1, #0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f990 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006282:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800628a:	7cfa      	ldrb	r2, [r7, #19]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006292:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800629a:	f107 0313 	add.w	r3, r7, #19
 800629e:	461a      	mov	r2, r3
 80062a0:	2101      	movs	r1, #1
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f97a 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062b6:	7cfa      	ldrb	r2, [r7, #19]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80062be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	461a      	mov	r2, r3
 80062cc:	2103      	movs	r1, #3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f002 fec4 	bl	800905c <get_sequence_step_timeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80062ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	461a      	mov	r2, r3
 80062f8:	2104      	movs	r1, #4
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 feae 	bl	800905c <get_sequence_step_timeout>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006306:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006316:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800631a:	4618      	mov	r0, r3
 800631c:	3770      	adds	r7, #112	; 0x70
 800631e:	46bd      	mov	sp, r7
 8006320:	bdb0      	pop	{r4, r5, r7, pc}
 8006322:	bf00      	nop
 8006324:	20000028 	.word	0x20000028

08006328 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006330:	239d      	movs	r3, #157	; 0x9d
 8006332:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006334:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8b0 	bl	80064bc <VL53L0X_GetDeviceMode>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa78 	bl	8006864 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d107      	bne.n	800639e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	3310      	adds	r3, #16
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 faae 	bl	80068f6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800639e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fca9 	bl	8005d04 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80063b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d134      	bne.n	8006428 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80063be:	2300      	movs	r3, #0
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	e02a      	b.n	800641a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80063c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d12a      	bne.n	8006422 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	b299      	uxth	r1, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	3308      	adds	r3, #8
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	4413      	add	r3, r2
 80063da:	3304      	adds	r3, #4
 80063dc:	461a      	mov	r2, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fbce 	bl	8006b80 <VL53L0X_GetLimitCheckValue>
 80063e4:	4603      	mov	r3, r0
 80063e6:	461a      	mov	r2, r3
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80063ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d117      	bne.n	8006426 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	b299      	uxth	r1, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3318      	adds	r3, #24
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4413      	add	r3, r2
 8006402:	461a      	mov	r2, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb35 	bl	8006a74 <VL53L0X_GetLimitCheckEnable>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	4313      	orrs	r3, r2
 8006412:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3301      	adds	r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b05      	cmp	r3, #5
 800641e:	ddd1      	ble.n	80063c4 <VL53L0X_GetDeviceParameters+0x80>
 8006420:	e002      	b.n	8006428 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006426:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	333c      	adds	r3, #60	; 0x3c
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fc30 	bl	8006c9c <VL53L0X_GetWrapAroundCheckEnable>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d107      	bne.n	8006458 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f879 	bl	8006546 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	2b15      	cmp	r3, #21
 8006478:	bf8c      	ite	hi
 800647a:	2201      	movhi	r2, #1
 800647c:	2200      	movls	r2, #0
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	2a00      	cmp	r2, #0
 8006482:	d10e      	bne.n	80064a2 <VL53L0X_SetDeviceMode+0x3e>
 8006484:	2201      	movs	r2, #1
 8006486:	409a      	lsls	r2, r3
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <VL53L0X_SetDeviceMode+0x54>)
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	78fa      	ldrb	r2, [r7, #3]
 800649e:	741a      	strb	r2, [r3, #16]
		break;
 80064a0:	e001      	b.n	80064a6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80064a2:	23f8      	movs	r3, #248	; 0xf8
 80064a4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	0030000b 	.word	0x0030000b

080064bc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7c1a      	ldrb	r2, [r3, #16]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80064d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	2109      	movs	r1, #9
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f004 fb6d 	bl	800abd4 <VL53L0X_RdByte>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f003 fa26 	bl	8009982 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800653a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f003 faf3 	bl	8009b42 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
 8006578:	4613      	mov	r3, r2
 800657a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006580:	78ba      	ldrb	r2, [r7, #2]
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f002 ff3b 	bl	8009402 <VL53L0X_set_vcsel_pulse_period>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	460b      	mov	r3, r1
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4619      	mov	r1, r3
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f003 f9ad 	bl	8009914 <VL53L0X_get_vcsel_pulse_period>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80065be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
 80065d8:	4613      	mov	r3, r2
 80065da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065e8:	f107 030f 	add.w	r3, r7, #15
 80065ec:	461a      	mov	r2, r3
 80065ee:	2101      	movs	r1, #1
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f004 faef 	bl	800abd4 <VL53L0X_RdByte>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80065fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d15a      	bne.n	80066bc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006606:	78bb      	ldrb	r3, [r7, #2]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d12b      	bne.n	8006664 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	2b04      	cmp	r3, #4
 8006610:	d825      	bhi.n	800665e <VL53L0X_SetSequenceStepEnable+0x92>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	0800662d 	.word	0x0800662d
 800661c:	08006637 	.word	0x08006637
 8006620:	08006641 	.word	0x08006641
 8006624:	0800664b 	.word	0x0800664b
 8006628:	08006655 	.word	0x08006655
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800662c:	7dbb      	ldrb	r3, [r7, #22]
 800662e:	f043 0310 	orr.w	r3, r3, #16
 8006632:	75bb      	strb	r3, [r7, #22]
				break;
 8006634:	e043      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006636:	7dbb      	ldrb	r3, [r7, #22]
 8006638:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800663c:	75bb      	strb	r3, [r7, #22]
				break;
 800663e:	e03e      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006640:	7dbb      	ldrb	r3, [r7, #22]
 8006642:	f043 0304 	orr.w	r3, r3, #4
 8006646:	75bb      	strb	r3, [r7, #22]
				break;
 8006648:	e039      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006650:	75bb      	strb	r3, [r7, #22]
				break;
 8006652:	e034      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006654:	7dbb      	ldrb	r3, [r7, #22]
 8006656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800665a:	75bb      	strb	r3, [r7, #22]
				break;
 800665c:	e02f      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800665e:	23fc      	movs	r3, #252	; 0xfc
 8006660:	75fb      	strb	r3, [r7, #23]
 8006662:	e02c      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b04      	cmp	r3, #4
 8006668:	d825      	bhi.n	80066b6 <VL53L0X_SetSequenceStepEnable+0xea>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	08006685 	.word	0x08006685
 8006674:	0800668f 	.word	0x0800668f
 8006678:	08006699 	.word	0x08006699
 800667c:	080066a3 	.word	0x080066a3
 8006680:	080066ad 	.word	0x080066ad
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006684:	7dbb      	ldrb	r3, [r7, #22]
 8006686:	f023 0310 	bic.w	r3, r3, #16
 800668a:	75bb      	strb	r3, [r7, #22]
				break;
 800668c:	e017      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800668e:	7dbb      	ldrb	r3, [r7, #22]
 8006690:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006694:	75bb      	strb	r3, [r7, #22]
				break;
 8006696:	e012      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006698:	7dbb      	ldrb	r3, [r7, #22]
 800669a:	f023 0304 	bic.w	r3, r3, #4
 800669e:	75bb      	strb	r3, [r7, #22]
				break;
 80066a0:	e00d      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80066a2:	7dbb      	ldrb	r3, [r7, #22]
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	75bb      	strb	r3, [r7, #22]
				break;
 80066aa:	e008      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80066ac:	7dbb      	ldrb	r3, [r7, #22]
 80066ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b2:	75bb      	strb	r3, [r7, #22]
				break;
 80066b4:	e003      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066b6:	23fc      	movs	r3, #252	; 0xfc
 80066b8:	75fb      	strb	r3, [r7, #23]
 80066ba:	e000      	b.n	80066be <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80066bc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	7dba      	ldrb	r2, [r7, #22]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d01e      	beq.n	8006704 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80066c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80066ce:	7dbb      	ldrb	r3, [r7, #22]
 80066d0:	461a      	mov	r2, r3
 80066d2:	2101      	movs	r1, #1
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f004 f9fb 	bl	800aad0 <VL53L0X_WrByte>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80066de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7dba      	ldrb	r2, [r7, #22]
 80066ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80066ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80066fc:	6939      	ldr	r1, [r7, #16]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff ff0e 	bl	8006520 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	72fb      	strb	r3, [r7, #11]
 800671e:	4613      	mov	r3, r2
 8006720:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d836      	bhi.n	80067a0 <sequence_step_enabled+0x90>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <sequence_step_enabled+0x28>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	0800674d 	.word	0x0800674d
 800673c:	0800675f 	.word	0x0800675f
 8006740:	08006771 	.word	0x08006771
 8006744:	08006783 	.word	0x08006783
 8006748:	08006795 	.word	0x08006795
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800674c:	7abb      	ldrb	r3, [r7, #10]
 800674e:	111b      	asrs	r3, r3, #4
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	701a      	strb	r2, [r3, #0]
		break;
 800675c:	e022      	b.n	80067a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800675e:	7abb      	ldrb	r3, [r7, #10]
 8006760:	10db      	asrs	r3, r3, #3
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	b2da      	uxtb	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	701a      	strb	r2, [r3, #0]
		break;
 800676e:	e019      	b.n	80067a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006770:	7abb      	ldrb	r3, [r7, #10]
 8006772:	109b      	asrs	r3, r3, #2
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	b2da      	uxtb	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	701a      	strb	r2, [r3, #0]
		break;
 8006780:	e010      	b.n	80067a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006782:	7abb      	ldrb	r3, [r7, #10]
 8006784:	119b      	asrs	r3, r3, #6
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	b2da      	uxtb	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	701a      	strb	r2, [r3, #0]
		break;
 8006792:	e007      	b.n	80067a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006794:	7abb      	ldrb	r3, [r7, #10]
 8006796:	09db      	lsrs	r3, r3, #7
 8006798:	b2da      	uxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	701a      	strb	r2, [r3, #0]
		break;
 800679e:	e001      	b.n	80067a4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067a0:	23fc      	movs	r3, #252	; 0xfc
 80067a2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80067a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067c6:	f107 030e 	add.w	r3, r7, #14
 80067ca:	461a      	mov	r2, r3
 80067cc:	2101      	movs	r1, #1
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f004 fa00 	bl	800abd4 <VL53L0X_RdByte>
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80067d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80067e0:	7bba      	ldrb	r2, [r7, #14]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff ff92 	bl	8006710 <sequence_step_enabled>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80067f8:	7bba      	ldrb	r2, [r7, #14]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	3302      	adds	r3, #2
 80067fe:	2101      	movs	r1, #1
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff85 	bl	8006710 <sequence_step_enabled>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800680a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d108      	bne.n	8006824 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006812:	7bba      	ldrb	r2, [r7, #14]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	3301      	adds	r3, #1
 8006818:	2102      	movs	r1, #2
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff ff78 	bl	8006710 <sequence_step_enabled>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800682c:	7bba      	ldrb	r2, [r7, #14]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	3303      	adds	r3, #3
 8006832:	2103      	movs	r1, #3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff6b 	bl	8006710 <sequence_step_enabled>
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800683e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006846:	7bba      	ldrb	r2, [r7, #14]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	3304      	adds	r3, #4
 800684c:	2104      	movs	r1, #4
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff5e 	bl	8006710 <sequence_step_enabled>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006872:	f107 030c 	add.w	r3, r7, #12
 8006876:	461a      	mov	r2, r3
 8006878:	21f8      	movs	r1, #248	; 0xf8
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f004 f9d4 	bl	800ac28 <VL53L0X_RdWord>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d108      	bne.n	800689e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	461a      	mov	r2, r3
 8006892:	2104      	movs	r1, #4
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f004 f9ff 	bl	800ac98 <VL53L0X_RdDWord>
 800689a:	4603      	mov	r3, r0
 800689c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800689e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80068a6:	89bb      	ldrh	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	89ba      	ldrh	r2, [r7, #12]
 80068b0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	7f1b      	ldrb	r3, [r3, #28]
 80068de:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	7bba      	ldrb	r2, [r7, #14]
 80068e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80068e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b086      	sub	sp, #24
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006900:	2300      	movs	r3, #0
 8006902:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006904:	f107 030e 	add.w	r3, r7, #14
 8006908:	461a      	mov	r2, r3
 800690a:	2120      	movs	r1, #32
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f004 f98b 	bl	800ac28 <VL53L0X_RdWord>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d118      	bne.n	8006950 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800691e:	89fb      	ldrh	r3, [r7, #14]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	771a      	strb	r2, [r3, #28]
 8006936:	e00b      	b.n	8006950 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
 8006968:	4613      	mov	r3, r2
 800696a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800696c:	2300      	movs	r3, #0
 800696e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800697c:	887b      	ldrh	r3, [r7, #2]
 800697e:	2b05      	cmp	r3, #5
 8006980:	d902      	bls.n	8006988 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006982:	23fc      	movs	r3, #252	; 0xfc
 8006984:	75fb      	strb	r3, [r7, #23]
 8006986:	e05b      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006988:	787b      	ldrb	r3, [r7, #1]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006996:	2301      	movs	r3, #1
 8006998:	73bb      	strb	r3, [r7, #14]
 800699a:	e00a      	b.n	80069b2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	330c      	adds	r3, #12
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	2b05      	cmp	r3, #5
 80069b6:	d841      	bhi.n	8006a3c <VL53L0X_SetLimitCheckEnable+0xe0>
 80069b8:	a201      	add	r2, pc, #4	; (adr r2, 80069c0 <VL53L0X_SetLimitCheckEnable+0x64>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d9 	.word	0x080069d9
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	08006a03 	.word	0x08006a03
 80069d0:	08006a0d 	.word	0x08006a0d
 80069d4:	08006a25 	.word	0x08006a25

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7bfa      	ldrb	r2, [r7, #15]
 80069dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80069e0:	e02e      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	2144      	movs	r1, #68	; 0x44
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f004 f893 	bl	800ab18 <VL53L0X_WrWord>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]

			break;
 80069f6:	e023      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7bfa      	ldrb	r2, [r7, #15]
 80069fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006a00:	e01e      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7bfa      	ldrb	r2, [r7, #15]
 8006a06:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006a0a:	e019      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006a12:	7b7b      	ldrb	r3, [r7, #13]
 8006a14:	22fe      	movs	r2, #254	; 0xfe
 8006a16:	2160      	movs	r1, #96	; 0x60
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f004 f8a7 	bl	800ab6c <VL53L0X_UpdateByte>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006a22:	e00d      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006a2a:	7b7b      	ldrb	r3, [r7, #13]
 8006a2c:	22ef      	movs	r2, #239	; 0xef
 8006a2e:	2160      	movs	r1, #96	; 0x60
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f004 f89b 	bl	800ab6c <VL53L0X_UpdateByte>
 8006a36:	4603      	mov	r3, r0
 8006a38:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006a3a:	e001      	b.n	8006a40 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a3c:	23fc      	movs	r3, #252	; 0xfc
 8006a3e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10f      	bne.n	8006a68 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006a48:	787b      	ldrb	r3, [r7, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a4e:	887b      	ldrh	r3, [r7, #2]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006a5a:	e005      	b.n	8006a68 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006a86:	897b      	ldrh	r3, [r7, #10]
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d905      	bls.n	8006a98 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a8c:	23fc      	movs	r3, #252	; 0xfc
 8006a8e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e008      	b.n	8006aaa <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006a98:	897b      	ldrh	r3, [r7, #10]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7dba      	ldrb	r2, [r7, #22]
 8006aa8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006ada:	7dbb      	ldrb	r3, [r7, #22]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d107      	bne.n	8006af0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006ae0:	897b      	ldrh	r3, [r7, #10]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	e040      	b.n	8006b72 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006af0:	897b      	ldrh	r3, [r7, #10]
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d830      	bhi.n	8006b58 <VL53L0X_SetLimitCheckValue+0x9c>
 8006af6:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <VL53L0X_SetLimitCheckValue+0x40>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b15 	.word	0x08006b15
 8006b00:	08006b1d 	.word	0x08006b1d
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b3b 	.word	0x08006b3b
 8006b0c:	08006b43 	.word	0x08006b43
 8006b10:	08006b43 	.word	0x08006b43

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006b1a:	e01f      	b.n	8006b5c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	2144      	movs	r1, #68	; 0x44
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f003 fff6 	bl	800ab18 <VL53L0X_WrWord>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006b30:	e014      	b.n	8006b5c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006b38:	e010      	b.n	8006b5c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006b40:	e00c      	b.n	8006b5c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2164      	movs	r1, #100	; 0x64
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f003 ffe3 	bl	800ab18 <VL53L0X_WrWord>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006b56:	e001      	b.n	8006b5c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b58:	23fc      	movs	r3, #252	; 0xfc
 8006b5a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006b64:	897b      	ldrh	r3, [r7, #10]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop

08006b80 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006b96:	897b      	ldrh	r3, [r7, #10]
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d847      	bhi.n	8006c2c <VL53L0X_GetLimitCheckValue+0xac>
 8006b9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <VL53L0X_GetLimitCheckValue+0x24>)
 8006b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba2:	bf00      	nop
 8006ba4:	08006bbd 	.word	0x08006bbd
 8006ba8:	08006bc9 	.word	0x08006bc9
 8006bac:	08006bef 	.word	0x08006bef
 8006bb0:	08006bfb 	.word	0x08006bfb
 8006bb4:	08006c07 	.word	0x08006c07
 8006bb8:	08006c07 	.word	0x08006c07

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	77bb      	strb	r3, [r7, #30]
		break;
 8006bc6:	e033      	b.n	8006c30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006bc8:	f107 0316 	add.w	r3, r7, #22
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2144      	movs	r1, #68	; 0x44
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f004 f829 	bl	800ac28 <VL53L0X_RdWord>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006bda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006be2:	8afb      	ldrh	r3, [r7, #22]
 8006be4:	025b      	lsls	r3, r3, #9
 8006be6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77bb      	strb	r3, [r7, #30]
		break;
 8006bec:	e020      	b.n	8006c30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77bb      	strb	r3, [r7, #30]
		break;
 8006bf8:	e01a      	b.n	8006c30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	77bb      	strb	r3, [r7, #30]
		break;
 8006c04:	e014      	b.n	8006c30 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006c06:	f107 0316 	add.w	r3, r7, #22
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2164      	movs	r1, #100	; 0x64
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f004 f80a 	bl	800ac28 <VL53L0X_RdWord>
 8006c14:	4603      	mov	r3, r0
 8006c16:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006c18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006c20:	8afb      	ldrh	r3, [r7, #22]
 8006c22:	025b      	lsls	r3, r3, #9
 8006c24:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	77bb      	strb	r3, [r7, #30]
		break;
 8006c2a:	e001      	b.n	8006c30 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c2c:	23fc      	movs	r3, #252	; 0xfc
 8006c2e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d12a      	bne.n	8006c8e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006c38:	7fbb      	ldrb	r3, [r7, #30]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d124      	bne.n	8006c88 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d110      	bne.n	8006c66 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006c44:	897b      	ldrh	r3, [r7, #10]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c58:	897b      	ldrh	r3, [r7, #10]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c64:	e013      	b.n	8006c8e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c6c:	897b      	ldrh	r3, [r7, #10]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	330c      	adds	r3, #12
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006c7a:	897b      	ldrh	r3, [r7, #10]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006c86:	e002      	b.n	8006c8e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c8e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop

08006c9c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006caa:	f107 030e 	add.w	r3, r7, #14
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f003 ff8e 	bl	800abd4 <VL53L0X_RdByte>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10e      	bne.n	8006ce2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006cc4:	7bba      	ldrb	r2, [r7, #14]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da03      	bge.n	8006cdc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781a      	ldrb	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006d0c:	f107 030e 	add.w	r3, r7, #14
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fbd2 	bl	80064bc <VL53L0X_GetDeviceMode>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d107      	bne.n	8006d34 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f898 	bl	8006e60 <VL53L0X_StartMeasurement>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fb3f 	bl	80083c0 <VL53L0X_measurement_poll_for_completion>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2203      	movs	r2, #3
 8006d58:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006d78:	2301      	movs	r3, #1
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f001 fae1 	bl	8008346 <VL53L0X_perform_ref_calibration>
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006daa:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006dac:	7dbb      	ldrb	r3, [r7, #22]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d005      	beq.n	8006dbe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006db2:	7dbb      	ldrb	r3, [r7, #22]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d002      	beq.n	8006dbe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006db8:	7dbb      	ldrb	r3, [r7, #22]
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d147      	bne.n	8006e4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006dbe:	f107 030c 	add.w	r3, r7, #12
 8006dc2:	f107 0210 	add.w	r2, r7, #16
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbc3 	bl	8007554 <VL53L0X_GetInterruptThresholds>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006dd8:	d803      	bhi.n	8006de2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006dda:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006ddc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006de0:	d935      	bls.n	8006e4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006de2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d131      	bne.n	8006e4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006df0:	491a      	ldr	r1, [pc, #104]	; (8006e5c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f002 ff56 	bl	8009ca4 <VL53L0X_load_tuning_settings>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]
 8006dfc:	e027      	b.n	8006e4e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006dfe:	2204      	movs	r2, #4
 8006e00:	21ff      	movs	r1, #255	; 0xff
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f003 fe64 	bl	800aad0 <VL53L0X_WrByte>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2170      	movs	r1, #112	; 0x70
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f003 fe5a 	bl	800aad0 <VL53L0X_WrByte>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006e26:	2200      	movs	r2, #0
 8006e28:	21ff      	movs	r1, #255	; 0xff
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f003 fe50 	bl	800aad0 <VL53L0X_WrByte>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f003 fe46 	bl	800aad0 <VL53L0X_WrByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000011c 	.word	0x2000011c

08006e60 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006e70:	f107 030e 	add.w	r3, r7, #14
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff fb20 	bl	80064bc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f003 fe25 	bl	800aad0 <VL53L0X_WrByte>
 8006e86:	4603      	mov	r3, r0
 8006e88:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	21ff      	movs	r1, #255	; 0xff
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f003 fe1e 	bl	800aad0 <VL53L0X_WrByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f003 fe17 	bl	800aad0 <VL53L0X_WrByte>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006eac:	461a      	mov	r2, r3
 8006eae:	2191      	movs	r1, #145	; 0x91
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f003 fe0d 	bl	800aad0 <VL53L0X_WrByte>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f003 fe06 	bl	800aad0 <VL53L0X_WrByte>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ec8:	2200      	movs	r2, #0
 8006eca:	21ff      	movs	r1, #255	; 0xff
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f003 fdff 	bl	800aad0 <VL53L0X_WrByte>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2180      	movs	r1, #128	; 0x80
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f003 fdf8 	bl	800aad0 <VL53L0X_WrByte>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d054      	beq.n	8006f94 <VL53L0X_StartMeasurement+0x134>
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	dc6c      	bgt.n	8006fc8 <VL53L0X_StartMeasurement+0x168>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <VL53L0X_StartMeasurement+0x98>
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d034      	beq.n	8006f60 <VL53L0X_StartMeasurement+0x100>
 8006ef6:	e067      	b.n	8006fc8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006ef8:	2201      	movs	r2, #1
 8006efa:	2100      	movs	r1, #0
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f003 fde7 	bl	800aad0 <VL53L0X_WrByte>
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d15d      	bne.n	8006fce <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006f12:	2300      	movs	r3, #0
 8006f14:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006f1c:	f107 030d 	add.w	r3, r7, #13
 8006f20:	461a      	mov	r2, r3
 8006f22:	2100      	movs	r1, #0
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f003 fe55 	bl	800abd4 <VL53L0X_RdByte>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	3301      	adds	r3, #1
 8006f32:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006f34:	7b7a      	ldrb	r2, [r7, #13]
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d107      	bne.n	8006f52 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8006f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f50:	d3e1      	bcc.n	8006f16 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006f58:	d339      	bcc.n	8006fce <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006f5a:	23f9      	movs	r3, #249	; 0xf9
 8006f5c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006f5e:	e036      	b.n	8006fce <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff ff12 	bl	8006d94 <VL53L0X_CheckAndLoadInterruptSettings>
 8006f70:	4603      	mov	r3, r0
 8006f72:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006f74:	2202      	movs	r2, #2
 8006f76:	2100      	movs	r1, #0
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f003 fda9 	bl	800aad0 <VL53L0X_WrByte>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d123      	bne.n	8006fd2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006f92:	e01e      	b.n	8006fd2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fef8 	bl	8006d94 <VL53L0X_CheckAndLoadInterruptSettings>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006fa8:	2204      	movs	r2, #4
 8006faa:	2100      	movs	r1, #0
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f003 fd8f 	bl	800aad0 <VL53L0X_WrByte>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006fc6:	e006      	b.n	8006fd6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006fc8:	23f8      	movs	r3, #248	; 0xf8
 8006fca:	75fb      	strb	r3, [r7, #23]
 8006fcc:	e004      	b.n	8006fd8 <VL53L0X_StartMeasurement+0x178>
		break;
 8006fce:	bf00      	nop
 8006fd0:	e002      	b.n	8006fd8 <VL53L0X_StartMeasurement+0x178>
		break;
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <VL53L0X_StartMeasurement+0x178>
		break;
 8006fd6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006ff8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d112      	bne.n	8007026 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fb1a 	bl	8007640 <VL53L0X_GetInterruptMaskStatus>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b04      	cmp	r3, #4
 8007014:	d103      	bne.n	800701e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e01c      	b.n	8007058 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	e018      	b.n	8007058 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007026:	f107 030d 	add.w	r3, r7, #13
 800702a:	461a      	mov	r2, r3
 800702c:	2114      	movs	r1, #20
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f003 fdd0 	bl	800abd4 <VL53L0X_RdByte>
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10b      	bne.n	8007058 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007040:	7b7b      	ldrb	r3, [r7, #13]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2201      	movs	r2, #1
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e002      	b.n	8007058 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007064:	b5b0      	push	{r4, r5, r7, lr}
 8007066:	b096      	sub	sp, #88	; 0x58
 8007068:	af02      	add	r7, sp, #8
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007074:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007078:	230c      	movs	r3, #12
 800707a:	2114      	movs	r1, #20
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f003 fcfb 	bl	800aa78 <VL53L0X_ReadMulti>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007088:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 80d1 	bne.w	8007234 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2200      	movs	r2, #0
 8007096:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800709e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	4413      	add	r3, r2
 80070b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2200      	movs	r2, #0
 80070b8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80070ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	4413      	add	r3, r2
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	025b      	lsls	r3, r3, #9
 80070d0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80070d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80070dc:	b29b      	uxth	r3, r3
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80070ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070f2:	025b      	lsls	r3, r3, #9
 80070f4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80070fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	b29a      	uxth	r2, r3
 8007104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007108:	b29b      	uxth	r3, r3
 800710a:	4413      	add	r3, r2
 800710c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007116:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800711c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007126:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800712e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007132:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007138:	d046      	beq.n	80071c8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800713a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800713c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007148:	4a57      	ldr	r2, [pc, #348]	; (80072a8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800714a:	fb82 1203 	smull	r1, r2, r2, r3
 800714e:	1192      	asrs	r2, r2, #6
 8007150:	17db      	asrs	r3, r3, #31
 8007152:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8007154:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7f1b      	ldrb	r3, [r3, #28]
 8007162:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8007166:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800716a:	2b00      	cmp	r3, #0
 800716c:	d02c      	beq.n	80071c8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800716e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007170:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	121a      	asrs	r2, r3, #8
					<= 0) {
 800717a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800717c:	429a      	cmp	r2, r3
 800717e:	d10d      	bne.n	800719c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007180:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007184:	2b00      	cmp	r3, #0
 8007186:	d004      	beq.n	8007192 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007188:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800718c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007190:	e016      	b.n	80071c0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007192:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007196:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800719a:	e011      	b.n	80071c0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800719c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80071a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80071a8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80071b0:	121b      	asrs	r3, r3, #8
 80071b2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80071b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80071b8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80071bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80071c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80071c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80071d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071d4:	089b      	lsrs	r3, r3, #2
 80071d6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80071dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	019b      	lsls	r3, r3, #6
 80071e4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	75da      	strb	r2, [r3, #23]
 80071ea:	e006      	b.n	80071fa <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80071f2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2200      	movs	r2, #0
 80071f8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80071fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80071fe:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007202:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4613      	mov	r3, r2
 800720e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f003 f9e5 	bl	800a5e0 <VL53L0X_get_pal_range_status>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800721e:	4313      	orrs	r3, r2
 8007220:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007224:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800722c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007234:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007238:	2b00      	cmp	r3, #0
 800723a:	d12f      	bne.n	800729c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f107 040c 	add.w	r4, r7, #12
 8007242:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800724a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800724e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007256:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800725c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007264:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800726a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007270:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007276:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800727c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007282:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800728c:	f107 050c 	add.w	r5, r7, #12
 8007290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007294:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800729c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3750      	adds	r7, #80	; 0x50
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bdb0      	pop	{r4, r5, r7, pc}
 80072a8:	10624dd3 	.word	0x10624dd3

080072ac <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80072ba:	2100      	movs	r1, #0
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff f8d1 	bl	8006464 <VL53L0X_SetDeviceMode>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80072c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d104      	bne.n	80072d8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fd16 	bl	8006d00 <VL53L0X_PerformSingleMeasurement>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80072d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff febe 	bl	8007064 <VL53L0X_GetRangingMeasurementData>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80072ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d105      	bne.n	8007300 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80072f4:	2100      	movs	r1, #0
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f962 	bl	80075c0 <VL53L0X_ClearInterruptMask>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007300:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4603      	mov	r3, r0
 800731c:	70fb      	strb	r3, [r7, #3]
 800731e:	460b      	mov	r3, r1
 8007320:	70bb      	strb	r3, [r7, #2]
 8007322:	4613      	mov	r3, r2
 8007324:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007330:	23f6      	movs	r3, #246	; 0xf6
 8007332:	73fb      	strb	r3, [r7, #15]
 8007334:	e107      	b.n	8007546 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007336:	78bb      	ldrb	r3, [r7, #2]
 8007338:	2b14      	cmp	r3, #20
 800733a:	d110      	bne.n	800735e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800733c:	7e3b      	ldrb	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d102      	bne.n	8007348 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007342:	2310      	movs	r3, #16
 8007344:	73bb      	strb	r3, [r7, #14]
 8007346:	e001      	b.n	800734c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007348:	2301      	movs	r3, #1
 800734a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	461a      	mov	r2, r3
 8007350:	2184      	movs	r1, #132	; 0x84
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f003 fbbc 	bl	800aad0 <VL53L0X_WrByte>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e0f3      	b.n	8007546 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800735e:	78bb      	ldrb	r3, [r7, #2]
 8007360:	2b15      	cmp	r3, #21
 8007362:	f040 8097 	bne.w	8007494 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007366:	2201      	movs	r2, #1
 8007368:	21ff      	movs	r1, #255	; 0xff
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f003 fbb0 	bl	800aad0 <VL53L0X_WrByte>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	4313      	orrs	r3, r2
 8007378:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f003 fba6 	bl	800aad0 <VL53L0X_WrByte>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4313      	orrs	r3, r2
 800738c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800738e:	2200      	movs	r2, #0
 8007390:	21ff      	movs	r1, #255	; 0xff
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f003 fb9c 	bl	800aad0 <VL53L0X_WrByte>
 8007398:	4603      	mov	r3, r0
 800739a:	461a      	mov	r2, r3
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	4313      	orrs	r3, r2
 80073a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80073a2:	2201      	movs	r2, #1
 80073a4:	2180      	movs	r1, #128	; 0x80
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f003 fb92 	bl	800aad0 <VL53L0X_WrByte>
 80073ac:	4603      	mov	r3, r0
 80073ae:	461a      	mov	r2, r3
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80073b6:	2202      	movs	r2, #2
 80073b8:	2185      	movs	r1, #133	; 0x85
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f003 fb88 	bl	800aad0 <VL53L0X_WrByte>
 80073c0:	4603      	mov	r3, r0
 80073c2:	461a      	mov	r2, r3
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80073ca:	2204      	movs	r2, #4
 80073cc:	21ff      	movs	r1, #255	; 0xff
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f003 fb7e 	bl	800aad0 <VL53L0X_WrByte>
 80073d4:	4603      	mov	r3, r0
 80073d6:	461a      	mov	r2, r3
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4313      	orrs	r3, r2
 80073dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80073de:	2200      	movs	r2, #0
 80073e0:	21cd      	movs	r1, #205	; 0xcd
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f003 fb74 	bl	800aad0 <VL53L0X_WrByte>
 80073e8:	4603      	mov	r3, r0
 80073ea:	461a      	mov	r2, r3
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80073f2:	2211      	movs	r2, #17
 80073f4:	21cc      	movs	r1, #204	; 0xcc
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f003 fb6a 	bl	800aad0 <VL53L0X_WrByte>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4313      	orrs	r3, r2
 8007404:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007406:	2207      	movs	r2, #7
 8007408:	21ff      	movs	r1, #255	; 0xff
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f003 fb60 	bl	800aad0 <VL53L0X_WrByte>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4313      	orrs	r3, r2
 8007418:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800741a:	2200      	movs	r2, #0
 800741c:	21be      	movs	r1, #190	; 0xbe
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f003 fb56 	bl	800aad0 <VL53L0X_WrByte>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4313      	orrs	r3, r2
 800742c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800742e:	2206      	movs	r2, #6
 8007430:	21ff      	movs	r1, #255	; 0xff
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f003 fb4c 	bl	800aad0 <VL53L0X_WrByte>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	4313      	orrs	r3, r2
 8007440:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007442:	2209      	movs	r2, #9
 8007444:	21cc      	movs	r1, #204	; 0xcc
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f003 fb42 	bl	800aad0 <VL53L0X_WrByte>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4313      	orrs	r3, r2
 8007454:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007456:	2200      	movs	r2, #0
 8007458:	21ff      	movs	r1, #255	; 0xff
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f003 fb38 	bl	800aad0 <VL53L0X_WrByte>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	4313      	orrs	r3, r2
 8007468:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800746a:	2201      	movs	r2, #1
 800746c:	21ff      	movs	r1, #255	; 0xff
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f003 fb2e 	bl	800aad0 <VL53L0X_WrByte>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	4313      	orrs	r3, r2
 800747c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f003 fb24 	bl	800aad0 <VL53L0X_WrByte>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	4313      	orrs	r3, r2
 8007490:	73fb      	strb	r3, [r7, #15]
 8007492:	e058      	b.n	8007546 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d121      	bne.n	80074e0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800749c:	787b      	ldrb	r3, [r7, #1]
 800749e:	2b04      	cmp	r3, #4
 80074a0:	d81b      	bhi.n	80074da <VL53L0X_SetGpioConfig+0x1ce>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <VL53L0X_SetGpioConfig+0x19c>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074bd 	.word	0x080074bd
 80074ac:	080074c3 	.word	0x080074c3
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074cf 	.word	0x080074cf
 80074b8:	080074d5 	.word	0x080074d5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80074bc:	2300      	movs	r3, #0
 80074be:	73bb      	strb	r3, [r7, #14]
				break;
 80074c0:	e00f      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80074c2:	2301      	movs	r3, #1
 80074c4:	73bb      	strb	r3, [r7, #14]
				break;
 80074c6:	e00c      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80074c8:	2302      	movs	r3, #2
 80074ca:	73bb      	strb	r3, [r7, #14]
				break;
 80074cc:	e009      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80074ce:	2303      	movs	r3, #3
 80074d0:	73bb      	strb	r3, [r7, #14]
				break;
 80074d2:	e006      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80074d4:	2304      	movs	r3, #4
 80074d6:	73bb      	strb	r3, [r7, #14]
				break;
 80074d8:	e003      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80074da:	23f5      	movs	r3, #245	; 0xf5
 80074dc:	73fb      	strb	r3, [r7, #15]
 80074de:	e000      	b.n	80074e2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80074e0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80074e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d107      	bne.n	80074fa <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	461a      	mov	r2, r3
 80074ee:	210a      	movs	r1, #10
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f003 faed 	bl	800aad0 <VL53L0X_WrByte>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80074fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10f      	bne.n	8007522 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007502:	7e3b      	ldrb	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	73bb      	strb	r3, [r7, #14]
 800750c:	e001      	b.n	8007512 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800750e:	2310      	movs	r3, #16
 8007510:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	22ef      	movs	r2, #239	; 0xef
 8007516:	2184      	movs	r1, #132	; 0x84
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f003 fb27 	bl	800ab6c <VL53L0X_UpdateByte>
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	787a      	ldrb	r2, [r7, #1]
 800752e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f83f 	bl	80075c0 <VL53L0X_ClearInterruptMask>
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop

08007554 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	607a      	str	r2, [r7, #4]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	460b      	mov	r3, r1
 8007562:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007564:	2300      	movs	r3, #0
 8007566:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007568:	f107 0314 	add.w	r3, r7, #20
 800756c:	461a      	mov	r2, r3
 800756e:	210e      	movs	r1, #14
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f003 fb59 	bl	800ac28 <VL53L0X_RdWord>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800757a:	8abb      	ldrh	r3, [r7, #20]
 800757c:	045b      	lsls	r3, r3, #17
 800757e:	461a      	mov	r2, r3
 8007580:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <VL53L0X_GetInterruptThresholds+0x68>)
 8007582:	4013      	ands	r3, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10f      	bne.n	80075b0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007590:	f107 0314 	add.w	r3, r7, #20
 8007594:	461a      	mov	r2, r3
 8007596:	210c      	movs	r1, #12
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f003 fb45 	bl	800ac28 <VL53L0X_RdWord>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80075a2:	8abb      	ldrh	r3, [r7, #20]
 80075a4:	045b      	lsls	r3, r3, #17
 80075a6:	461a      	mov	r2, r3
 80075a8:	4b04      	ldr	r3, [pc, #16]	; (80075bc <VL53L0X_GetInterruptThresholds+0x68>)
 80075aa:	4013      	ands	r3, r2
		*pThresholdHigh =
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	1ffe0000 	.word	0x1ffe0000

080075c0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80075d2:	2201      	movs	r2, #1
 80075d4:	210b      	movs	r1, #11
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f003 fa7a 	bl	800aad0 <VL53L0X_WrByte>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80075e0:	2200      	movs	r2, #0
 80075e2:	210b      	movs	r1, #11
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f003 fa73 	bl	800aad0 <VL53L0X_WrByte>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80075f4:	f107 030d 	add.w	r3, r7, #13
 80075f8:	461a      	mov	r2, r3
 80075fa:	2113      	movs	r1, #19
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f003 fae9 	bl	800abd4 <VL53L0X_RdByte>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	4313      	orrs	r3, r2
 800760a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	3301      	adds	r3, #1
 8007610:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007612:	7b7b      	ldrb	r3, [r7, #13]
 8007614:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007618:	2b00      	cmp	r3, #0
 800761a:	d006      	beq.n	800762a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d803      	bhi.n	800762a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0d3      	beq.n	80075d2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d901      	bls.n	8007634 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007630:	23f4      	movs	r3, #244	; 0xf4
 8007632:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007634:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800764e:	f107 030e 	add.w	r3, r7, #14
 8007652:	461a      	mov	r2, r3
 8007654:	2113      	movs	r1, #19
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f003 fabc 	bl	800abd4 <VL53L0X_RdByte>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f003 0207 	and.w	r2, r3, #7
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	f003 0318 	and.w	r3, r3, #24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007674:	23fa      	movs	r3, #250	; 0xfa
 8007676:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fa03 	bl	8007aa4 <VL53L0X_perform_ref_spad_management>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80076a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80076bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80076c0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80076c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076c6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80076c8:	f107 0308 	add.w	r3, r7, #8
 80076cc:	461a      	mov	r2, r3
 80076ce:	2128      	movs	r1, #40	; 0x28
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f003 faa9 	bl	800ac28 <VL53L0X_RdWord>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80076da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d11e      	bne.n	8007720 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80076e2:	893b      	ldrh	r3, [r7, #8]
 80076e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80076ec:	893b      	ldrh	r3, [r7, #8]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	dd0b      	ble.n	8007710 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80076f8:	893a      	ldrh	r2, [r7, #8]
 80076fa:	897b      	ldrh	r3, [r7, #10]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	b21b      	sxth	r3, r3
 8007702:	461a      	mov	r2, r3
					* 250;
 8007704:	23fa      	movs	r3, #250	; 0xfa
 8007706:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e007      	b.n	8007720 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007710:	893b      	ldrh	r3, [r7, #8]
 8007712:	b21b      	sxth	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	23fa      	movs	r3, #250	; 0xfa
 8007718:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800772c:	b480      	push	{r7}
 800772e:	b08b      	sub	sp, #44	; 0x2c
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800773a:	2308      	movs	r3, #8
 800773c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	fbb3 f2f2 	udiv	r2, r3, r2
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	fb01 f202 	mul.w	r2, r1, r2
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	e030      	b.n	80077ce <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	4413      	add	r3, r2
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	429a      	cmp	r2, r3
 8007780:	d11e      	bne.n	80077c0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007782:	7ffa      	ldrb	r2, [r7, #31]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	fa42 f303 	asr.w	r3, r2, r3
 800778a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007790:	e016      	b.n	80077c0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007792:	7ffb      	ldrb	r3, [r7, #31]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <get_next_good_spad+0x88>
				success = 1;
 800779c:	2301      	movs	r3, #1
 800779e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	fb03 f202 	mul.w	r2, r3, r2
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	4413      	add	r3, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	601a      	str	r2, [r3, #0]
				break;
 80077b2:	e009      	b.n	80077c8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80077b4:	7ffb      	ldrb	r3, [r7, #31]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	3301      	adds	r3, #1
 80077be:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d3e4      	bcc.n	8007792 <get_next_good_spad+0x66>
				coarseIndex++) {
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	3301      	adds	r3, #1
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d202      	bcs.n	80077dc <get_next_good_spad+0xb0>
 80077d6:	7fbb      	ldrb	r3, [r7, #30]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0c7      	beq.n	800776c <get_next_good_spad+0x40>
		}
	}
}
 80077dc:	bf00      	nop
 80077de:	372c      	adds	r7, #44	; 0x2c
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80077f0:	2301      	movs	r3, #1
 80077f2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	099b      	lsrs	r3, r3, #6
 80077f8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80077fa:	4a07      	ldr	r2, [pc, #28]	; (8007818 <is_aperture+0x30>)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <is_aperture+0x22>
		isAperture = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	200002d4 	.word	0x200002d4

0800781c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800781c:	b480      	push	{r7}
 800781e:	b089      	sub	sp, #36	; 0x24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007828:	2300      	movs	r3, #0
 800782a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800782c:	2308      	movs	r3, #8
 800782e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007842:	69b9      	ldr	r1, [r7, #24]
 8007844:	fb01 f202 	mul.w	r2, r1, r2
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	d302      	bcc.n	800785a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007854:	23ce      	movs	r3, #206	; 0xce
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e010      	b.n	800787c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b25a      	sxtb	r2, r3
 8007864:	2101      	movs	r1, #1
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	fa01 f303 	lsl.w	r3, r1, r3
 800786c:	b25b      	sxtb	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	b259      	sxtb	r1, r3
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4413      	add	r3, r2
 8007878:	b2ca      	uxtb	r2, r1
 800787a:	701a      	strb	r2, [r3, #0]

	return status;
 800787c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3724      	adds	r7, #36	; 0x24
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007896:	2306      	movs	r3, #6
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	21b0      	movs	r1, #176	; 0xb0
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f003 f8bb 	bl	800aa18 <VL53L0X_WriteMulti>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80078a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80078bc:	2306      	movs	r3, #6
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	21b0      	movs	r1, #176	; 0xb0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f003 f8d8 	bl	800aa78 <VL53L0X_ReadMulti>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80078cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	460b      	mov	r3, r1
 80078e6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80078ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80078f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80078f6:	2300      	movs	r3, #0
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078fa:	e02b      	b.n	8007954 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80078fc:	f107 031c 	add.w	r3, r7, #28
 8007900:	6a3a      	ldr	r2, [r7, #32]
 8007902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff ff11 	bl	800772c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007910:	d103      	bne.n	800791a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007912:	23ce      	movs	r3, #206	; 0xce
 8007914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007918:	e020      	b.n	800795c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	461a      	mov	r2, r3
 800791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007920:	4413      	add	r3, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff ff60 	bl	80077e8 <is_aperture>
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007932:	23ce      	movs	r3, #206	; 0xce
 8007934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007938:	e010      	b.n	800795c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800793e:	6a3a      	ldr	r2, [r7, #32]
 8007940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007942:	6838      	ldr	r0, [r7, #0]
 8007944:	f7ff ff6a 	bl	800781c <enable_spad_bit>
		currentSpad++;
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	3301      	adds	r3, #1
 800794c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	3301      	adds	r3, #1
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
 8007954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007958:	429a      	cmp	r2, r3
 800795a:	d3cf      	bcc.n	80078fc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800795c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795e:	6a3a      	ldr	r2, [r7, #32]
 8007960:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff ff8d 	bl	800788c <set_ref_spad_map>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800797c:	2b00      	cmp	r3, #0
 800797e:	d121      	bne.n	80079c4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007980:	f107 0314 	add.w	r3, r7, #20
 8007984:	4619      	mov	r1, r3
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ff93 	bl	80078b2 <get_ref_spad_map>
 800798c:	4603      	mov	r3, r0
 800798e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007996:	e011      	b.n	80079bc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	4413      	add	r3, r2
 800799e:	781a      	ldrb	r2, [r3, #0]
 80079a0:	f107 0114 	add.w	r1, r7, #20
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	440b      	add	r3, r1
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d003      	beq.n	80079b6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80079ae:	23ce      	movs	r3, #206	; 0xce
 80079b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80079b4:	e006      	b.n	80079c4 <enable_ref_spads+0xec>
			}
			i++;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	3301      	adds	r3, #1
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80079bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d3e9      	bcc.n	8007998 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80079c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3730      	adds	r7, #48	; 0x30
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	; 0x28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80079ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80079f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d107      	bne.n	8007a08 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80079f8:	22c0      	movs	r2, #192	; 0xc0
 80079fa:	2101      	movs	r1, #1
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f003 f867 	bl	800aad0 <VL53L0X_WrByte>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007a08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d108      	bne.n	8007a22 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007a10:	f107 0308 	add.w	r3, r7, #8
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff fc48 	bl	80072ac <VL53L0X_PerformSingleRangingMeasurement>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007a22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	21ff      	movs	r1, #255	; 0xff
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f003 f84e 	bl	800aad0 <VL53L0X_WrByte>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007a3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	21b6      	movs	r1, #182	; 0xb6
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f003 f8ee 	bl	800ac28 <VL53L0X_RdWord>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007a52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d107      	bne.n	8007a6a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	21ff      	movs	r1, #255	; 0xff
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f003 f836 	bl	800aad0 <VL53L0X_WrByte>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007a6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d112      	bne.n	8007a98 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007a72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a76:	461a      	mov	r2, r3
 8007a78:	2101      	movs	r1, #1
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f003 f828 	bl	800aad0 <VL53L0X_WrByte>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d104      	bne.n	8007a98 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a94:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3728      	adds	r7, #40	; 0x28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b09d      	sub	sp, #116	; 0x74
 8007aa8:	af06      	add	r7, sp, #24
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007ab6:	23b4      	movs	r3, #180	; 0xb4
 8007ab8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007abc:	2303      	movs	r3, #3
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007ac0:	232c      	movs	r3, #44	; 0x2c
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007ad0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007ad4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007ade:	2306      	movs	r3, #6
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b0e:	e009      	b.n	8007b24 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b20:	3301      	adds	r3, #1
 8007b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3f1      	bcc.n	8007b10 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	21ff      	movs	r1, #255	; 0xff
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f002 ffcd 	bl	800aad0 <VL53L0X_WrByte>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007b3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007b44:	2200      	movs	r2, #0
 8007b46:	214f      	movs	r1, #79	; 0x4f
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f002 ffc1 	bl	800aad0 <VL53L0X_WrByte>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007b54:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d107      	bne.n	8007b6c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007b5c:	222c      	movs	r2, #44	; 0x2c
 8007b5e:	214e      	movs	r1, #78	; 0x4e
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f002 ffb5 	bl	800aad0 <VL53L0X_WrByte>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007b6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b74:	2200      	movs	r2, #0
 8007b76:	21ff      	movs	r1, #255	; 0xff
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f002 ffa9 	bl	800aad0 <VL53L0X_WrByte>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007b84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007b8c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007b90:	461a      	mov	r2, r3
 8007b92:	21b6      	movs	r1, #182	; 0xb6
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f002 ff9b 	bl	800aad0 <VL53L0X_WrByte>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007ba0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d107      	bne.n	8007bb8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f002 ff8f 	bl	800aad0 <VL53L0X_WrByte>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007bb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007bc0:	f107 0210 	add.w	r2, r7, #16
 8007bc4:	f107 0111 	add.w	r1, r7, #17
 8007bc8:	2300      	movs	r3, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fbbb 	bl	8008346 <VL53L0X_perform_ref_calibration>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007bd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d121      	bne.n	8007c22 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bec:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007bfa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007bfe:	f107 0218 	add.w	r2, r7, #24
 8007c02:	9204      	str	r2, [sp, #16]
 8007c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c06:	9203      	str	r2, [sp, #12]
 8007c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c0a:	9202      	str	r2, [sp, #8]
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4623      	mov	r3, r4
 8007c14:	4602      	mov	r2, r0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fe5e 	bl	80078d8 <enable_ref_spads>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d174      	bne.n	8007d14 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007c2e:	f107 0312 	add.w	r3, r7, #18
 8007c32:	4619      	mov	r1, r3
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff fecb 	bl	80079d0 <perform_ref_signal_measurement>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007c40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d161      	bne.n	8007d0c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007c48:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007c4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d25d      	bcs.n	8007d0c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007c50:	2300      	movs	r3, #0
 8007c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c54:	e009      	b.n	8007c6a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c66:	3301      	adds	r3, #1
 8007c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d3f1      	bcc.n	8007c56 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007c72:	e002      	b.n	8007c7a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c76:	3301      	adds	r3, #1
 8007c78:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007c7a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c80:	4413      	add	r3, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fdb0 	bl	80077e8 <is_aperture>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007c8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d3ee      	bcc.n	8007c74 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007c96:	2301      	movs	r3, #1
 8007c98:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007caa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007cae:	f107 0218 	add.w	r2, r7, #24
 8007cb2:	9204      	str	r2, [sp, #16]
 8007cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cba:	9202      	str	r2, [sp, #8]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4623      	mov	r3, r4
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fe06 	bl	80078d8 <enable_ref_spads>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007cd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d11b      	bne.n	8007d12 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007cde:	f107 0312 	add.w	r3, r7, #18
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fe73 	bl	80079d0 <perform_ref_signal_measurement>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007cf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10c      	bne.n	8007d12 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007cf8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007cfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d208      	bcs.n	8007d12 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007d0a:	e002      	b.n	8007d12 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d10:	e000      	b.n	8007d14 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007d12:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007d14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f040 80af 	bne.w	8007e7c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007d1e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007d20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d22:	429a      	cmp	r2, r3
 8007d24:	f240 80aa 	bls.w	8007e7c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007d38:	f107 031c 	add.w	r3, r7, #28
 8007d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f003 f858 	bl	800adf4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007d44:	8a7b      	ldrh	r3, [r7, #18]
 8007d46:	461a      	mov	r2, r3
 8007d48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bfb8      	it	lt
 8007d50:	425b      	neglt	r3, r3
 8007d52:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007d5a:	e086      	b.n	8007e6a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007d62:	f107 0314 	add.w	r3, r7, #20
 8007d66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d6a:	f7ff fcdf 	bl	800772c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d103      	bne.n	8007d7e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007d76:	23ce      	movs	r3, #206	; 0xce
 8007d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007d7c:	e07e      	b.n	8007e7c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007d7e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4413      	add	r3, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fd2e 	bl	80077e8 <is_aperture>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007d9c:	e06e      	b.n	8007e7c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da0:	3301      	adds	r3, #1
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007dae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff fd32 	bl	800781c <enable_spad_bit>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007dbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc8:	3301      	adds	r3, #1
 8007dca:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fd59 	bl	800788c <set_ref_spad_map>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007de0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d146      	bne.n	8007e76 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007de8:	f107 0312 	add.w	r3, r7, #18
 8007dec:	4619      	mov	r1, r3
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff fdee 	bl	80079d0 <perform_ref_signal_measurement>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007dfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d13b      	bne.n	8007e7a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007e02:	8a7b      	ldrh	r3, [r7, #18]
 8007e04:	461a      	mov	r2, r3
 8007e06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bfb8      	it	lt
 8007e0e:	425b      	neglt	r3, r3
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007e12:	8a7b      	ldrh	r3, [r7, #18]
 8007e14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d21c      	bcs.n	8007e54 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d914      	bls.n	8007e4c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007e22:	f107 031c 	add.w	r3, r7, #28
 8007e26:	4619      	mov	r1, r3
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff fd2f 	bl	800788c <set_ref_spad_map>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007e3a:	f107 011c 	add.w	r1, r7, #28
 8007e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 ffd7 	bl	800adf4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e52:	e00a      	b.n	8007e6a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007e5e:	f107 031c 	add.w	r3, r7, #28
 8007e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e64:	4618      	mov	r0, r3
 8007e66:	f002 ffc5 	bl	800adf4 <memcpy>
		while (!complete) {
 8007e6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f43f af74 	beq.w	8007d5c <VL53L0X_perform_ref_spad_management+0x2b8>
 8007e74:	e002      	b.n	8007e7c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007e76:	bf00      	nop
 8007e78:	e000      	b.n	8007e7c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007e7a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d115      	bne.n	8007eb0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e88:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007e90:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	375c      	adds	r7, #92	; 0x5c
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}

08007ebc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b093      	sub	sp, #76	; 0x4c
 8007ec0:	af06      	add	r7, sp, #24
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007ed4:	23b4      	movs	r3, #180	; 0xb4
 8007ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007eda:	2306      	movs	r3, #6
 8007edc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007ede:	232c      	movs	r3, #44	; 0x2c
 8007ee0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	21ff      	movs	r1, #255	; 0xff
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f002 fdf2 	bl	800aad0 <VL53L0X_WrByte>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007ef2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007efa:	2200      	movs	r2, #0
 8007efc:	214f      	movs	r1, #79	; 0x4f
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f002 fde6 	bl	800aad0 <VL53L0X_WrByte>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007f12:	222c      	movs	r2, #44	; 0x2c
 8007f14:	214e      	movs	r1, #78	; 0x4e
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f002 fdda 	bl	800aad0 <VL53L0X_WrByte>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007f22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d107      	bne.n	8007f3a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	21ff      	movs	r1, #255	; 0xff
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f002 fdce 	bl	800aad0 <VL53L0X_WrByte>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007f3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8007f42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f46:	461a      	mov	r2, r3
 8007f48:	21b6      	movs	r1, #182	; 0xb6
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f002 fdc0 	bl	800aad0 <VL53L0X_WrByte>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007f56:	2300      	movs	r3, #0
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
 8007f5a:	e009      	b.n	8007f70 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3f1      	bcc.n	8007f5c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d011      	beq.n	8007fa2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007f7e:	e002      	b.n	8007f86 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	3301      	adds	r3, #1
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007f86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	4413      	add	r3, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff fc2a 	bl	80077e8 <is_aperture>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d103      	bne.n	8007fa2 <VL53L0X_set_reference_spads+0xe6>
 8007f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d3ee      	bcc.n	8007f80 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fb2:	79f9      	ldrb	r1, [r7, #7]
 8007fb4:	f107 0214 	add.w	r2, r7, #20
 8007fb8:	9204      	str	r2, [sp, #16]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	9203      	str	r2, [sp, #12]
 8007fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc0:	9202      	str	r2, [sp, #8]
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4623      	mov	r3, r4
 8007fca:	4602      	mov	r2, r0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fc83 	bl	80078d8 <enable_ref_spads>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007fd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10c      	bne.n	8007ffa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	79fa      	ldrb	r2, [r7, #7]
 8007ff6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007ffa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3734      	adds	r7, #52	; 0x34
 8008002:	46bd      	mov	sp, r7
 8008004:	bd90      	pop	{r4, r7, pc}

08008006 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	b2db      	uxtb	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	2100      	movs	r1, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f002 fd50 	bl	800aad0 <VL53L0X_WrByte>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f9bf 	bl	80083c0 <VL53L0X_measurement_poll_for_completion>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d105      	bne.n	800805a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fab5 	bl	80075c0 <VL53L0X_ClearInterruptMask>
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800805a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008062:	2200      	movs	r2, #0
 8008064:	2100      	movs	r1, #0
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f002 fd32 	bl	800aad0 <VL53L0X_WrByte>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	461a      	mov	r2, r3
 800808a:	4603      	mov	r3, r0
 800808c:	70fb      	strb	r3, [r7, #3]
 800808e:	460b      	mov	r3, r1
 8008090:	70bb      	strb	r3, [r7, #2]
 8008092:	4613      	mov	r3, r2
 8008094:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800809e:	2201      	movs	r2, #1
 80080a0:	21ff      	movs	r1, #255	; 0xff
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f002 fd14 	bl	800aad0 <VL53L0X_WrByte>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80080b2:	2200      	movs	r2, #0
 80080b4:	2100      	movs	r1, #0
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f002 fd0a 	bl	800aad0 <VL53L0X_WrByte>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80080c6:	2200      	movs	r2, #0
 80080c8:	21ff      	movs	r1, #255	; 0xff
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f002 fd00 	bl	800aad0 <VL53L0X_WrByte>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01e      	beq.n	800811e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80080e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d009      	beq.n	80080fc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	21cb      	movs	r1, #203	; 0xcb
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f002 fd71 	bl	800abd4 <VL53L0X_RdByte>
 80080f2:	4603      	mov	r3, r0
 80080f4:	461a      	mov	r2, r3
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80080fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02a      	beq.n	800815a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8008104:	f107 030e 	add.w	r3, r7, #14
 8008108:	461a      	mov	r2, r3
 800810a:	21ee      	movs	r1, #238	; 0xee
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f002 fd61 	bl	800abd4 <VL53L0X_RdByte>
 8008112:	4603      	mov	r3, r0
 8008114:	461a      	mov	r2, r3
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	4313      	orrs	r3, r2
 800811a:	73fb      	strb	r3, [r7, #15]
 800811c:	e01d      	b.n	800815a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800811e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8008126:	78bb      	ldrb	r3, [r7, #2]
 8008128:	461a      	mov	r2, r3
 800812a:	21cb      	movs	r1, #203	; 0xcb
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f002 fccf 	bl	800aad0 <VL53L0X_WrByte>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	4313      	orrs	r3, r2
 800813a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800813c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008144:	787b      	ldrb	r3, [r7, #1]
 8008146:	2280      	movs	r2, #128	; 0x80
 8008148:	21ee      	movs	r1, #238	; 0xee
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f002 fd0e 	bl	800ab6c <VL53L0X_UpdateByte>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	4313      	orrs	r3, r2
 8008158:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800815a:	2201      	movs	r2, #1
 800815c:	21ff      	movs	r1, #255	; 0xff
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f002 fcb6 	bl	800aad0 <VL53L0X_WrByte>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4313      	orrs	r3, r2
 800816c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800816e:	2201      	movs	r2, #1
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f002 fcac 	bl	800aad0 <VL53L0X_WrByte>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	7bfb      	ldrb	r3, [r7, #15]
 800817e:	4313      	orrs	r3, r2
 8008180:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008182:	2200      	movs	r2, #0
 8008184:	21ff      	movs	r1, #255	; 0xff
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f002 fca2 	bl	800aad0 <VL53L0X_WrByte>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	4313      	orrs	r3, r2
 8008194:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f023 0310 	bic.w	r3, r3, #16
 800819c:	b2da      	uxtb	r2, r3
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	701a      	strb	r2, [r3, #0]

	return Status;
 80081a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b08a      	sub	sp, #40	; 0x28
 80081b2:	af04      	add	r7, sp, #16
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	4611      	mov	r1, r2
 80081ba:	461a      	mov	r2, r3
 80081bc:	460b      	mov	r3, r1
 80081be:	71fb      	strb	r3, [r7, #7]
 80081c0:	4613      	mov	r3, r2
 80081c2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80081d8:	79bb      	ldrb	r3, [r7, #6]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80081e4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80081e6:	2201      	movs	r2, #1
 80081e8:	2101      	movs	r1, #1
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f002 fc70 	bl	800aad0 <VL53L0X_WrByte>
 80081f0:	4603      	mov	r3, r0
 80081f2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80081f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80081fc:	2140      	movs	r1, #64	; 0x40
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff ff01 	bl	8008006 <VL53L0X_perform_single_ref_calibration>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d115      	bne.n	800823c <VL53L0X_perform_vhv_calibration+0x8e>
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d112      	bne.n	800823c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008216:	7d39      	ldrb	r1, [r7, #20]
 8008218:	7d7a      	ldrb	r2, [r7, #21]
 800821a:	2300      	movs	r3, #0
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	2301      	movs	r3, #1
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	f107 0313 	add.w	r3, r7, #19
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	460b      	mov	r3, r1
 800822e:	2101      	movs	r1, #1
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff ff23 	bl	800807c <VL53L0X_ref_calibration_io>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
 800823a:	e002      	b.n	8008242 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d112      	bne.n	8008270 <VL53L0X_perform_vhv_calibration+0xc2>
 800824a:	79bb      	ldrb	r3, [r7, #6]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00f      	beq.n	8008270 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008250:	7dbb      	ldrb	r3, [r7, #22]
 8008252:	461a      	mov	r2, r3
 8008254:	2101      	movs	r1, #1
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f002 fc3a 	bl	800aad0 <VL53L0X_WrByte>
 800825c:	4603      	mov	r3, r0
 800825e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d103      	bne.n	8008270 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	7dba      	ldrb	r2, [r7, #22]
 800826c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008270:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af04      	add	r7, sp, #16
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	460b      	mov	r3, r1
 800828c:	71fb      	strb	r3, [r7, #7]
 800828e:	4613      	mov	r3, r2
 8008290:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80082a2:	79bb      	ldrb	r3, [r7, #6]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80082ae:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80082b0:	2202      	movs	r2, #2
 80082b2:	2101      	movs	r1, #1
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f002 fc0b 	bl	800aad0 <VL53L0X_WrByte>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80082be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d105      	bne.n	80082d2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80082c6:	2100      	movs	r1, #0
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff fe9c 	bl	8008006 <VL53L0X_perform_single_ref_calibration>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80082d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d115      	bne.n	8008306 <VL53L0X_perform_phase_calibration+0x8a>
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d112      	bne.n	8008306 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80082e0:	7d39      	ldrb	r1, [r7, #20]
 80082e2:	7d7a      	ldrb	r2, [r7, #21]
 80082e4:	2301      	movs	r3, #1
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	2300      	movs	r3, #0
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	f107 0313 	add.w	r3, r7, #19
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	460b      	mov	r3, r1
 80082f8:	2101      	movs	r1, #1
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff febe 	bl	800807c <VL53L0X_ref_calibration_io>
 8008300:	4603      	mov	r3, r0
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	e002      	b.n	800830c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800830c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d112      	bne.n	800833a <VL53L0X_perform_phase_calibration+0xbe>
 8008314:	79bb      	ldrb	r3, [r7, #6]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00f      	beq.n	800833a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800831a:	7dbb      	ldrb	r3, [r7, #22]
 800831c:	461a      	mov	r2, r3
 800831e:	2101      	movs	r1, #1
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f002 fbd5 	bl	800aad0 <VL53L0X_WrByte>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800832a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	7dba      	ldrb	r2, [r7, #22]
 8008336:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800833a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008354:	2300      	movs	r3, #0
 8008356:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008362:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008364:	78fa      	ldrb	r2, [r7, #3]
 8008366:	2300      	movs	r3, #0
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff ff1f 	bl	80081ae <VL53L0X_perform_vhv_calibration>
 8008370:	4603      	mov	r3, r0
 8008372:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	2300      	movs	r3, #0
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff ff7a 	bl	800827c <VL53L0X_perform_phase_calibration>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800838c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10f      	bne.n	80083b4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008394:	7dbb      	ldrb	r3, [r7, #22]
 8008396:	461a      	mov	r2, r3
 8008398:	2101      	movs	r1, #1
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f002 fb98 	bl	800aad0 <VL53L0X_WrByte>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80083a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	7dba      	ldrb	r2, [r7, #22]
 80083b0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80083b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80083d4:	f107 030f 	add.w	r3, r7, #15
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7fe fe02 	bl	8006fe4 <VL53L0X_GetMeasurementDataReady>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80083e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d110      	bne.n	800840e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d00f      	beq.n	8008412 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3301      	adds	r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80083fe:	d302      	bcc.n	8008406 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008400:	23f9      	movs	r3, #249	; 0xf9
 8008402:	75fb      	strb	r3, [r7, #23]
			break;
 8008404:	e006      	b.n	8008414 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f002 fc82 	bl	800ad10 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800840c:	e7e2      	b.n	80083d4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008412:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	3301      	adds	r3, #1
 8008432:	b2db      	uxtb	r3, r3
 8008434:	005b      	lsls	r3, r3, #1
 8008436:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008438:	7bfb      	ldrb	r3, [r7, #15]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008446:	b480      	push	{r7}
 8008448:	b085      	sub	sp, #20
 800844a:	af00      	add	r7, sp, #0
 800844c:	4603      	mov	r3, r0
 800844e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	b2db      	uxtb	r3, r3
 800845a:	3b01      	subs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800847c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800847e:	e002      	b.n	8008486 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d8f8      	bhi.n	8008480 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800848e:	e017      	b.n	80084c0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4413      	add	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	429a      	cmp	r2, r3
 800849a:	d30b      	bcc.n	80084b4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4413      	add	r3, r2
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4413      	add	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e002      	b.n	80084ba <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	085b      	lsrs	r3, r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	089b      	lsrs	r3, r3, #2
 80084be:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e4      	bne.n	8008490 <VL53L0X_isqrt+0x24>
	}

	return res;
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084dc:	2300      	movs	r3, #0
 80084de:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80084e0:	2200      	movs	r2, #0
 80084e2:	2183      	movs	r1, #131	; 0x83
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 faf3 	bl	800aad0 <VL53L0X_WrByte>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80084f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d11e      	bne.n	800853a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008500:	f107 030f 	add.w	r3, r7, #15
 8008504:	461a      	mov	r2, r3
 8008506:	2183      	movs	r1, #131	; 0x83
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f002 fb63 	bl	800abd4 <VL53L0X_RdByte>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <VL53L0X_device_read_strobe+0x5a>
 8008518:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d106      	bne.n	800852e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	3301      	adds	r3, #1
 8008524:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800852c:	d3e8      	bcc.n	8008500 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008534:	d301      	bcc.n	800853a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008536:	23f9      	movs	r3, #249	; 0xf9
 8008538:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800853a:	2201      	movs	r2, #1
 800853c:	2183      	movs	r1, #131	; 0x83
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f002 fac6 	bl	800aad0 <VL53L0X_WrByte>
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	4313      	orrs	r3, r2
 800854c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800854e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b098      	sub	sp, #96	; 0x60
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008566:	2300      	movs	r3, #0
 8008568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800858a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800858e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80085a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80085a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085aa:	2b07      	cmp	r3, #7
 80085ac:	f000 8408 	beq.w	8008dc0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80085b0:	2201      	movs	r2, #1
 80085b2:	2180      	movs	r1, #128	; 0x80
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f002 fa8b 	bl	800aad0 <VL53L0X_WrByte>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80085c8:	2201      	movs	r2, #1
 80085ca:	21ff      	movs	r1, #255	; 0xff
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f002 fa7f 	bl	800aad0 <VL53L0X_WrByte>
 80085d2:	4603      	mov	r3, r0
 80085d4:	461a      	mov	r2, r3
 80085d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085da:	4313      	orrs	r3, r2
 80085dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80085e0:	2200      	movs	r2, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f002 fa73 	bl	800aad0 <VL53L0X_WrByte>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80085f8:	2206      	movs	r2, #6
 80085fa:	21ff      	movs	r1, #255	; 0xff
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f002 fa67 	bl	800aad0 <VL53L0X_WrByte>
 8008602:	4603      	mov	r3, r0
 8008604:	461a      	mov	r2, r3
 8008606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800860a:	4313      	orrs	r3, r2
 800860c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008610:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008614:	461a      	mov	r2, r3
 8008616:	2183      	movs	r1, #131	; 0x83
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f002 fadb 	bl	800abd4 <VL53L0X_RdByte>
 800861e:	4603      	mov	r3, r0
 8008620:	461a      	mov	r2, r3
 8008622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008626:	4313      	orrs	r3, r2
 8008628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800862c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008630:	f043 0304 	orr.w	r3, r3, #4
 8008634:	b2db      	uxtb	r3, r3
 8008636:	461a      	mov	r2, r3
 8008638:	2183      	movs	r1, #131	; 0x83
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f002 fa48 	bl	800aad0 <VL53L0X_WrByte>
 8008640:	4603      	mov	r3, r0
 8008642:	461a      	mov	r2, r3
 8008644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008648:	4313      	orrs	r3, r2
 800864a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800864e:	2207      	movs	r2, #7
 8008650:	21ff      	movs	r1, #255	; 0xff
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f002 fa3c 	bl	800aad0 <VL53L0X_WrByte>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008660:	4313      	orrs	r3, r2
 8008662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008666:	2201      	movs	r2, #1
 8008668:	2181      	movs	r1, #129	; 0x81
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f002 fa30 	bl	800aad0 <VL53L0X_WrByte>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008678:	4313      	orrs	r3, r2
 800867a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f002 fb46 	bl	800ad10 <VL53L0X_PollingDelay>
 8008684:	4603      	mov	r3, r0
 8008686:	461a      	mov	r2, r3
 8008688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868c:	4313      	orrs	r3, r2
 800868e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008692:	2201      	movs	r2, #1
 8008694:	2180      	movs	r1, #128	; 0x80
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f002 fa1a 	bl	800aad0 <VL53L0X_WrByte>
 800869c:	4603      	mov	r3, r0
 800869e:	461a      	mov	r2, r3
 80086a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80086aa:	78fb      	ldrb	r3, [r7, #3]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8098 	beq.w	80087e6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80086b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086ba:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 8091 	bne.w	80087e6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80086c4:	226b      	movs	r2, #107	; 0x6b
 80086c6:	2194      	movs	r1, #148	; 0x94
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f002 fa01 	bl	800aad0 <VL53L0X_WrByte>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff fef9 	bl	80084d4 <VL53L0X_device_read_strobe>
 80086e2:	4603      	mov	r3, r0
 80086e4:	461a      	mov	r2, r3
 80086e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086f4:	461a      	mov	r2, r3
 80086f6:	2190      	movs	r1, #144	; 0x90
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f002 facd 	bl	800ac98 <VL53L0X_RdDWord>
 80086fe:	4603      	mov	r3, r0
 8008700:	461a      	mov	r2, r3
 8008702:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008706:	4313      	orrs	r3, r2
 8008708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	0a1b      	lsrs	r3, r3, #8
 8008710:	b2db      	uxtb	r3, r3
 8008712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008716:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	0bdb      	lsrs	r3, r3, #15
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008728:	2224      	movs	r2, #36	; 0x24
 800872a:	2194      	movs	r1, #148	; 0x94
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f002 f9cf 	bl	800aad0 <VL53L0X_WrByte>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800873a:	4313      	orrs	r3, r2
 800873c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fec7 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800874e:	4313      	orrs	r3, r2
 8008750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008758:	461a      	mov	r2, r3
 800875a:	2190      	movs	r1, #144	; 0x90
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f002 fa9b 	bl	800ac98 <VL53L0X_RdDWord>
 8008762:	4603      	mov	r3, r0
 8008764:	461a      	mov	r2, r3
 8008766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876a:	4313      	orrs	r3, r2
 800876c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	0e1b      	lsrs	r3, r3, #24
 8008774:	b2db      	uxtb	r3, r3
 8008776:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	b2db      	uxtb	r3, r3
 800877e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	b2db      	uxtb	r3, r3
 8008786:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	b2db      	uxtb	r3, r3
 800878c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800878e:	2225      	movs	r2, #37	; 0x25
 8008790:	2194      	movs	r1, #148	; 0x94
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f002 f99c 	bl	800aad0 <VL53L0X_WrByte>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fe94 	bl	80084d4 <VL53L0X_device_read_strobe>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087be:	461a      	mov	r2, r3
 80087c0:	2190      	movs	r1, #144	; 0x90
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f002 fa68 	bl	800ac98 <VL53L0X_RdDWord>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	0e1b      	lsrs	r3, r3, #24
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	0c1b      	lsrs	r3, r3, #16
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 8189 	beq.w	8008b04 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80087f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087f6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 8182 	bne.w	8008b04 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008800:	2202      	movs	r2, #2
 8008802:	2194      	movs	r1, #148	; 0x94
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f002 f963 	bl	800aad0 <VL53L0X_WrByte>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008812:	4313      	orrs	r3, r2
 8008814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fe5b 	bl	80084d4 <VL53L0X_device_read_strobe>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008826:	4313      	orrs	r3, r2
 8008828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800882c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008830:	461a      	mov	r2, r3
 8008832:	2190      	movs	r1, #144	; 0x90
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f002 f9cd 	bl	800abd4 <VL53L0X_RdByte>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008842:	4313      	orrs	r3, r2
 8008844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008848:	227b      	movs	r2, #123	; 0x7b
 800884a:	2194      	movs	r1, #148	; 0x94
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f002 f93f 	bl	800aad0 <VL53L0X_WrByte>
 8008852:	4603      	mov	r3, r0
 8008854:	461a      	mov	r2, r3
 8008856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800885a:	4313      	orrs	r3, r2
 800885c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff fe37 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800886e:	4313      	orrs	r3, r2
 8008870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008874:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008878:	461a      	mov	r2, r3
 800887a:	2190      	movs	r1, #144	; 0x90
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f002 f9a9 	bl	800abd4 <VL53L0X_RdByte>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800888a:	4313      	orrs	r3, r2
 800888c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008890:	2277      	movs	r2, #119	; 0x77
 8008892:	2194      	movs	r1, #148	; 0x94
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f002 f91b 	bl	800aad0 <VL53L0X_WrByte>
 800889a:	4603      	mov	r3, r0
 800889c:	461a      	mov	r2, r3
 800889e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fe13 	bl	80084d4 <VL53L0X_device_read_strobe>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80088bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088c0:	461a      	mov	r2, r3
 80088c2:	2190      	movs	r1, #144	; 0x90
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f002 f9e7 	bl	800ac98 <VL53L0X_RdDWord>
 80088ca:	4603      	mov	r3, r0
 80088cc:	461a      	mov	r2, r3
 80088ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088d2:	4313      	orrs	r3, r2
 80088d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	0e5b      	lsrs	r3, r3, #25
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	0c9b      	lsrs	r3, r3, #18
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	0adb      	lsrs	r3, r3, #11
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	091b      	lsrs	r3, r3, #4
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890c:	b2db      	uxtb	r3, r3
 800890e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	b2db      	uxtb	r3, r3
 8008914:	00db      	lsls	r3, r3, #3
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008922:	2278      	movs	r2, #120	; 0x78
 8008924:	2194      	movs	r1, #148	; 0x94
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f002 f8d2 	bl	800aad0 <VL53L0X_WrByte>
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008934:	4313      	orrs	r3, r2
 8008936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fdca 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008940:	4603      	mov	r3, r0
 8008942:	461a      	mov	r2, r3
 8008944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008948:	4313      	orrs	r3, r2
 800894a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800894e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008952:	461a      	mov	r2, r3
 8008954:	2190      	movs	r1, #144	; 0x90
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f002 f99e 	bl	800ac98 <VL53L0X_RdDWord>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008964:	4313      	orrs	r3, r2
 8008966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	0f5b      	lsrs	r3, r3, #29
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008974:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800897a:	4413      	add	r3, r2
 800897c:	b2db      	uxtb	r3, r3
 800897e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	0d9b      	lsrs	r3, r3, #22
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800898a:	b2db      	uxtb	r3, r3
 800898c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	0bdb      	lsrs	r3, r3, #15
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008998:	b2db      	uxtb	r3, r3
 800899a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800899c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	085b      	lsrs	r3, r3, #1
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	019b      	lsls	r3, r3, #6
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80089ca:	2279      	movs	r2, #121	; 0x79
 80089cc:	2194      	movs	r1, #148	; 0x94
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f002 f87e 	bl	800aad0 <VL53L0X_WrByte>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089dc:	4313      	orrs	r3, r2
 80089de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff fd76 	bl	80084d4 <VL53L0X_device_read_strobe>
 80089e8:	4603      	mov	r3, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80089f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089fa:	461a      	mov	r2, r3
 80089fc:	2190      	movs	r1, #144	; 0x90
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f002 f94a 	bl	800ac98 <VL53L0X_RdDWord>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	0e9b      	lsrs	r3, r3, #26
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a22:	4413      	add	r3, r2
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	0cdb      	lsrs	r3, r3, #19
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	0b1b      	lsrs	r3, r3, #12
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008a64:	227a      	movs	r2, #122	; 0x7a
 8008a66:	2194      	movs	r1, #148	; 0x94
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f002 f831 	bl	800aad0 <VL53L0X_WrByte>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fd29 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a94:	461a      	mov	r2, r3
 8008a96:	2190      	movs	r1, #144	; 0x90
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f002 f8fd 	bl	800ac98 <VL53L0X_RdDWord>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	0f9b      	lsrs	r3, r3, #30
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008abc:	4413      	add	r3, r2
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	0ddb      	lsrs	r3, r3, #23
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	0c1b      	lsrs	r3, r3, #16
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	0a5b      	lsrs	r3, r3, #9
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	089b      	lsrs	r3, r3, #2
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008afe:	2300      	movs	r3, #0
 8008b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80f1 	beq.w	8008cf2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b14:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 80ea 	bne.w	8008cf2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008b1e:	227b      	movs	r2, #123	; 0x7b
 8008b20:	2194      	movs	r1, #148	; 0x94
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 ffd4 	bl	800aad0 <VL53L0X_WrByte>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b30:	4313      	orrs	r3, r2
 8008b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff fccc 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b4e:	461a      	mov	r2, r3
 8008b50:	2190      	movs	r1, #144	; 0x90
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f002 f8a0 	bl	800ac98 <VL53L0X_RdDWord>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b60:	4313      	orrs	r3, r2
 8008b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008b66:	227c      	movs	r2, #124	; 0x7c
 8008b68:	2194      	movs	r1, #148	; 0x94
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 ffb0 	bl	800aad0 <VL53L0X_WrByte>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7ff fca8 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008b84:	4603      	mov	r3, r0
 8008b86:	461a      	mov	r2, r3
 8008b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b96:	461a      	mov	r2, r3
 8008b98:	2190      	movs	r1, #144	; 0x90
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f002 f87c 	bl	800ac98 <VL53L0X_RdDWord>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008bae:	2273      	movs	r2, #115	; 0x73
 8008bb0:	2194      	movs	r1, #148	; 0x94
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 ff8c 	bl	800aad0 <VL53L0X_WrByte>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff fc84 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bde:	461a      	mov	r2, r3
 8008be0:	2190      	movs	r1, #144	; 0x90
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f002 f858 	bl	800ac98 <VL53L0X_RdDWord>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461a      	mov	r2, r3
 8008bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008bfe:	2274      	movs	r2, #116	; 0x74
 8008c00:	2194      	movs	r1, #148	; 0x94
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 ff64 	bl	800aad0 <VL53L0X_WrByte>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c10:	4313      	orrs	r3, r2
 8008c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fc5c 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c24:	4313      	orrs	r3, r2
 8008c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c2e:	461a      	mov	r2, r3
 8008c30:	2190      	movs	r1, #144	; 0x90
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f002 f830 	bl	800ac98 <VL53L0X_RdDWord>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008c4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008c50:	2275      	movs	r2, #117	; 0x75
 8008c52:	2194      	movs	r1, #148	; 0x94
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 ff3b 	bl	800aad0 <VL53L0X_WrByte>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fc33 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461a      	mov	r2, r3
 8008c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c80:	461a      	mov	r2, r3
 8008c82:	2190      	movs	r1, #144	; 0x90
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f002 f807 	bl	800ac98 <VL53L0X_RdDWord>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c92:	4313      	orrs	r3, r2
 8008c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008ca0:	2276      	movs	r2, #118	; 0x76
 8008ca2:	2194      	movs	r1, #148	; 0x94
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 ff13 	bl	800aad0 <VL53L0X_WrByte>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff fc0b 	bl	80084d4 <VL53L0X_device_read_strobe>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2190      	movs	r1, #144	; 0x90
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 ffdf 	bl	800ac98 <VL53L0X_RdDWord>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2181      	movs	r1, #129	; 0x81
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 feea 	bl	800aad0 <VL53L0X_WrByte>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008d0a:	2206      	movs	r2, #6
 8008d0c:	21ff      	movs	r1, #255	; 0xff
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fede 	bl	800aad0 <VL53L0X_WrByte>
 8008d14:	4603      	mov	r3, r0
 8008d16:	461a      	mov	r2, r3
 8008d18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008d22:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008d26:	461a      	mov	r2, r3
 8008d28:	2183      	movs	r1, #131	; 0x83
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 ff52 	bl	800abd4 <VL53L0X_RdByte>
 8008d30:	4603      	mov	r3, r0
 8008d32:	461a      	mov	r2, r3
 8008d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d42:	f023 0304 	bic.w	r3, r3, #4
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2183      	movs	r1, #131	; 0x83
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 febf 	bl	800aad0 <VL53L0X_WrByte>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008d60:	2201      	movs	r2, #1
 8008d62:	21ff      	movs	r1, #255	; 0xff
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 feb3 	bl	800aad0 <VL53L0X_WrByte>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008d78:	2201      	movs	r2, #1
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fea7 	bl	800aad0 <VL53L0X_WrByte>
 8008d82:	4603      	mov	r3, r0
 8008d84:	461a      	mov	r2, r3
 8008d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d90:	2200      	movs	r2, #0
 8008d92:	21ff      	movs	r1, #255	; 0xff
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 fe9b 	bl	800aad0 <VL53L0X_WrByte>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008da8:	2200      	movs	r2, #0
 8008daa:	2180      	movs	r1, #128	; 0x80
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 fe8f 	bl	800aad0 <VL53L0X_WrByte>
 8008db2:	4603      	mov	r3, r0
 8008db4:	461a      	mov	r2, r3
 8008db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008dc0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 808f 	bne.w	8008ee8 <VL53L0X_get_info_from_device+0x98e>
 8008dca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dce:	2b07      	cmp	r3, #7
 8008dd0:	f000 808a 	beq.w	8008ee8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d024      	beq.n	8008e28 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008dde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008de2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11e      	bne.n	8008e28 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008df0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008dfa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008dfe:	2300      	movs	r3, #0
 8008e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e02:	e00e      	b.n	8008e22 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008e04:	f107 0208 	add.w	r2, r7, #8
 8008e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0a:	4413      	add	r3, r2
 8008e0c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008e18:	460a      	mov	r2, r1
 8008e1a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1e:	3301      	adds	r3, #1
 8008e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e24:	2b05      	cmp	r3, #5
 8008e26:	dded      	ble.n	8008e04 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d018      	beq.n	8008e64 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008e32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e36:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d112      	bne.n	8008e64 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e3e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	33f3      	adds	r3, #243	; 0xf3
 8008e56:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008e58:	f107 0310 	add.w	r3, r7, #16
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e60:	f002 fe7c 	bl	800bb5c <strcpy>

		}

		if (((option & 4) == 4) &&
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d030      	beq.n	8008ed0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e72:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d12a      	bne.n	8008ed0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e8c:	025b      	lsls	r3, r3, #9
 8008e8e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e94:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d011      	beq.n	8008ec8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
 8008eb6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008eb8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008ebc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008ec0:	425b      	negs	r3, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008ec8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008ed0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008ede:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ee8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3760      	adds	r7, #96	; 0x60
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008f00:	f240 6277 	movw	r2, #1655	; 0x677
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008f0c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008f10:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	fb02 f303 	mul.w	r3, r2, r3
 8008f20:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008f22:	68bb      	ldr	r3, [r7, #8]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	371c      	adds	r7, #28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d017      	beq.n	8008f7a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008f50:	e005      	b.n	8008f5e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	085b      	lsrs	r3, r3, #1
 8008f56:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008f58:	89fb      	ldrh	r3, [r7, #14]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1f4      	bne.n	8008f52 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008f68:	89fb      	ldrh	r3, [r7, #14]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008f76:	4413      	add	r3, r2
 8008f78:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008f7a:	8afb      	ldrh	r3, [r7, #22]

}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008f9a:	88fa      	ldrh	r2, [r7, #6]
 8008f9c:	0a12      	lsrs	r2, r2, #8
 8008f9e:	b292      	uxth	r2, r2
 8008fa0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7ff ff92 	bl	8008ef4 <VL53L0X_calc_macro_period_ps>
 8008fd0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fd8:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <VL53L0X_calc_timeout_mclks+0x50>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	099b      	lsrs	r3, r3, #6
 8008fe0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fe8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	085b      	lsrs	r3, r3, #1
 8008ff0:	441a      	add	r2, r3
	timeout_period_mclks =
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008ffa:	69fb      	ldr	r3, [r7, #28]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	10624dd3 	.word	0x10624dd3

08009008 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
 8009014:	4613      	mov	r3, r2
 8009016:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800901c:	787b      	ldrb	r3, [r7, #1]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff ff67 	bl	8008ef4 <VL53L0X_calc_macro_period_ps>
 8009026:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800902e:	4a0a      	ldr	r2, [pc, #40]	; (8009058 <VL53L0X_calc_timeout_us+0x50>)
 8009030:	fba2 2303 	umull	r2, r3, r2, r3
 8009034:	099b      	lsrs	r3, r3, #6
 8009036:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009038:	887b      	ldrh	r3, [r7, #2]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	fb02 f303 	mul.w	r3, r2, r3
 8009040:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009044:	4a04      	ldr	r2, [pc, #16]	; (8009058 <VL53L0X_calc_timeout_us+0x50>)
 8009046:	fba2 2303 	umull	r2, r3, r2, r3
 800904a:	099b      	lsrs	r3, r3, #6
 800904c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800904e:	697b      	ldr	r3, [r7, #20]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	10624dd3 	.word	0x10624dd3

0800905c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b08c      	sub	sp, #48	; 0x30
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	460b      	mov	r3, r1
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009082:	7afb      	ldrb	r3, [r7, #11]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <get_sequence_step_timeout+0x38>
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d002      	beq.n	8009094 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d128      	bne.n	80090e6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009094:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009098:	461a      	mov	r2, r3
 800909a:	2100      	movs	r1, #0
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7fd fa7d 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80090a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d109      	bne.n	80090c4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80090b0:	f107 0320 	add.w	r3, r7, #32
 80090b4:	461a      	mov	r2, r3
 80090b6:	2146      	movs	r1, #70	; 0x46
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f001 fd8b 	bl	800abd4 <VL53L0X_RdByte>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80090c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff ff5c 	bl	8008f88 <VL53L0X_decode_timeout>
 80090d0:	4603      	mov	r3, r0
 80090d2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80090d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80090d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090da:	4619      	mov	r1, r3
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff ff93 	bl	8009008 <VL53L0X_calc_timeout_us>
 80090e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80090e4:	e092      	b.n	800920c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d135      	bne.n	8009158 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80090ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80090f0:	461a      	mov	r2, r3
 80090f2:	2100      	movs	r1, #0
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f7fd fa51 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009104:	2b00      	cmp	r3, #0
 8009106:	f040 8081 	bne.w	800920c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800910a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800910e:	461a      	mov	r2, r3
 8009110:	2100      	movs	r1, #0
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f7fd fa42 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800911e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8009126:	f107 031e 	add.w	r3, r7, #30
 800912a:	461a      	mov	r2, r3
 800912c:	2151      	movs	r1, #81	; 0x51
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f001 fd7a 	bl	800ac28 <VL53L0X_RdWord>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800913a:	8bfb      	ldrh	r3, [r7, #30]
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff ff23 	bl	8008f88 <VL53L0X_decode_timeout>
 8009142:	4603      	mov	r3, r0
 8009144:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009146:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800914a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800914c:	4619      	mov	r1, r3
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff ff5a 	bl	8009008 <VL53L0X_calc_timeout_us>
 8009154:	62b8      	str	r0, [r7, #40]	; 0x28
 8009156:	e059      	b.n	800920c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d156      	bne.n	800920c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800915e:	f107 0314 	add.w	r3, r7, #20
 8009162:	4619      	mov	r1, r3
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7fd fb25 	bl	80067b4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01d      	beq.n	80091b0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009174:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009178:	461a      	mov	r2, r3
 800917a:	2100      	movs	r1, #0
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f7fd fa0d 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10f      	bne.n	80091b0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009190:	f107 031e 	add.w	r3, r7, #30
 8009194:	461a      	mov	r2, r3
 8009196:	2151      	movs	r1, #81	; 0x51
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f001 fd45 	bl	800ac28 <VL53L0X_RdWord>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80091a4:	8bfb      	ldrh	r3, [r7, #30]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff feee 	bl	8008f88 <VL53L0X_decode_timeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80091b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d109      	bne.n	80091cc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80091b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80091bc:	461a      	mov	r2, r3
 80091be:	2101      	movs	r1, #1
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7fd f9eb 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80091cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10f      	bne.n	80091f4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80091d4:	f107 031c 	add.w	r3, r7, #28
 80091d8:	461a      	mov	r2, r3
 80091da:	2171      	movs	r1, #113	; 0x71
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f001 fd23 	bl	800ac28 <VL53L0X_RdWord>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80091e8:	8bbb      	ldrh	r3, [r7, #28]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fecc 	bl	8008f88 <VL53L0X_decode_timeout>
 80091f0:	4603      	mov	r3, r0
 80091f2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80091f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80091fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009202:	4619      	mov	r1, r3
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff feff 	bl	8009008 <VL53L0X_calc_timeout_us>
 800920a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009210:	601a      	str	r2, [r3, #0]

	return Status;
 8009212:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009216:	4618      	mov	r0, r3
 8009218:	3730      	adds	r7, #48	; 0x30
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b08a      	sub	sp, #40	; 0x28
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	460b      	mov	r3, r1
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
 800922e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <set_sequence_step_timeout+0x26>
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d002      	beq.n	8009244 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800923e:	7afb      	ldrb	r3, [r7, #11]
 8009240:	2b02      	cmp	r3, #2
 8009242:	d138      	bne.n	80092b6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009244:	f107 031b 	add.w	r3, r7, #27
 8009248:	461a      	mov	r2, r3
 800924a:	2100      	movs	r1, #0
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7fd f9a5 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009258:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800925c:	2b00      	cmp	r3, #0
 800925e:	d11a      	bne.n	8009296 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009260:	7efb      	ldrb	r3, [r7, #27]
 8009262:	461a      	mov	r2, r3
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f7ff fea4 	bl	8008fb4 <VL53L0X_calc_timeout_mclks>
 800926c:	4603      	mov	r3, r0
 800926e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009270:	8bbb      	ldrh	r3, [r7, #28]
 8009272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009276:	d903      	bls.n	8009280 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009278:	23ff      	movs	r3, #255	; 0xff
 800927a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800927e:	e004      	b.n	800928a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009280:	8bbb      	ldrh	r3, [r7, #28]
 8009282:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009284:	3b01      	subs	r3, #1
 8009286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800928a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800929a:	2b00      	cmp	r3, #0
 800929c:	f040 80ab 	bne.w	80093f6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80092a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092a4:	461a      	mov	r2, r3
 80092a6:	2146      	movs	r1, #70	; 0x46
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f001 fc11 	bl	800aad0 <VL53L0X_WrByte>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80092b4:	e09f      	b.n	80093f6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80092b6:	7afb      	ldrb	r3, [r7, #11]
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d135      	bne.n	8009328 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80092bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11b      	bne.n	80092fc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80092c4:	f107 031b 	add.w	r3, r7, #27
 80092c8:	461a      	mov	r2, r3
 80092ca:	2100      	movs	r1, #0
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7fd f965 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80092d8:	7efb      	ldrb	r3, [r7, #27]
 80092da:	461a      	mov	r2, r3
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff fe68 	bl	8008fb4 <VL53L0X_calc_timeout_mclks>
 80092e4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80092e6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80092e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fe20 	bl	8008f30 <VL53L0X_encode_timeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092f4:	8b3a      	ldrh	r2, [r7, #24]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80092fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009300:	2b00      	cmp	r3, #0
 8009302:	d108      	bne.n	8009316 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009304:	8b3b      	ldrh	r3, [r7, #24]
 8009306:	461a      	mov	r2, r3
 8009308:	2151      	movs	r1, #81	; 0x51
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f001 fc04 	bl	800ab18 <VL53L0X_WrWord>
 8009310:	4603      	mov	r3, r0
 8009312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800931a:	2b00      	cmp	r3, #0
 800931c:	d16b      	bne.n	80093f6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009326:	e066      	b.n	80093f6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d160      	bne.n	80093f0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800932e:	f107 0310 	add.w	r3, r7, #16
 8009332:	4619      	mov	r1, r3
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7fd fa3d 	bl	80067b4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800933e:	7cfb      	ldrb	r3, [r7, #19]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d01d      	beq.n	8009380 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009344:	f107 031b 	add.w	r3, r7, #27
 8009348:	461a      	mov	r2, r3
 800934a:	2100      	movs	r1, #0
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f7fd f925 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10f      	bne.n	8009380 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009360:	f107 0318 	add.w	r3, r7, #24
 8009364:	461a      	mov	r2, r3
 8009366:	2151      	movs	r1, #81	; 0x51
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f001 fc5d 	bl	800ac28 <VL53L0X_RdWord>
 800936e:	4603      	mov	r3, r0
 8009370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009374:	8b3b      	ldrh	r3, [r7, #24]
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff fe06 	bl	8008f88 <VL53L0X_decode_timeout>
 800937c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800937e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009388:	f107 031b 	add.w	r3, r7, #27
 800938c:	461a      	mov	r2, r3
 800938e:	2101      	movs	r1, #1
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7fd f903 	bl	800659c <VL53L0X_GetVcselPulsePeriod>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800939c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d128      	bne.n	80093f6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80093a4:	7efb      	ldrb	r3, [r7, #27]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fe02 	bl	8008fb4 <VL53L0X_calc_timeout_mclks>
 80093b0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80093b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093b4:	6a3a      	ldr	r2, [r7, #32]
 80093b6:	4413      	add	r3, r2
 80093b8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80093ba:	6a38      	ldr	r0, [r7, #32]
 80093bc:	f7ff fdb8 	bl	8008f30 <VL53L0X_encode_timeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80093c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d108      	bne.n	80093de <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80093cc:	8bfb      	ldrh	r3, [r7, #30]
 80093ce:	461a      	mov	r2, r3
 80093d0:	2171      	movs	r1, #113	; 0x71
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f001 fba0 	bl	800ab18 <VL53L0X_WrWord>
 80093d8:	4603      	mov	r3, r0
 80093da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80093de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d107      	bne.n	80093f6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80093ee:	e002      	b.n	80093f6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80093f0:	23fc      	movs	r3, #252	; 0xfc
 80093f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80093f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3728      	adds	r7, #40	; 0x28
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b08a      	sub	sp, #40	; 0x28
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
 800940e:	4613      	mov	r3, r2
 8009410:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009412:	2300      	movs	r3, #0
 8009414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009418:	230c      	movs	r3, #12
 800941a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800941e:	2312      	movs	r3, #18
 8009420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009424:	2308      	movs	r3, #8
 8009426:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800942a:	230e      	movs	r3, #14
 800942c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009434:	78bb      	ldrb	r3, [r7, #2]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009440:	23fc      	movs	r3, #252	; 0xfc
 8009442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009446:	e020      	b.n	800948a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10d      	bne.n	800946a <VL53L0X_set_vcsel_pulse_period+0x68>
 800944e:	78ba      	ldrb	r2, [r7, #2]
 8009450:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009454:	429a      	cmp	r2, r3
 8009456:	d304      	bcc.n	8009462 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009458:	78ba      	ldrb	r2, [r7, #2]
 800945a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800945e:	429a      	cmp	r2, r3
 8009460:	d903      	bls.n	800946a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009462:	23fc      	movs	r3, #252	; 0xfc
 8009464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009468:	e00f      	b.n	800948a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10c      	bne.n	800948a <VL53L0X_set_vcsel_pulse_period+0x88>
 8009470:	78ba      	ldrb	r2, [r7, #2]
 8009472:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009476:	429a      	cmp	r2, r3
 8009478:	d304      	bcc.n	8009484 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800947a:	78ba      	ldrb	r2, [r7, #2]
 800947c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009480:	429a      	cmp	r2, r3
 8009482:	d902      	bls.n	800948a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009484:	23fc      	movs	r3, #252	; 0xfc
 8009486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800948a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009492:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009496:	e239      	b.n	800990c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d150      	bne.n	8009540 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800949e:	78bb      	ldrb	r3, [r7, #2]
 80094a0:	2b0c      	cmp	r3, #12
 80094a2:	d110      	bne.n	80094c6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80094a4:	2218      	movs	r2, #24
 80094a6:	2157      	movs	r1, #87	; 0x57
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fb11 	bl	800aad0 <VL53L0X_WrByte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80094b4:	2208      	movs	r2, #8
 80094b6:	2156      	movs	r1, #86	; 0x56
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fb09 	bl	800aad0 <VL53L0X_WrByte>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094c4:	e17f      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80094c6:	78bb      	ldrb	r3, [r7, #2]
 80094c8:	2b0e      	cmp	r3, #14
 80094ca:	d110      	bne.n	80094ee <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80094cc:	2230      	movs	r2, #48	; 0x30
 80094ce:	2157      	movs	r1, #87	; 0x57
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fafd 	bl	800aad0 <VL53L0X_WrByte>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80094dc:	2208      	movs	r2, #8
 80094de:	2156      	movs	r1, #86	; 0x56
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 faf5 	bl	800aad0 <VL53L0X_WrByte>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094ec:	e16b      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80094ee:	78bb      	ldrb	r3, [r7, #2]
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d110      	bne.n	8009516 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80094f4:	2240      	movs	r2, #64	; 0x40
 80094f6:	2157      	movs	r1, #87	; 0x57
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 fae9 	bl	800aad0 <VL53L0X_WrByte>
 80094fe:	4603      	mov	r3, r0
 8009500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009504:	2208      	movs	r2, #8
 8009506:	2156      	movs	r1, #86	; 0x56
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 fae1 	bl	800aad0 <VL53L0X_WrByte>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009514:	e157      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009516:	78bb      	ldrb	r3, [r7, #2]
 8009518:	2b12      	cmp	r3, #18
 800951a:	f040 8154 	bne.w	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800951e:	2250      	movs	r2, #80	; 0x50
 8009520:	2157      	movs	r1, #87	; 0x57
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fad4 	bl	800aad0 <VL53L0X_WrByte>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800952e:	2208      	movs	r2, #8
 8009530:	2156      	movs	r1, #86	; 0x56
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 facc 	bl	800aad0 <VL53L0X_WrByte>
 8009538:	4603      	mov	r3, r0
 800953a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800953e:	e142      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	2b01      	cmp	r3, #1
 8009544:	f040 813f 	bne.w	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009548:	78bb      	ldrb	r3, [r7, #2]
 800954a:	2b08      	cmp	r3, #8
 800954c:	d14c      	bne.n	80095e8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800954e:	2210      	movs	r2, #16
 8009550:	2148      	movs	r1, #72	; 0x48
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 fabc 	bl	800aad0 <VL53L0X_WrByte>
 8009558:	4603      	mov	r3, r0
 800955a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800955e:	2208      	movs	r2, #8
 8009560:	2147      	movs	r1, #71	; 0x47
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 fab4 	bl	800aad0 <VL53L0X_WrByte>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800956e:	2202      	movs	r2, #2
 8009570:	2132      	movs	r1, #50	; 0x32
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 faac 	bl	800aad0 <VL53L0X_WrByte>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009580:	4313      	orrs	r3, r2
 8009582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009586:	220c      	movs	r2, #12
 8009588:	2130      	movs	r1, #48	; 0x30
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 faa0 	bl	800aad0 <VL53L0X_WrByte>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009598:	4313      	orrs	r3, r2
 800959a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800959e:	2201      	movs	r2, #1
 80095a0:	21ff      	movs	r1, #255	; 0xff
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 fa94 	bl	800aad0 <VL53L0X_WrByte>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80095b6:	2230      	movs	r2, #48	; 0x30
 80095b8:	2130      	movs	r1, #48	; 0x30
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 fa88 	bl	800aad0 <VL53L0X_WrByte>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c8:	4313      	orrs	r3, r2
 80095ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80095ce:	2200      	movs	r2, #0
 80095d0:	21ff      	movs	r1, #255	; 0xff
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f001 fa7c 	bl	800aad0 <VL53L0X_WrByte>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095e0:	4313      	orrs	r3, r2
 80095e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095e6:	e0ee      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80095e8:	78bb      	ldrb	r3, [r7, #2]
 80095ea:	2b0a      	cmp	r3, #10
 80095ec:	d14c      	bne.n	8009688 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80095ee:	2228      	movs	r2, #40	; 0x28
 80095f0:	2148      	movs	r1, #72	; 0x48
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fa6c 	bl	800aad0 <VL53L0X_WrByte>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80095fe:	2208      	movs	r2, #8
 8009600:	2147      	movs	r1, #71	; 0x47
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 fa64 	bl	800aad0 <VL53L0X_WrByte>
 8009608:	4603      	mov	r3, r0
 800960a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800960e:	2203      	movs	r2, #3
 8009610:	2132      	movs	r1, #50	; 0x32
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 fa5c 	bl	800aad0 <VL53L0X_WrByte>
 8009618:	4603      	mov	r3, r0
 800961a:	461a      	mov	r2, r3
 800961c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009620:	4313      	orrs	r3, r2
 8009622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009626:	2209      	movs	r2, #9
 8009628:	2130      	movs	r1, #48	; 0x30
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f001 fa50 	bl	800aad0 <VL53L0X_WrByte>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009638:	4313      	orrs	r3, r2
 800963a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800963e:	2201      	movs	r2, #1
 8009640:	21ff      	movs	r1, #255	; 0xff
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fa44 	bl	800aad0 <VL53L0X_WrByte>
 8009648:	4603      	mov	r3, r0
 800964a:	461a      	mov	r2, r3
 800964c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009650:	4313      	orrs	r3, r2
 8009652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009656:	2220      	movs	r2, #32
 8009658:	2130      	movs	r1, #48	; 0x30
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 fa38 	bl	800aad0 <VL53L0X_WrByte>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009668:	4313      	orrs	r3, r2
 800966a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800966e:	2200      	movs	r2, #0
 8009670:	21ff      	movs	r1, #255	; 0xff
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 fa2c 	bl	800aad0 <VL53L0X_WrByte>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009680:	4313      	orrs	r3, r2
 8009682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009686:	e09e      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009688:	78bb      	ldrb	r3, [r7, #2]
 800968a:	2b0c      	cmp	r3, #12
 800968c:	d14c      	bne.n	8009728 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800968e:	2238      	movs	r2, #56	; 0x38
 8009690:	2148      	movs	r1, #72	; 0x48
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 fa1c 	bl	800aad0 <VL53L0X_WrByte>
 8009698:	4603      	mov	r3, r0
 800969a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800969e:	2208      	movs	r2, #8
 80096a0:	2147      	movs	r1, #71	; 0x47
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 fa14 	bl	800aad0 <VL53L0X_WrByte>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80096ae:	2203      	movs	r2, #3
 80096b0:	2132      	movs	r1, #50	; 0x32
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fa0c 	bl	800aad0 <VL53L0X_WrByte>
 80096b8:	4603      	mov	r3, r0
 80096ba:	461a      	mov	r2, r3
 80096bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80096c6:	2208      	movs	r2, #8
 80096c8:	2130      	movs	r1, #48	; 0x30
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 fa00 	bl	800aad0 <VL53L0X_WrByte>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096d8:	4313      	orrs	r3, r2
 80096da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80096de:	2201      	movs	r2, #1
 80096e0:	21ff      	movs	r1, #255	; 0xff
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 f9f4 	bl	800aad0 <VL53L0X_WrByte>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f0:	4313      	orrs	r3, r2
 80096f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80096f6:	2220      	movs	r2, #32
 80096f8:	2130      	movs	r1, #48	; 0x30
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 f9e8 	bl	800aad0 <VL53L0X_WrByte>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009708:	4313      	orrs	r3, r2
 800970a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800970e:	2200      	movs	r2, #0
 8009710:	21ff      	movs	r1, #255	; 0xff
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 f9dc 	bl	800aad0 <VL53L0X_WrByte>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009720:	4313      	orrs	r3, r2
 8009722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009726:	e04e      	b.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009728:	78bb      	ldrb	r3, [r7, #2]
 800972a:	2b0e      	cmp	r3, #14
 800972c:	d14b      	bne.n	80097c6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800972e:	2248      	movs	r2, #72	; 0x48
 8009730:	2148      	movs	r1, #72	; 0x48
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 f9cc 	bl	800aad0 <VL53L0X_WrByte>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800973e:	2208      	movs	r2, #8
 8009740:	2147      	movs	r1, #71	; 0x47
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 f9c4 	bl	800aad0 <VL53L0X_WrByte>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800974e:	2203      	movs	r2, #3
 8009750:	2132      	movs	r1, #50	; 0x32
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 f9bc 	bl	800aad0 <VL53L0X_WrByte>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009760:	4313      	orrs	r3, r2
 8009762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009766:	2207      	movs	r2, #7
 8009768:	2130      	movs	r1, #48	; 0x30
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 f9b0 	bl	800aad0 <VL53L0X_WrByte>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009778:	4313      	orrs	r3, r2
 800977a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800977e:	2201      	movs	r2, #1
 8009780:	21ff      	movs	r1, #255	; 0xff
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 f9a4 	bl	800aad0 <VL53L0X_WrByte>
 8009788:	4603      	mov	r3, r0
 800978a:	461a      	mov	r2, r3
 800978c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009790:	4313      	orrs	r3, r2
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009796:	2220      	movs	r2, #32
 8009798:	2130      	movs	r1, #48	; 0x30
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 f998 	bl	800aad0 <VL53L0X_WrByte>
 80097a0:	4603      	mov	r3, r0
 80097a2:	461a      	mov	r2, r3
 80097a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80097ae:	2200      	movs	r2, #0
 80097b0:	21ff      	movs	r1, #255	; 0xff
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f98c 	bl	800aad0 <VL53L0X_WrByte>
 80097b8:	4603      	mov	r3, r0
 80097ba:	461a      	mov	r2, r3
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80097c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d17f      	bne.n	80098ce <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80097ce:	78bb      	ldrb	r3, [r7, #2]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fe38 	bl	8008446 <VL53L0X_encode_vcsel_period>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d045      	beq.n	8009872 <VL53L0X_set_vcsel_pulse_period+0x470>
 80097e6:	e06e      	b.n	80098c6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80097e8:	f107 0314 	add.w	r3, r7, #20
 80097ec:	461a      	mov	r2, r3
 80097ee:	2103      	movs	r1, #3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff fc33 	bl	800905c <get_sequence_step_timeout>
 80097f6:	4603      	mov	r3, r0
 80097f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80097fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009804:	f107 0310 	add.w	r3, r7, #16
 8009808:	461a      	mov	r2, r3
 800980a:	2102      	movs	r1, #2
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fc25 	bl	800905c <get_sequence_step_timeout>
 8009812:	4603      	mov	r3, r0
 8009814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009818:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009820:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009824:	461a      	mov	r2, r3
 8009826:	2150      	movs	r1, #80	; 0x50
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 f951 	bl	800aad0 <VL53L0X_WrByte>
 800982e:	4603      	mov	r3, r0
 8009830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009834:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009838:	2b00      	cmp	r3, #0
 800983a:	d108      	bne.n	800984e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	461a      	mov	r2, r3
 8009840:	2103      	movs	r1, #3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fceb 	bl	800921e <set_sequence_step_timeout>
 8009848:	4603      	mov	r3, r0
 800984a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800984e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009852:	2b00      	cmp	r3, #0
 8009854:	d108      	bne.n	8009868 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	461a      	mov	r2, r3
 800985a:	2102      	movs	r1, #2
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff fcde 	bl	800921e <set_sequence_step_timeout>
 8009862:	4603      	mov	r3, r0
 8009864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	78ba      	ldrb	r2, [r7, #2]
 800986c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009870:	e02e      	b.n	80098d0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009872:	f107 0318 	add.w	r3, r7, #24
 8009876:	461a      	mov	r2, r3
 8009878:	2104      	movs	r1, #4
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff fbee 	bl	800905c <get_sequence_step_timeout>
 8009880:	4603      	mov	r3, r0
 8009882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800988e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009892:	461a      	mov	r2, r3
 8009894:	2170      	movs	r1, #112	; 0x70
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 f91a 	bl	800aad0 <VL53L0X_WrByte>
 800989c:	4603      	mov	r3, r0
 800989e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80098a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d108      	bne.n	80098bc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	461a      	mov	r2, r3
 80098ae:	2104      	movs	r1, #4
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fcb4 	bl	800921e <set_sequence_step_timeout>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	78ba      	ldrb	r2, [r7, #2]
 80098c0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80098c4:	e004      	b.n	80098d0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098c6:	23fc      	movs	r3, #252	; 0xfc
 80098c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098cc:	e000      	b.n	80098d0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80098ce:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80098d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d109      	bne.n	80098ec <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80098de:	69f9      	ldr	r1, [r7, #28]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fc fe1d 	bl	8006520 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80098ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d109      	bne.n	8009908 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80098f4:	f107 010f 	add.w	r1, r7, #15
 80098f8:	2301      	movs	r3, #1
 80098fa:	2200      	movs	r2, #0
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7fe fcbd 	bl	800827c <VL53L0X_perform_phase_calibration>
 8009902:	4603      	mov	r3, r0
 8009904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009908:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800990c:	4618      	mov	r0, r3
 800990e:	3728      	adds	r7, #40	; 0x28
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	460b      	mov	r3, r1
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800992c:	2b01      	cmp	r3, #1
 800992e:	d00a      	beq.n	8009946 <VL53L0X_get_vcsel_pulse_period+0x32>
 8009930:	e013      	b.n	800995a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009932:	f107 0316 	add.w	r3, r7, #22
 8009936:	461a      	mov	r2, r3
 8009938:	2150      	movs	r1, #80	; 0x50
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f001 f94a 	bl	800abd4 <VL53L0X_RdByte>
 8009940:	4603      	mov	r3, r0
 8009942:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009944:	e00b      	b.n	800995e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009946:	f107 0316 	add.w	r3, r7, #22
 800994a:	461a      	mov	r2, r3
 800994c:	2170      	movs	r1, #112	; 0x70
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 f940 	bl	800abd4 <VL53L0X_RdByte>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009958:	e001      	b.n	800995e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800995a:	23fc      	movs	r3, #252	; 0xfc
 800995c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800995e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d107      	bne.n	8009976 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009966:	7dbb      	ldrb	r3, [r7, #22]
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe fd59 	bl	8008420 <VL53L0X_decode_vcsel_period>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	701a      	strb	r2, [r3, #0]

	return Status;
 8009976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b092      	sub	sp, #72	; 0x48
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800998c:	2300      	movs	r3, #0
 800998e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009992:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009996:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009998:	f240 7376 	movw	r3, #1910	; 0x776
 800999c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800999e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80099a2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80099a4:	f44f 7325 	mov.w	r3, #660	; 0x294
 80099a8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80099aa:	f240 234e 	movw	r3, #590	; 0x24e
 80099ae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80099b0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80099b6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80099bc:	f240 2326 	movw	r3, #550	; 0x226
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80099c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80099ca:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d205      	bcs.n	80099e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099d8:	23fc      	movs	r3, #252	; 0xfc
 80099da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80099de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80099e2:	e0aa      	b.n	8009b3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80099e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80099f0:	f107 0314 	add.w	r3, r7, #20
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7fc fedc 	bl	80067b4 <VL53L0X_GetSequenceStepEnables>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009a02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d15b      	bne.n	8009ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009a0a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009a10:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d102      	bne.n	8009a1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009a16:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d052      	beq.n	8009ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009a1c:	f107 0310 	add.w	r3, r7, #16
 8009a20:	461a      	mov	r2, r3
 8009a22:	2102      	movs	r1, #2
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7ff fb19 	bl	800905c <get_sequence_step_timeout>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009a30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009a38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a3c:	e07d      	b.n	8009b3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009a3e:	7d3b      	ldrb	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00f      	beq.n	8009a64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009a44:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a48:	4413      	add	r3, r2
 8009a4a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009a4c:	69fa      	ldr	r2, [r7, #28]
 8009a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d204      	bcs.n	8009a5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a5c:	e002      	b.n	8009a64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a5e:	23fc      	movs	r3, #252	; 0xfc
 8009a60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009a64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009a6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009a70:	e063      	b.n	8009b3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009a72:	7dbb      	ldrb	r3, [r7, #22]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d011      	beq.n	8009a9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	4413      	add	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d204      	bcs.n	8009a94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	643b      	str	r3, [r7, #64]	; 0x40
 8009a92:	e016      	b.n	8009ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a94:	23fc      	movs	r3, #252	; 0xfc
 8009a96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a9a:	e012      	b.n	8009ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009a9c:	7d7b      	ldrb	r3, [r7, #21]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00f      	beq.n	8009ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aa6:	4413      	add	r3, r2
 8009aa8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009aaa:	69fa      	ldr	r2, [r7, #28]
 8009aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d204      	bcs.n	8009abc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8009aba:	e002      	b.n	8009ac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009abc:	23fc      	movs	r3, #252	; 0xfc
 8009abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009ac2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009aca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ace:	e034      	b.n	8009b3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d019      	beq.n	8009b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	461a      	mov	r2, r3
 8009adc:	2103      	movs	r1, #3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff fabc 	bl	800905c <get_sequence_step_timeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aee:	4413      	add	r3, r2
 8009af0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d204      	bcs.n	8009b04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	643b      	str	r3, [r7, #64]	; 0x40
 8009b02:	e002      	b.n	8009b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b04:	23fc      	movs	r3, #252	; 0xfc
 8009b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009b0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d111      	bne.n	8009b36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009b12:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00e      	beq.n	8009b36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b22:	2104      	movs	r1, #4
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff fb7a 	bl	800921e <set_sequence_step_timeout>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009b36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3748      	adds	r7, #72	; 0x48
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b090      	sub	sp, #64	; 0x40
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009b52:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009b56:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009b58:	f240 7376 	movw	r3, #1910	; 0x776
 8009b5c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009b5e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009b64:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009b68:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009b6a:	f240 234e 	movw	r3, #590	; 0x24e
 8009b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009b70:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009b74:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009b76:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009b7c:	f240 2326 	movw	r3, #550	; 0x226
 8009b80:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	441a      	add	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009b90:	f107 0318 	add.w	r3, r7, #24
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7fc fe0c 	bl	80067b4 <VL53L0X_GetSequenceStepEnables>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009ba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009baa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bae:	e075      	b.n	8009c9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009bb0:	7e3b      	ldrb	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d105      	bne.n	8009bc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009bb6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009bbc:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d030      	beq.n	8009c24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009bc2:	f107 0310 	add.w	r3, r7, #16
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	2102      	movs	r1, #2
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff fa46 	bl	800905c <get_sequence_step_timeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009bd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d122      	bne.n	8009c24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009bde:	7e3b      	ldrb	r3, [r7, #24]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d007      	beq.n	8009bf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009be8:	6939      	ldr	r1, [r7, #16]
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bee:	441a      	add	r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009bf4:	7ebb      	ldrb	r3, [r7, #26]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d009      	beq.n	8009c0e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009bfe:	6939      	ldr	r1, [r7, #16]
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	440b      	add	r3, r1
 8009c04:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009c06:	441a      	add	r2, r3
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	e00a      	b.n	8009c24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009c0e:	7e7b      	ldrb	r3, [r7, #25]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009c18:	6939      	ldr	r1, [r7, #16]
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009c1e:	441a      	add	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d114      	bne.n	8009c56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009c2c:	7efb      	ldrb	r3, [r7, #27]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d011      	beq.n	8009c56 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009c32:	f107 030c 	add.w	r3, r7, #12
 8009c36:	461a      	mov	r2, r3
 8009c38:	2103      	movs	r1, #3
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7ff fa0e 	bl	800905c <get_sequence_step_timeout>
 8009c40:	4603      	mov	r3, r0
 8009c42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009c4a:	68f9      	ldr	r1, [r7, #12]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c50:	441a      	add	r2, r3
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d114      	bne.n	8009c88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009c5e:	7f3b      	ldrb	r3, [r7, #28]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d011      	beq.n	8009c88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009c64:	f107 0314 	add.w	r3, r7, #20
 8009c68:	461a      	mov	r2, r3
 8009c6a:	2104      	movs	r1, #4
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff f9f5 	bl	800905c <get_sequence_step_timeout>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009c7c:	6979      	ldr	r1, [r7, #20]
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009c82:	441a      	add	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d103      	bne.n	8009c98 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3740      	adds	r7, #64	; 0x40
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009cb6:	e0c6      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009cc8:	7cfb      	ldrb	r3, [r7, #19]
 8009cca:	2bff      	cmp	r3, #255	; 0xff
 8009ccc:	f040 808d 	bne.w	8009dea <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	747b      	strb	r3, [r7, #17]
			Index++;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009ce0:	7c7b      	ldrb	r3, [r7, #17]
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d87e      	bhi.n	8009de4 <VL53L0X_load_tuning_settings+0x140>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <VL53L0X_load_tuning_settings+0x48>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009cfd 	.word	0x08009cfd
 8009cf0:	08009d37 	.word	0x08009d37
 8009cf4:	08009d71 	.word	0x08009d71
 8009cf8:	08009dab 	.word	0x08009dab
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4413      	add	r3, r2
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	4413      	add	r3, r2
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d1c:	7c3b      	ldrb	r3, [r7, #16]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4413      	add	r3, r2
 8009d2a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	89ba      	ldrh	r2, [r7, #12]
 8009d30:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009d34:	e087      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	3301      	adds	r3, #1
 8009d44:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	3301      	adds	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d56:	7c3b      	ldrb	r3, [r7, #16]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	021b      	lsls	r3, r3, #8
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4413      	add	r3, r2
 8009d64:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	89ba      	ldrh	r2, [r7, #12]
 8009d6a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009d6e:	e06a      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4413      	add	r3, r2
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	743b      	strb	r3, [r7, #16]
				Index++;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	4413      	add	r3, r2
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009d90:	7c3b      	ldrb	r3, [r7, #16]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	4413      	add	r3, r2
 8009d9e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	89ba      	ldrh	r2, [r7, #12]
 8009da4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009da8:	e04d      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	4413      	add	r3, r2
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	743b      	strb	r3, [r7, #16]
				Index++;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	3301      	adds	r3, #1
 8009db8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009dca:	7c3b      	ldrb	r3, [r7, #16]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	021b      	lsls	r3, r3, #8
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	89ba      	ldrh	r2, [r7, #12]
 8009dde:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8009de2:	e030      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009de4:	23fc      	movs	r3, #252	; 0xfc
 8009de6:	77fb      	strb	r3, [r7, #31]
 8009de8:	e02d      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009dea:	7cfb      	ldrb	r3, [r7, #19]
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	d828      	bhi.n	8009e42 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4413      	add	r3, r2
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009e00:	2300      	movs	r3, #0
 8009e02:	61bb      	str	r3, [r7, #24]
 8009e04:	e00f      	b.n	8009e26 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	7819      	ldrb	r1, [r3, #0]
 8009e0e:	f107 0208 	add.w	r2, r7, #8
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	4413      	add	r3, r2
 8009e16:	460a      	mov	r2, r1
 8009e18:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	3301      	adds	r3, #1
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	7cfb      	ldrb	r3, [r7, #19]
 8009e28:	69ba      	ldr	r2, [r7, #24]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	dbeb      	blt.n	8009e06 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009e2e:	7cfb      	ldrb	r3, [r7, #19]
 8009e30:	f107 0208 	add.w	r2, r7, #8
 8009e34:	7cb9      	ldrb	r1, [r7, #18]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fdee 	bl	800aa18 <VL53L0X_WriteMulti>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	77fb      	strb	r3, [r7, #31]
 8009e40:	e001      	b.n	8009e46 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e42:	23fc      	movs	r3, #252	; 0xfc
 8009e44:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d004      	beq.n	8009e5c <VL53L0X_load_tuning_settings+0x1b8>
 8009e52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f43f af2e 	beq.w	8009cb8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3720      	adds	r7, #32
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009e7e:	f107 0313 	add.w	r3, r7, #19
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7fc fd21 	bl	80068cc <VL53L0X_GetXTalkCompensationEnable>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d111      	bne.n	8009eba <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009e96:	7cfb      	ldrb	r3, [r7, #19]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00e      	beq.n	8009eba <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	8a9b      	ldrh	r3, [r3, #20]
 8009ea6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	fb02 f303 	mul.w	r3, r2, r3
 8009eae:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	3380      	adds	r3, #128	; 0x80
 8009eb4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b086      	sub	sp, #24
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009ede:	f107 0310 	add.w	r3, r7, #16
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7ff ffbe 	bl	8009e68 <VL53L0X_get_total_xtalk_rate>
 8009eec:	4603      	mov	r3, r0
 8009eee:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	441a      	add	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]

	return Status;
 8009f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b09a      	sub	sp, #104	; 0x68
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009f1e:	2312      	movs	r3, #18
 8009f20:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009f26:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009f28:	2342      	movs	r3, #66	; 0x42
 8009f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009f2c:	2306      	movs	r3, #6
 8009f2e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009f30:	2307      	movs	r3, #7
 8009f32:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009f40:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009f48:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f4e:	fb02 f303 	mul.w	r3, r2, r3
 8009f52:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f56:	3380      	adds	r3, #128	; 0x80
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f60:	fb02 f303 	mul.w	r3, r2, r3
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01a      	beq.n	8009fa6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	029b      	lsls	r3, r3, #10
 8009f74:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7c:	4413      	add	r3, r2
 8009f7e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8009f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f88:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009f8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	4413      	add	r3, r2
 8009f92:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f96:	fb03 f303 	mul.w	r3, r3, r3
 8009f9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009fa2:	0c1b      	lsrs	r3, r3, #16
 8009fa4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009faa:	fb02 f303 	mul.w	r3, r2, r3
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	fb03 f303 	mul.w	r3, r3, r3
 8009fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8009fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009fc8:	0c1b      	lsrs	r3, r3, #16
 8009fca:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fce:	085a      	lsrs	r2, r3, #1
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	441a      	add	r2, r3
 8009fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fe0:	fb02 f303 	mul.w	r3, r2, r3
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fec:	d302      	bcc.n	8009ff4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009fee:	4b54      	ldr	r3, [pc, #336]	; (800a140 <VL53L0X_calc_dmax+0x230>)
 8009ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ff2:	e015      	b.n	800a020 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff6:	085a      	lsrs	r2, r3, #1
 8009ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ffa:	441a      	add	r2, r3
 8009ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a002:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a008:	fb02 f303 	mul.w	r3, r2, r3
 800a00c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a00e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a010:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a01a:	fb03 f303 	mul.w	r3, r3, r3
 800a01e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a022:	039b      	lsls	r3, r3, #14
 800a024:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a028:	4a46      	ldr	r2, [pc, #280]	; (800a144 <VL53L0X_calc_dmax+0x234>)
 800a02a:	fba2 2303 	umull	r2, r3, r2, r3
 800a02e:	099b      	lsrs	r3, r3, #6
 800a030:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	fb03 f303 	mul.w	r3, r3, r3
 800a038:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a03c:	fb03 f303 	mul.w	r3, r3, r3
 800a040:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	3308      	adds	r3, #8
 800a046:	091b      	lsrs	r3, r3, #4
 800a048:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a054:	4613      	mov	r3, r2
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	4413      	add	r3, r2
 800a05a:	011b      	lsls	r3, r3, #4
 800a05c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a064:	0b9b      	lsrs	r3, r3, #14
 800a066:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a06c:	4413      	add	r3, r2
 800a06e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a072:	085b      	lsrs	r3, r3, #1
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	4413      	add	r3, r2
 800a078:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a07e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a082:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	039b      	lsls	r3, r3, #14
 800a088:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	085b      	lsrs	r3, r3, #1
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	4413      	add	r3, r2
 800a092:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	fbb2 f3f3 	udiv	r3, r2, r3
 800a09c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0ae:	4a25      	ldr	r2, [pc, #148]	; (800a144 <VL53L0X_calc_dmax+0x234>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	099b      	lsrs	r3, r3, #6
 800a0b6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0c4:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <VL53L0X_calc_dmax+0x234>)
 800a0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ca:	099b      	lsrs	r3, r3, #6
 800a0cc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d0:	3380      	adds	r3, #128	; 0x80
 800a0d2:	0a1b      	lsrs	r3, r3, #8
 800a0d4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d008      	beq.n	800a0ee <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	085a      	lsrs	r2, r3, #1
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e2:	441a      	add	r2, r3
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0ec:	e001      	b.n	800a0f2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a0f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a0f4:	f7fe f9ba 	bl	800846c <VL53L0X_isqrt>
 800a0f8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d008      	beq.n	800a112 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	085a      	lsrs	r2, r3, #1
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	441a      	add	r2, r3
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a10e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a110:	e001      	b.n	800a116 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a116:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a118:	f7fe f9a8 	bl	800846c <VL53L0X_isqrt>
 800a11c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a11e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a128:	429a      	cmp	r2, r3
 800a12a:	d902      	bls.n	800a132 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a12c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a12e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a130:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a132:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a136:	4618      	mov	r0, r3
 800a138:	3768      	adds	r7, #104	; 0x68
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	fff00000 	.word	0xfff00000
 800a144:	10624dd3 	.word	0x10624dd3

0800a148 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b0b4      	sub	sp, #208	; 0xd0
 800a14c:	af04      	add	r7, sp, #16
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a156:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a15a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a15e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a166:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a16a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a16e:	f241 235c 	movw	r3, #4700	; 0x125c
 800a172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a176:	4b9e      	ldr	r3, [pc, #632]	; (800a3f0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a17c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a180:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a182:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a18a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a190:	4b98      	ldr	r3, [pc, #608]	; (800a3f4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a192:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a198:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a19a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a19e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a1a0:	f240 6377 	movw	r3, #1655	; 0x677
 800a1a4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1ba:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a1be:	0c1b      	lsrs	r3, r3, #16
 800a1c0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a1c8:	f107 0310 	add.w	r3, r7, #16
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	68b9      	ldr	r1, [r7, #8]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7ff fe78 	bl	8009ec6 <VL53L0X_get_total_signal_rate>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a1dc:	f107 0314 	add.w	r3, r7, #20
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fe3f 	bl	8009e68 <VL53L0X_get_total_xtalk_rate>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1f6:	fb02 f303 	mul.w	r3, r2, r3
 800a1fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a1fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a202:	0c1b      	lsrs	r3, r3, #16
 800a204:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
 800a210:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a214:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d902      	bls.n	800a224 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a224:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d168      	bne.n	800a2fe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a23c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a240:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a244:	461a      	mov	r2, r3
 800a246:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7fe feb2 	bl	8008fb4 <VL53L0X_calc_timeout_mclks>
 800a250:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a262:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a266:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a26a:	461a      	mov	r2, r3
 800a26c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7fe fe9f 	bl	8008fb4 <VL53L0X_calc_timeout_mclks>
 800a276:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a278:	2303      	movs	r3, #3
 800a27a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a27e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a282:	2b08      	cmp	r3, #8
 800a284:	d102      	bne.n	800a28c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a286:	2302      	movs	r3, #2
 800a288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a28c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a28e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a290:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a292:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a296:	fb02 f303 	mul.w	r3, r2, r3
 800a29a:	02db      	lsls	r3, r3, #11
 800a29c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a2a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a2a8:	4a53      	ldr	r2, [pc, #332]	; (800a3f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ae:	099b      	lsrs	r3, r3, #6
 800a2b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a2b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2ba:	fb02 f303 	mul.w	r3, r2, r3
 800a2be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a2c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a2ca:	4a4b      	ldr	r2, [pc, #300]	; (800a3f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d0:	099b      	lsrs	r3, r3, #6
 800a2d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3380      	adds	r3, #128	; 0x80
 800a2da:	0a1b      	lsrs	r3, r3, #8
 800a2dc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2e4:	fb02 f303 	mul.w	r3, r2, r3
 800a2e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a2ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2f0:	3380      	adds	r3, #128	; 0x80
 800a2f2:	0a1b      	lsrs	r3, r3, #8
 800a2f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a2fe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a306:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a30a:	e15e      	b.n	800a5ca <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a30c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10c      	bne.n	800a32c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a318:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a320:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2200      	movs	r2, #0
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e14c      	b.n	800a5c6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a32c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a330:	2b00      	cmp	r3, #0
 800a332:	d102      	bne.n	800a33a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a334:	2301      	movs	r3, #1
 800a336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a33a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a33e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a342:	041a      	lsls	r2, r3, #16
 800a344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a346:	fbb2 f3f3 	udiv	r3, r2, r3
 800a34a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a34e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a354:	429a      	cmp	r2, r3
 800a356:	d902      	bls.n	800a35e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a35a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a35e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a362:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a366:	fb02 f303 	mul.w	r3, r2, r3
 800a36a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a36e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a372:	4613      	mov	r3, r2
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe f876 	bl	800846c <VL53L0X_isqrt>
 800a380:	4603      	mov	r3, r0
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	891b      	ldrh	r3, [r3, #8]
 800a38a:	461a      	mov	r2, r3
 800a38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a38e:	fb02 f303 	mul.w	r3, r2, r3
 800a392:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a396:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a39c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a39e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a3a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a3a4:	4a14      	ldr	r2, [pc, #80]	; (800a3f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3aa:	099b      	lsrs	r3, r3, #6
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3b0:	041b      	lsls	r3, r3, #16
 800a3b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a3b6:	4a10      	ldr	r2, [pc, #64]	; (800a3f8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3bc:	099b      	lsrs	r3, r3, #6
 800a3be:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a3c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bfb8      	it	lt
 800a3d2:	425b      	neglt	r3, r3
 800a3d4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	7e1b      	ldrb	r3, [r3, #24]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00b      	beq.n	800a3fc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a3e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3ec:	e033      	b.n	800a456 <VL53L0X_calc_sigma_estimate+0x30e>
 800a3ee:	bf00      	nop
 800a3f0:	028f87ae 	.word	0x028f87ae
 800a3f4:	0006999a 	.word	0x0006999a
 800a3f8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a3fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a402:	fbb2 f3f3 	udiv	r3, r2, r3
 800a406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a414:	fb02 f303 	mul.w	r3, r2, r3
 800a418:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a41c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a422:	4413      	add	r3, r2
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a42e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a43a:	085b      	lsrs	r3, r3, #1
 800a43c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a444:	fb03 f303 	mul.w	r3, r3, r3
 800a448:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a44c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a450:	0b9b      	lsrs	r3, r3, #14
 800a452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45c:	fb02 f303 	mul.w	r3, r2, r3
 800a460:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a468:	0c1b      	lsrs	r3, r3, #16
 800a46a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	fb03 f303 	mul.w	r3, r3, r3
 800a472:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a480:	0c1b      	lsrs	r3, r3, #16
 800a482:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	fb03 f303 	mul.w	r3, r3, r3
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a490:	4413      	add	r3, r2
 800a492:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a496:	f7fd ffe9 	bl	800846c <VL53L0X_isqrt>
 800a49a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	3332      	adds	r3, #50	; 0x32
 800a4a6:	4a4b      	ldr	r2, [pc, #300]	; (800a5d4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800a4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ac:	095a      	lsrs	r2, r3, #5
 800a4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a4b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4bc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a4c0:	fb02 f303 	mul.w	r3, r2, r3
 800a4c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a4c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a4d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4da:	4a3f      	ldr	r2, [pc, #252]	; (800a5d8 <VL53L0X_calc_sigma_estimate+0x490>)
 800a4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e0:	0b5b      	lsrs	r3, r3, #13
 800a4e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a4e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d902      	bls.n	800a4f6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a4f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a4f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a504:	4a35      	ldr	r2, [pc, #212]	; (800a5dc <VL53L0X_calc_sigma_estimate+0x494>)
 800a506:	fba2 2303 	umull	r2, r3, r2, r3
 800a50a:	099b      	lsrs	r3, r3, #6
 800a50c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a516:	441a      	add	r2, r3
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fd ffa4 	bl	800846c <VL53L0X_isqrt>
 800a524:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a532:	4a2a      	ldr	r2, [pc, #168]	; (800a5dc <VL53L0X_calc_sigma_estimate+0x494>)
 800a534:	fba2 2303 	umull	r2, r3, r2, r3
 800a538:	099b      	lsrs	r3, r3, #6
 800a53a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a53c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a540:	fb03 f303 	mul.w	r3, r3, r3
 800a544:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	fb03 f303 	mul.w	r3, r3, r3
 800a54c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	4413      	add	r3, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f7fd ff89 	bl	800846c <VL53L0X_isqrt>
 800a55a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a562:	fb02 f303 	mul.w	r3, r2, r3
 800a566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a56a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d009      	beq.n	800a584 <VL53L0X_calc_sigma_estimate+0x43c>
 800a570:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <VL53L0X_calc_sigma_estimate+0x43c>
 800a578:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a57c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a592:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a59e:	6939      	ldr	r1, [r7, #16]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a5a8:	9302      	str	r3, [sp, #8]
 800a5aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7ff fca8 	bl	8009f10 <VL53L0X_calc_dmax>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	37c0      	adds	r7, #192	; 0xc0
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	51eb851f 	.word	0x51eb851f
 800a5d8:	d1b71759 	.word	0xd1b71759
 800a5dc:	10624dd3 	.word	0x10624dd3

0800a5e0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b090      	sub	sp, #64	; 0x40
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	607a      	str	r2, [r7, #4]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	72fb      	strb	r3, [r7, #11]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a61e:	2300      	movs	r3, #0
 800a620:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a624:	2300      	movs	r3, #0
 800a626:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a632:	7afb      	ldrb	r3, [r7, #11]
 800a634:	10db      	asrs	r3, r3, #3
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 030f 	and.w	r3, r3, #15
 800a63c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a640:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a644:	2b00      	cmp	r3, #0
 800a646:	d017      	beq.n	800a678 <VL53L0X_get_pal_range_status+0x98>
 800a648:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a64c:	2b05      	cmp	r3, #5
 800a64e:	d013      	beq.n	800a678 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a650:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a654:	2b07      	cmp	r3, #7
 800a656:	d00f      	beq.n	800a678 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a658:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a65c:	2b0c      	cmp	r3, #12
 800a65e:	d00b      	beq.n	800a678 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a660:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a664:	2b0d      	cmp	r3, #13
 800a666:	d007      	beq.n	800a678 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a668:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a66c:	2b0e      	cmp	r3, #14
 800a66e:	d003      	beq.n	800a678 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a670:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a674:	2b0f      	cmp	r3, #15
 800a676:	d103      	bne.n	800a680 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a67e:	e002      	b.n	800a686 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a686:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d109      	bne.n	800a6a2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a68e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a692:	461a      	mov	r2, r3
 800a694:	2100      	movs	r1, #0
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7fc f9ec 	bl	8006a74 <VL53L0X_GetLimitCheckEnable>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a6a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d02e      	beq.n	800a708 <VL53L0X_get_pal_range_status+0x128>
 800a6aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d12a      	bne.n	800a708 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a6b2:	f107 0310 	add.w	r3, r7, #16
 800a6b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a6ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff fd43 	bl	800a148 <VL53L0X_calc_sigma_estimate>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a6c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d103      	bne.n	800a6d8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a6d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d113      	bne.n	800a708 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a6e0:	f107 0320 	add.w	r3, r7, #32
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7fc fa49 	bl	8006b80 <VL53L0X_GetLimitCheckValue>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d006      	beq.n	800a708 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d902      	bls.n	800a708 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a708:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a710:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a714:	461a      	mov	r2, r3
 800a716:	2102      	movs	r1, #2
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7fc f9ab 	bl	8006a74 <VL53L0X_GetLimitCheckEnable>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a724:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d044      	beq.n	800a7b6 <VL53L0X_get_pal_range_status+0x1d6>
 800a72c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a730:	2b00      	cmp	r3, #0
 800a732:	d140      	bne.n	800a7b6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a734:	f107 031c 	add.w	r3, r7, #28
 800a738:	461a      	mov	r2, r3
 800a73a:	2102      	movs	r1, #2
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f7fc fa1f 	bl	8006b80 <VL53L0X_GetLimitCheckValue>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a748:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d107      	bne.n	800a760 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a750:	2201      	movs	r2, #1
 800a752:	21ff      	movs	r1, #255	; 0xff
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f9bb 	bl	800aad0 <VL53L0X_WrByte>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a760:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a764:	2b00      	cmp	r3, #0
 800a766:	d109      	bne.n	800a77c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a768:	f107 0316 	add.w	r3, r7, #22
 800a76c:	461a      	mov	r2, r3
 800a76e:	21b6      	movs	r1, #182	; 0xb6
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fa59 	bl	800ac28 <VL53L0X_RdWord>
 800a776:	4603      	mov	r3, r0
 800a778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a77c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a780:	2b00      	cmp	r3, #0
 800a782:	d107      	bne.n	800a794 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a784:	2200      	movs	r2, #0
 800a786:	21ff      	movs	r1, #255	; 0xff
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f9a1 	bl	800aad0 <VL53L0X_WrByte>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a794:	8afb      	ldrh	r3, [r7, #22]
 800a796:	025b      	lsls	r3, r3, #9
 800a798:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a79e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d006      	beq.n	800a7b6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a7a8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a7aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d902      	bls.n	800a7b6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a7b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d109      	bne.n	800a7d2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a7be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	2103      	movs	r1, #3
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7fc f954 	bl	8006a74 <VL53L0X_GetLimitCheckEnable>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a7d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d023      	beq.n	800a822 <VL53L0X_get_pal_range_status+0x242>
 800a7da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d11f      	bne.n	800a822 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a7e2:	893b      	ldrh	r3, [r7, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ec:	e005      	b.n	800a7fa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	021a      	lsls	r2, r3, #8
 800a7f2:	893b      	ldrh	r3, [r7, #8]
 800a7f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a7fa:	f107 0318 	add.w	r3, r7, #24
 800a7fe:	461a      	mov	r2, r3
 800a800:	2103      	movs	r1, #3
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7fc f9bc 	bl	8006b80 <VL53L0X_GetLimitCheckValue>
 800a808:	4603      	mov	r3, r0
 800a80a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d006      	beq.n	800a822 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a814:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a818:	429a      	cmp	r2, r3
 800a81a:	d202      	bcs.n	800a822 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a81c:	2301      	movs	r3, #1
 800a81e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a822:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a826:	2b00      	cmp	r3, #0
 800a828:	d14a      	bne.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a82a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d103      	bne.n	800a83a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a834:	22ff      	movs	r2, #255	; 0xff
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	e042      	b.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a83a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d007      	beq.n	800a852 <VL53L0X_get_pal_range_status+0x272>
 800a842:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a846:	2b02      	cmp	r3, #2
 800a848:	d003      	beq.n	800a852 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a84a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d103      	bne.n	800a85a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a854:	2205      	movs	r2, #5
 800a856:	701a      	strb	r2, [r3, #0]
 800a858:	e032      	b.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a85a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a85e:	2b06      	cmp	r3, #6
 800a860:	d003      	beq.n	800a86a <VL53L0X_get_pal_range_status+0x28a>
 800a862:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a866:	2b09      	cmp	r3, #9
 800a868:	d103      	bne.n	800a872 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a86c:	2204      	movs	r2, #4
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e026      	b.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a872:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a876:	2b08      	cmp	r3, #8
 800a878:	d007      	beq.n	800a88a <VL53L0X_get_pal_range_status+0x2aa>
 800a87a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a87e:	2b0a      	cmp	r3, #10
 800a880:	d003      	beq.n	800a88a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a882:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a886:	2b01      	cmp	r3, #1
 800a888:	d103      	bne.n	800a892 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a88c:	2203      	movs	r2, #3
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	e016      	b.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a892:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a896:	2b04      	cmp	r3, #4
 800a898:	d003      	beq.n	800a8a2 <VL53L0X_get_pal_range_status+0x2c2>
 800a89a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d103      	bne.n	800a8aa <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e00a      	b.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a8aa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d103      	bne.n	800a8ba <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e002      	b.n	800a8c0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a8ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a8c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d102      	bne.n	800a8ce <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a8ce:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f7fc f8cc 	bl	8006a74 <VL53L0X_GetLimitCheckEnable>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a8e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d14f      	bne.n	800a98a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a8ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <VL53L0X_get_pal_range_status+0x31a>
 800a8f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d103      	bne.n	800a902 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a900:	e002      	b.n	800a908 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a90e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a912:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a916:	2b04      	cmp	r3, #4
 800a918:	d003      	beq.n	800a922 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a91a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d103      	bne.n	800a92a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800a922:	2301      	movs	r3, #1
 800a924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a928:	e002      	b.n	800a930 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a936:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800a93a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <VL53L0X_get_pal_range_status+0x36a>
 800a942:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a946:	2b01      	cmp	r3, #1
 800a948:	d103      	bne.n	800a952 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a950:	e002      	b.n	800a958 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a95e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800a962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <VL53L0X_get_pal_range_status+0x392>
 800a96a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d103      	bne.n	800a97a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800a972:	2301      	movs	r3, #1
 800a974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a978:	e002      	b.n	800a980 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a986:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a98a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800a98e:	4618      	mov	r0, r3
 800a990:	3740      	adds	r7, #64	; 0x40
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a996:	b580      	push	{r7, lr}
 800a998:	b088      	sub	sp, #32
 800a99a:	af02      	add	r7, sp, #8
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	330a      	adds	r3, #10
 800a9a6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a9b4:	b299      	uxth	r1, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	f7f8 fa5b 	bl	8002e7c <HAL_I2C_Master_Transmit>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800a9ca:	693b      	ldr	r3, [r7, #16]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	330a      	adds	r3, #10
 800a9e4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	b299      	uxth	r1, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4613      	mov	r3, r2
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	f7f8 fb37 	bl	8003078 <HAL_I2C_Master_Receive>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800aa0e:	693b      	ldr	r3, [r7, #16]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	607a      	str	r2, [r7, #4]
 800aa22:	603b      	str	r3, [r7, #0]
 800aa24:	460b      	mov	r3, r1
 800aa26:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	2b3f      	cmp	r3, #63	; 0x3f
 800aa30:	d902      	bls.n	800aa38 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800aa32:	f06f 0303 	mvn.w	r3, #3
 800aa36:	e016      	b.n	800aa66 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800aa38:	4a0d      	ldr	r2, [pc, #52]	; (800aa70 <VL53L0X_WriteMulti+0x58>)
 800aa3a:	7afb      	ldrb	r3, [r7, #11]
 800aa3c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	6879      	ldr	r1, [r7, #4]
 800aa42:	480c      	ldr	r0, [pc, #48]	; (800aa74 <VL53L0X_WriteMulti+0x5c>)
 800aa44:	f000 f9d6 	bl	800adf4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4908      	ldr	r1, [pc, #32]	; (800aa70 <VL53L0X_WriteMulti+0x58>)
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff ffa0 	bl	800a996 <_I2CWrite>
 800aa56:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aa5e:	23ec      	movs	r3, #236	; 0xec
 800aa60:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800aa62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200006f0 	.word	0x200006f0
 800aa74:	200006f1 	.word	0x200006f1

0800aa78 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	607a      	str	r2, [r7, #4]
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	460b      	mov	r3, r1
 800aa86:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800aa8c:	f107 030b 	add.w	r3, r7, #11
 800aa90:	2201      	movs	r2, #1
 800aa92:	4619      	mov	r1, r3
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7ff ff7e 	bl	800a996 <_I2CWrite>
 800aa9a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aaa2:	23ec      	movs	r3, #236	; 0xec
 800aaa4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800aaa6:	e00c      	b.n	800aac2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7ff ff91 	bl	800a9d4 <_I2CRead>
 800aab2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800aaba:	23ec      	movs	r3, #236	; 0xec
 800aabc:	75fb      	strb	r3, [r7, #23]
 800aabe:	e000      	b.n	800aac2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800aac0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800aac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
 800aadc:	4613      	mov	r3, r2
 800aade:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800aae4:	4a0b      	ldr	r2, [pc, #44]	; (800ab14 <VL53L0X_WrByte+0x44>)
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800aaea:	4a0a      	ldr	r2, [pc, #40]	; (800ab14 <VL53L0X_WrByte+0x44>)
 800aaec:	78bb      	ldrb	r3, [r7, #2]
 800aaee:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	4908      	ldr	r1, [pc, #32]	; (800ab14 <VL53L0X_WrByte+0x44>)
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff ff4e 	bl	800a996 <_I2CWrite>
 800aafa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab02:	23ec      	movs	r3, #236	; 0xec
 800ab04:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ab06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	200006f0 	.word	0x200006f0

0800ab18 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
 800ab24:	4613      	mov	r3, r2
 800ab26:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ab2c:	4a0e      	ldr	r2, [pc, #56]	; (800ab68 <VL53L0X_WrWord+0x50>)
 800ab2e:	78fb      	ldrb	r3, [r7, #3]
 800ab30:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ab32:	883b      	ldrh	r3, [r7, #0]
 800ab34:	0a1b      	lsrs	r3, r3, #8
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <VL53L0X_WrWord+0x50>)
 800ab3c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ab3e:	883b      	ldrh	r3, [r7, #0]
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <VL53L0X_WrWord+0x50>)
 800ab44:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ab46:	2203      	movs	r2, #3
 800ab48:	4907      	ldr	r1, [pc, #28]	; (800ab68 <VL53L0X_WrWord+0x50>)
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff ff23 	bl	800a996 <_I2CWrite>
 800ab50:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab58:	23ec      	movs	r3, #236	; 0xec
 800ab5a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ab5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	200006f0 	.word	0x200006f0

0800ab6c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	4608      	mov	r0, r1
 800ab76:	4611      	mov	r1, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	70fb      	strb	r3, [r7, #3]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70bb      	strb	r3, [r7, #2]
 800ab82:	4613      	mov	r3, r2
 800ab84:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ab8a:	f107 020e 	add.w	r2, r7, #14
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f81e 	bl	800abd4 <VL53L0X_RdByte>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ab9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d110      	bne.n	800abc6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800aba4:	7bba      	ldrb	r2, [r7, #14]
 800aba6:	78bb      	ldrb	r3, [r7, #2]
 800aba8:	4013      	ands	r3, r2
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	787b      	ldrb	r3, [r7, #1]
 800abae:	4313      	orrs	r3, r2
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800abb4:	7bba      	ldrb	r2, [r7, #14]
 800abb6:	78fb      	ldrb	r3, [r7, #3]
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff ff88 	bl	800aad0 <VL53L0X_WrByte>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73fb      	strb	r3, [r7, #15]
 800abc4:	e000      	b.n	800abc8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800abc6:	bf00      	nop
done:
    return Status;
 800abc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	460b      	mov	r3, r1
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800abe6:	f107 030b 	add.w	r3, r7, #11
 800abea:	2201      	movs	r2, #1
 800abec:	4619      	mov	r1, r3
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff fed1 	bl	800a996 <_I2CWrite>
 800abf4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800abfc:	23ec      	movs	r3, #236	; 0xec
 800abfe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac00:	e00c      	b.n	800ac1c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ac02:	2201      	movs	r2, #1
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff fee4 	bl	800a9d4 <_I2CRead>
 800ac0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac14:	23ec      	movs	r3, #236	; 0xec
 800ac16:	75fb      	strb	r3, [r7, #23]
 800ac18:	e000      	b.n	800ac1c <VL53L0X_RdByte+0x48>
    }
done:
 800ac1a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ac1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	460b      	mov	r3, r1
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ac3a:	f107 030b 	add.w	r3, r7, #11
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4619      	mov	r1, r3
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7ff fea7 	bl	800a996 <_I2CWrite>
 800ac48:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac50:	23ec      	movs	r3, #236	; 0xec
 800ac52:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac54:	e017      	b.n	800ac86 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ac56:	2202      	movs	r2, #2
 800ac58:	490e      	ldr	r1, [pc, #56]	; (800ac94 <VL53L0X_RdWord+0x6c>)
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff feba 	bl	800a9d4 <_I2CRead>
 800ac60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac68:	23ec      	movs	r3, #236	; 0xec
 800ac6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ac6c:	e00b      	b.n	800ac86 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ac6e:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <VL53L0X_RdWord+0x6c>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <VL53L0X_RdWord+0x6c>)
 800ac7a:	785b      	ldrb	r3, [r3, #1]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4413      	add	r3, r2
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ac86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200006f0 	.word	0x200006f0

0800ac98 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	460b      	mov	r3, r1
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800acaa:	f107 030b 	add.w	r3, r7, #11
 800acae:	2201      	movs	r2, #1
 800acb0:	4619      	mov	r1, r3
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7ff fe6f 	bl	800a996 <_I2CWrite>
 800acb8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acc0:	23ec      	movs	r3, #236	; 0xec
 800acc2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800acc4:	e01b      	b.n	800acfe <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800acc6:	2204      	movs	r2, #4
 800acc8:	4910      	ldr	r1, [pc, #64]	; (800ad0c <VL53L0X_RdDWord+0x74>)
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7ff fe82 	bl	800a9d4 <_I2CRead>
 800acd0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acd8:	23ec      	movs	r3, #236	; 0xec
 800acda:	75fb      	strb	r3, [r7, #23]
        goto done;
 800acdc:	e00f      	b.n	800acfe <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800acde:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <VL53L0X_RdDWord+0x74>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	061a      	lsls	r2, r3, #24
 800ace4:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <VL53L0X_RdDWord+0x74>)
 800ace6:	785b      	ldrb	r3, [r3, #1]
 800ace8:	041b      	lsls	r3, r3, #16
 800acea:	441a      	add	r2, r3
 800acec:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <VL53L0X_RdDWord+0x74>)
 800acee:	789b      	ldrb	r3, [r3, #2]
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	4413      	add	r3, r2
 800acf4:	4a05      	ldr	r2, [pc, #20]	; (800ad0c <VL53L0X_RdDWord+0x74>)
 800acf6:	78d2      	ldrb	r2, [r2, #3]
 800acf8:	441a      	add	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800acfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200006f0 	.word	0x200006f0

0800ad10 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800ad1c:	2002      	movs	r0, #2
 800ad1e:	f7f7 fc7b 	bl	8002618 <HAL_Delay>
    return status;
 800ad22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <__assert_func>:
 800ad30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad32:	4614      	mov	r4, r2
 800ad34:	461a      	mov	r2, r3
 800ad36:	4b09      	ldr	r3, [pc, #36]	; (800ad5c <__assert_func+0x2c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	68d8      	ldr	r0, [r3, #12]
 800ad3e:	b14c      	cbz	r4, 800ad54 <__assert_func+0x24>
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <__assert_func+0x30>)
 800ad42:	9100      	str	r1, [sp, #0]
 800ad44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad48:	4906      	ldr	r1, [pc, #24]	; (800ad64 <__assert_func+0x34>)
 800ad4a:	462b      	mov	r3, r5
 800ad4c:	f000 f81c 	bl	800ad88 <fiprintf>
 800ad50:	f000 ffcc 	bl	800bcec <abort>
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <__assert_func+0x38>)
 800ad56:	461c      	mov	r4, r3
 800ad58:	e7f3      	b.n	800ad42 <__assert_func+0x12>
 800ad5a:	bf00      	nop
 800ad5c:	200002e4 	.word	0x200002e4
 800ad60:	0800d9a4 	.word	0x0800d9a4
 800ad64:	0800d9b1 	.word	0x0800d9b1
 800ad68:	0800d9df 	.word	0x0800d9df

0800ad6c <calloc>:
 800ad6c:	4b02      	ldr	r3, [pc, #8]	; (800ad78 <calloc+0xc>)
 800ad6e:	460a      	mov	r2, r1
 800ad70:	4601      	mov	r1, r0
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	f000 b854 	b.w	800ae20 <_calloc_r>
 800ad78:	200002e4 	.word	0x200002e4

0800ad7c <__errno>:
 800ad7c:	4b01      	ldr	r3, [pc, #4]	; (800ad84 <__errno+0x8>)
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	200002e4 	.word	0x200002e4

0800ad88 <fiprintf>:
 800ad88:	b40e      	push	{r1, r2, r3}
 800ad8a:	b503      	push	{r0, r1, lr}
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	ab03      	add	r3, sp, #12
 800ad90:	4805      	ldr	r0, [pc, #20]	; (800ada8 <fiprintf+0x20>)
 800ad92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad96:	6800      	ldr	r0, [r0, #0]
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	f000 f915 	bl	800afc8 <_vfiprintf_r>
 800ad9e:	b002      	add	sp, #8
 800ada0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada4:	b003      	add	sp, #12
 800ada6:	4770      	bx	lr
 800ada8:	200002e4 	.word	0x200002e4

0800adac <__libc_init_array>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	4d0d      	ldr	r5, [pc, #52]	; (800ade4 <__libc_init_array+0x38>)
 800adb0:	4c0d      	ldr	r4, [pc, #52]	; (800ade8 <__libc_init_array+0x3c>)
 800adb2:	1b64      	subs	r4, r4, r5
 800adb4:	10a4      	asrs	r4, r4, #2
 800adb6:	2600      	movs	r6, #0
 800adb8:	42a6      	cmp	r6, r4
 800adba:	d109      	bne.n	800add0 <__libc_init_array+0x24>
 800adbc:	4d0b      	ldr	r5, [pc, #44]	; (800adec <__libc_init_array+0x40>)
 800adbe:	4c0c      	ldr	r4, [pc, #48]	; (800adf0 <__libc_init_array+0x44>)
 800adc0:	f002 fd64 	bl	800d88c <_init>
 800adc4:	1b64      	subs	r4, r4, r5
 800adc6:	10a4      	asrs	r4, r4, #2
 800adc8:	2600      	movs	r6, #0
 800adca:	42a6      	cmp	r6, r4
 800adcc:	d105      	bne.n	800adda <__libc_init_array+0x2e>
 800adce:	bd70      	pop	{r4, r5, r6, pc}
 800add0:	f855 3b04 	ldr.w	r3, [r5], #4
 800add4:	4798      	blx	r3
 800add6:	3601      	adds	r6, #1
 800add8:	e7ee      	b.n	800adb8 <__libc_init_array+0xc>
 800adda:	f855 3b04 	ldr.w	r3, [r5], #4
 800adde:	4798      	blx	r3
 800ade0:	3601      	adds	r6, #1
 800ade2:	e7f2      	b.n	800adca <__libc_init_array+0x1e>
 800ade4:	0800dd88 	.word	0x0800dd88
 800ade8:	0800dd88 	.word	0x0800dd88
 800adec:	0800dd88 	.word	0x0800dd88
 800adf0:	0800dd8c 	.word	0x0800dd8c

0800adf4 <memcpy>:
 800adf4:	440a      	add	r2, r1
 800adf6:	4291      	cmp	r1, r2
 800adf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800adfc:	d100      	bne.n	800ae00 <memcpy+0xc>
 800adfe:	4770      	bx	lr
 800ae00:	b510      	push	{r4, lr}
 800ae02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	d1f9      	bne.n	800ae02 <memcpy+0xe>
 800ae0e:	bd10      	pop	{r4, pc}

0800ae10 <memset>:
 800ae10:	4402      	add	r2, r0
 800ae12:	4603      	mov	r3, r0
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d100      	bne.n	800ae1a <memset+0xa>
 800ae18:	4770      	bx	lr
 800ae1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae1e:	e7f9      	b.n	800ae14 <memset+0x4>

0800ae20 <_calloc_r>:
 800ae20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae22:	fba1 2402 	umull	r2, r4, r1, r2
 800ae26:	b94c      	cbnz	r4, 800ae3c <_calloc_r+0x1c>
 800ae28:	4611      	mov	r1, r2
 800ae2a:	9201      	str	r2, [sp, #4]
 800ae2c:	f000 f82e 	bl	800ae8c <_malloc_r>
 800ae30:	9a01      	ldr	r2, [sp, #4]
 800ae32:	4605      	mov	r5, r0
 800ae34:	b930      	cbnz	r0, 800ae44 <_calloc_r+0x24>
 800ae36:	4628      	mov	r0, r5
 800ae38:	b003      	add	sp, #12
 800ae3a:	bd30      	pop	{r4, r5, pc}
 800ae3c:	220c      	movs	r2, #12
 800ae3e:	6002      	str	r2, [r0, #0]
 800ae40:	2500      	movs	r5, #0
 800ae42:	e7f8      	b.n	800ae36 <_calloc_r+0x16>
 800ae44:	4621      	mov	r1, r4
 800ae46:	f7ff ffe3 	bl	800ae10 <memset>
 800ae4a:	e7f4      	b.n	800ae36 <_calloc_r+0x16>

0800ae4c <sbrk_aligned>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	4e0e      	ldr	r6, [pc, #56]	; (800ae88 <sbrk_aligned+0x3c>)
 800ae50:	460c      	mov	r4, r1
 800ae52:	6831      	ldr	r1, [r6, #0]
 800ae54:	4605      	mov	r5, r0
 800ae56:	b911      	cbnz	r1, 800ae5e <sbrk_aligned+0x12>
 800ae58:	f000 fe70 	bl	800bb3c <_sbrk_r>
 800ae5c:	6030      	str	r0, [r6, #0]
 800ae5e:	4621      	mov	r1, r4
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 fe6b 	bl	800bb3c <_sbrk_r>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	d00a      	beq.n	800ae80 <sbrk_aligned+0x34>
 800ae6a:	1cc4      	adds	r4, r0, #3
 800ae6c:	f024 0403 	bic.w	r4, r4, #3
 800ae70:	42a0      	cmp	r0, r4
 800ae72:	d007      	beq.n	800ae84 <sbrk_aligned+0x38>
 800ae74:	1a21      	subs	r1, r4, r0
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 fe60 	bl	800bb3c <_sbrk_r>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d101      	bne.n	800ae84 <sbrk_aligned+0x38>
 800ae80:	f04f 34ff 	mov.w	r4, #4294967295
 800ae84:	4620      	mov	r0, r4
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	20000734 	.word	0x20000734

0800ae8c <_malloc_r>:
 800ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	1ccd      	adds	r5, r1, #3
 800ae92:	f025 0503 	bic.w	r5, r5, #3
 800ae96:	3508      	adds	r5, #8
 800ae98:	2d0c      	cmp	r5, #12
 800ae9a:	bf38      	it	cc
 800ae9c:	250c      	movcc	r5, #12
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	4607      	mov	r7, r0
 800aea2:	db01      	blt.n	800aea8 <_malloc_r+0x1c>
 800aea4:	42a9      	cmp	r1, r5
 800aea6:	d905      	bls.n	800aeb4 <_malloc_r+0x28>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	2600      	movs	r6, #0
 800aeae:	4630      	mov	r0, r6
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	4e2e      	ldr	r6, [pc, #184]	; (800af70 <_malloc_r+0xe4>)
 800aeb6:	f001 ffc5 	bl	800ce44 <__malloc_lock>
 800aeba:	6833      	ldr	r3, [r6, #0]
 800aebc:	461c      	mov	r4, r3
 800aebe:	bb34      	cbnz	r4, 800af0e <_malloc_r+0x82>
 800aec0:	4629      	mov	r1, r5
 800aec2:	4638      	mov	r0, r7
 800aec4:	f7ff ffc2 	bl	800ae4c <sbrk_aligned>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	4604      	mov	r4, r0
 800aecc:	d14d      	bne.n	800af6a <_malloc_r+0xde>
 800aece:	6834      	ldr	r4, [r6, #0]
 800aed0:	4626      	mov	r6, r4
 800aed2:	2e00      	cmp	r6, #0
 800aed4:	d140      	bne.n	800af58 <_malloc_r+0xcc>
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	4631      	mov	r1, r6
 800aeda:	4638      	mov	r0, r7
 800aedc:	eb04 0803 	add.w	r8, r4, r3
 800aee0:	f000 fe2c 	bl	800bb3c <_sbrk_r>
 800aee4:	4580      	cmp	r8, r0
 800aee6:	d13a      	bne.n	800af5e <_malloc_r+0xd2>
 800aee8:	6821      	ldr	r1, [r4, #0]
 800aeea:	3503      	adds	r5, #3
 800aeec:	1a6d      	subs	r5, r5, r1
 800aeee:	f025 0503 	bic.w	r5, r5, #3
 800aef2:	3508      	adds	r5, #8
 800aef4:	2d0c      	cmp	r5, #12
 800aef6:	bf38      	it	cc
 800aef8:	250c      	movcc	r5, #12
 800aefa:	4629      	mov	r1, r5
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7ff ffa5 	bl	800ae4c <sbrk_aligned>
 800af02:	3001      	adds	r0, #1
 800af04:	d02b      	beq.n	800af5e <_malloc_r+0xd2>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	442b      	add	r3, r5
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	e00e      	b.n	800af2c <_malloc_r+0xa0>
 800af0e:	6822      	ldr	r2, [r4, #0]
 800af10:	1b52      	subs	r2, r2, r5
 800af12:	d41e      	bmi.n	800af52 <_malloc_r+0xc6>
 800af14:	2a0b      	cmp	r2, #11
 800af16:	d916      	bls.n	800af46 <_malloc_r+0xba>
 800af18:	1961      	adds	r1, r4, r5
 800af1a:	42a3      	cmp	r3, r4
 800af1c:	6025      	str	r5, [r4, #0]
 800af1e:	bf18      	it	ne
 800af20:	6059      	strne	r1, [r3, #4]
 800af22:	6863      	ldr	r3, [r4, #4]
 800af24:	bf08      	it	eq
 800af26:	6031      	streq	r1, [r6, #0]
 800af28:	5162      	str	r2, [r4, r5]
 800af2a:	604b      	str	r3, [r1, #4]
 800af2c:	4638      	mov	r0, r7
 800af2e:	f104 060b 	add.w	r6, r4, #11
 800af32:	f001 ff8d 	bl	800ce50 <__malloc_unlock>
 800af36:	f026 0607 	bic.w	r6, r6, #7
 800af3a:	1d23      	adds	r3, r4, #4
 800af3c:	1af2      	subs	r2, r6, r3
 800af3e:	d0b6      	beq.n	800aeae <_malloc_r+0x22>
 800af40:	1b9b      	subs	r3, r3, r6
 800af42:	50a3      	str	r3, [r4, r2]
 800af44:	e7b3      	b.n	800aeae <_malloc_r+0x22>
 800af46:	6862      	ldr	r2, [r4, #4]
 800af48:	42a3      	cmp	r3, r4
 800af4a:	bf0c      	ite	eq
 800af4c:	6032      	streq	r2, [r6, #0]
 800af4e:	605a      	strne	r2, [r3, #4]
 800af50:	e7ec      	b.n	800af2c <_malloc_r+0xa0>
 800af52:	4623      	mov	r3, r4
 800af54:	6864      	ldr	r4, [r4, #4]
 800af56:	e7b2      	b.n	800aebe <_malloc_r+0x32>
 800af58:	4634      	mov	r4, r6
 800af5a:	6876      	ldr	r6, [r6, #4]
 800af5c:	e7b9      	b.n	800aed2 <_malloc_r+0x46>
 800af5e:	230c      	movs	r3, #12
 800af60:	603b      	str	r3, [r7, #0]
 800af62:	4638      	mov	r0, r7
 800af64:	f001 ff74 	bl	800ce50 <__malloc_unlock>
 800af68:	e7a1      	b.n	800aeae <_malloc_r+0x22>
 800af6a:	6025      	str	r5, [r4, #0]
 800af6c:	e7de      	b.n	800af2c <_malloc_r+0xa0>
 800af6e:	bf00      	nop
 800af70:	20000730 	.word	0x20000730

0800af74 <__sfputc_r>:
 800af74:	6893      	ldr	r3, [r2, #8]
 800af76:	3b01      	subs	r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	b410      	push	{r4}
 800af7c:	6093      	str	r3, [r2, #8]
 800af7e:	da08      	bge.n	800af92 <__sfputc_r+0x1e>
 800af80:	6994      	ldr	r4, [r2, #24]
 800af82:	42a3      	cmp	r3, r4
 800af84:	db01      	blt.n	800af8a <__sfputc_r+0x16>
 800af86:	290a      	cmp	r1, #10
 800af88:	d103      	bne.n	800af92 <__sfputc_r+0x1e>
 800af8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af8e:	f000 bded 	b.w	800bb6c <__swbuf_r>
 800af92:	6813      	ldr	r3, [r2, #0]
 800af94:	1c58      	adds	r0, r3, #1
 800af96:	6010      	str	r0, [r2, #0]
 800af98:	7019      	strb	r1, [r3, #0]
 800af9a:	4608      	mov	r0, r1
 800af9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <__sfputs_r>:
 800afa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa4:	4606      	mov	r6, r0
 800afa6:	460f      	mov	r7, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	18d5      	adds	r5, r2, r3
 800afac:	42ac      	cmp	r4, r5
 800afae:	d101      	bne.n	800afb4 <__sfputs_r+0x12>
 800afb0:	2000      	movs	r0, #0
 800afb2:	e007      	b.n	800afc4 <__sfputs_r+0x22>
 800afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb8:	463a      	mov	r2, r7
 800afba:	4630      	mov	r0, r6
 800afbc:	f7ff ffda 	bl	800af74 <__sfputc_r>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d1f3      	bne.n	800afac <__sfputs_r+0xa>
 800afc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afc8 <_vfiprintf_r>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	460d      	mov	r5, r1
 800afce:	b09d      	sub	sp, #116	; 0x74
 800afd0:	4614      	mov	r4, r2
 800afd2:	4698      	mov	r8, r3
 800afd4:	4606      	mov	r6, r0
 800afd6:	b118      	cbz	r0, 800afe0 <_vfiprintf_r+0x18>
 800afd8:	6983      	ldr	r3, [r0, #24]
 800afda:	b90b      	cbnz	r3, 800afe0 <_vfiprintf_r+0x18>
 800afdc:	f001 fe20 	bl	800cc20 <__sinit>
 800afe0:	4b89      	ldr	r3, [pc, #548]	; (800b208 <_vfiprintf_r+0x240>)
 800afe2:	429d      	cmp	r5, r3
 800afe4:	d11b      	bne.n	800b01e <_vfiprintf_r+0x56>
 800afe6:	6875      	ldr	r5, [r6, #4]
 800afe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afea:	07d9      	lsls	r1, r3, #31
 800afec:	d405      	bmi.n	800affa <_vfiprintf_r+0x32>
 800afee:	89ab      	ldrh	r3, [r5, #12]
 800aff0:	059a      	lsls	r2, r3, #22
 800aff2:	d402      	bmi.n	800affa <_vfiprintf_r+0x32>
 800aff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff6:	f001 feb6 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	071b      	lsls	r3, r3, #28
 800affe:	d501      	bpl.n	800b004 <_vfiprintf_r+0x3c>
 800b000:	692b      	ldr	r3, [r5, #16]
 800b002:	b9eb      	cbnz	r3, 800b040 <_vfiprintf_r+0x78>
 800b004:	4629      	mov	r1, r5
 800b006:	4630      	mov	r0, r6
 800b008:	f000 fe02 	bl	800bc10 <__swsetup_r>
 800b00c:	b1c0      	cbz	r0, 800b040 <_vfiprintf_r+0x78>
 800b00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b010:	07dc      	lsls	r4, r3, #31
 800b012:	d50e      	bpl.n	800b032 <_vfiprintf_r+0x6a>
 800b014:	f04f 30ff 	mov.w	r0, #4294967295
 800b018:	b01d      	add	sp, #116	; 0x74
 800b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01e:	4b7b      	ldr	r3, [pc, #492]	; (800b20c <_vfiprintf_r+0x244>)
 800b020:	429d      	cmp	r5, r3
 800b022:	d101      	bne.n	800b028 <_vfiprintf_r+0x60>
 800b024:	68b5      	ldr	r5, [r6, #8]
 800b026:	e7df      	b.n	800afe8 <_vfiprintf_r+0x20>
 800b028:	4b79      	ldr	r3, [pc, #484]	; (800b210 <_vfiprintf_r+0x248>)
 800b02a:	429d      	cmp	r5, r3
 800b02c:	bf08      	it	eq
 800b02e:	68f5      	ldreq	r5, [r6, #12]
 800b030:	e7da      	b.n	800afe8 <_vfiprintf_r+0x20>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	0598      	lsls	r0, r3, #22
 800b036:	d4ed      	bmi.n	800b014 <_vfiprintf_r+0x4c>
 800b038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b03a:	f001 fe95 	bl	800cd68 <__retarget_lock_release_recursive>
 800b03e:	e7e9      	b.n	800b014 <_vfiprintf_r+0x4c>
 800b040:	2300      	movs	r3, #0
 800b042:	9309      	str	r3, [sp, #36]	; 0x24
 800b044:	2320      	movs	r3, #32
 800b046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b04e:	2330      	movs	r3, #48	; 0x30
 800b050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b214 <_vfiprintf_r+0x24c>
 800b054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b058:	f04f 0901 	mov.w	r9, #1
 800b05c:	4623      	mov	r3, r4
 800b05e:	469a      	mov	sl, r3
 800b060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b064:	b10a      	cbz	r2, 800b06a <_vfiprintf_r+0xa2>
 800b066:	2a25      	cmp	r2, #37	; 0x25
 800b068:	d1f9      	bne.n	800b05e <_vfiprintf_r+0x96>
 800b06a:	ebba 0b04 	subs.w	fp, sl, r4
 800b06e:	d00b      	beq.n	800b088 <_vfiprintf_r+0xc0>
 800b070:	465b      	mov	r3, fp
 800b072:	4622      	mov	r2, r4
 800b074:	4629      	mov	r1, r5
 800b076:	4630      	mov	r0, r6
 800b078:	f7ff ff93 	bl	800afa2 <__sfputs_r>
 800b07c:	3001      	adds	r0, #1
 800b07e:	f000 80aa 	beq.w	800b1d6 <_vfiprintf_r+0x20e>
 800b082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b084:	445a      	add	r2, fp
 800b086:	9209      	str	r2, [sp, #36]	; 0x24
 800b088:	f89a 3000 	ldrb.w	r3, [sl]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 80a2 	beq.w	800b1d6 <_vfiprintf_r+0x20e>
 800b092:	2300      	movs	r3, #0
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09c:	f10a 0a01 	add.w	sl, sl, #1
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b0aa:	4654      	mov	r4, sl
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b2:	4858      	ldr	r0, [pc, #352]	; (800b214 <_vfiprintf_r+0x24c>)
 800b0b4:	f7f5 f89c 	bl	80001f0 <memchr>
 800b0b8:	9a04      	ldr	r2, [sp, #16]
 800b0ba:	b9d8      	cbnz	r0, 800b0f4 <_vfiprintf_r+0x12c>
 800b0bc:	06d1      	lsls	r1, r2, #27
 800b0be:	bf44      	itt	mi
 800b0c0:	2320      	movmi	r3, #32
 800b0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c6:	0713      	lsls	r3, r2, #28
 800b0c8:	bf44      	itt	mi
 800b0ca:	232b      	movmi	r3, #43	; 0x2b
 800b0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d6:	d015      	beq.n	800b104 <_vfiprintf_r+0x13c>
 800b0d8:	9a07      	ldr	r2, [sp, #28]
 800b0da:	4654      	mov	r4, sl
 800b0dc:	2000      	movs	r0, #0
 800b0de:	f04f 0c0a 	mov.w	ip, #10
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e8:	3b30      	subs	r3, #48	; 0x30
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	d94e      	bls.n	800b18c <_vfiprintf_r+0x1c4>
 800b0ee:	b1b0      	cbz	r0, 800b11e <_vfiprintf_r+0x156>
 800b0f0:	9207      	str	r2, [sp, #28]
 800b0f2:	e014      	b.n	800b11e <_vfiprintf_r+0x156>
 800b0f4:	eba0 0308 	sub.w	r3, r0, r8
 800b0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	46a2      	mov	sl, r4
 800b102:	e7d2      	b.n	800b0aa <_vfiprintf_r+0xe2>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1d19      	adds	r1, r3, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	9103      	str	r1, [sp, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfbb      	ittet	lt
 800b110:	425b      	neglt	r3, r3
 800b112:	f042 0202 	orrlt.w	r2, r2, #2
 800b116:	9307      	strge	r3, [sp, #28]
 800b118:	9307      	strlt	r3, [sp, #28]
 800b11a:	bfb8      	it	lt
 800b11c:	9204      	strlt	r2, [sp, #16]
 800b11e:	7823      	ldrb	r3, [r4, #0]
 800b120:	2b2e      	cmp	r3, #46	; 0x2e
 800b122:	d10c      	bne.n	800b13e <_vfiprintf_r+0x176>
 800b124:	7863      	ldrb	r3, [r4, #1]
 800b126:	2b2a      	cmp	r3, #42	; 0x2a
 800b128:	d135      	bne.n	800b196 <_vfiprintf_r+0x1ce>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	9203      	str	r2, [sp, #12]
 800b132:	2b00      	cmp	r3, #0
 800b134:	bfb8      	it	lt
 800b136:	f04f 33ff 	movlt.w	r3, #4294967295
 800b13a:	3402      	adds	r4, #2
 800b13c:	9305      	str	r3, [sp, #20]
 800b13e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b224 <_vfiprintf_r+0x25c>
 800b142:	7821      	ldrb	r1, [r4, #0]
 800b144:	2203      	movs	r2, #3
 800b146:	4650      	mov	r0, sl
 800b148:	f7f5 f852 	bl	80001f0 <memchr>
 800b14c:	b140      	cbz	r0, 800b160 <_vfiprintf_r+0x198>
 800b14e:	2340      	movs	r3, #64	; 0x40
 800b150:	eba0 000a 	sub.w	r0, r0, sl
 800b154:	fa03 f000 	lsl.w	r0, r3, r0
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	4303      	orrs	r3, r0
 800b15c:	3401      	adds	r4, #1
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b164:	482c      	ldr	r0, [pc, #176]	; (800b218 <_vfiprintf_r+0x250>)
 800b166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b16a:	2206      	movs	r2, #6
 800b16c:	f7f5 f840 	bl	80001f0 <memchr>
 800b170:	2800      	cmp	r0, #0
 800b172:	d03f      	beq.n	800b1f4 <_vfiprintf_r+0x22c>
 800b174:	4b29      	ldr	r3, [pc, #164]	; (800b21c <_vfiprintf_r+0x254>)
 800b176:	bb1b      	cbnz	r3, 800b1c0 <_vfiprintf_r+0x1f8>
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	3307      	adds	r3, #7
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	3308      	adds	r3, #8
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b186:	443b      	add	r3, r7
 800b188:	9309      	str	r3, [sp, #36]	; 0x24
 800b18a:	e767      	b.n	800b05c <_vfiprintf_r+0x94>
 800b18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b190:	460c      	mov	r4, r1
 800b192:	2001      	movs	r0, #1
 800b194:	e7a5      	b.n	800b0e2 <_vfiprintf_r+0x11a>
 800b196:	2300      	movs	r3, #0
 800b198:	3401      	adds	r4, #1
 800b19a:	9305      	str	r3, [sp, #20]
 800b19c:	4619      	mov	r1, r3
 800b19e:	f04f 0c0a 	mov.w	ip, #10
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a8:	3a30      	subs	r2, #48	; 0x30
 800b1aa:	2a09      	cmp	r2, #9
 800b1ac:	d903      	bls.n	800b1b6 <_vfiprintf_r+0x1ee>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0c5      	beq.n	800b13e <_vfiprintf_r+0x176>
 800b1b2:	9105      	str	r1, [sp, #20]
 800b1b4:	e7c3      	b.n	800b13e <_vfiprintf_r+0x176>
 800b1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e7f0      	b.n	800b1a2 <_vfiprintf_r+0x1da>
 800b1c0:	ab03      	add	r3, sp, #12
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	462a      	mov	r2, r5
 800b1c6:	4b16      	ldr	r3, [pc, #88]	; (800b220 <_vfiprintf_r+0x258>)
 800b1c8:	a904      	add	r1, sp, #16
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f000 f8cc 	bl	800b368 <_printf_float>
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	1c78      	adds	r0, r7, #1
 800b1d4:	d1d6      	bne.n	800b184 <_vfiprintf_r+0x1bc>
 800b1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1d8:	07d9      	lsls	r1, r3, #31
 800b1da:	d405      	bmi.n	800b1e8 <_vfiprintf_r+0x220>
 800b1dc:	89ab      	ldrh	r3, [r5, #12]
 800b1de:	059a      	lsls	r2, r3, #22
 800b1e0:	d402      	bmi.n	800b1e8 <_vfiprintf_r+0x220>
 800b1e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1e4:	f001 fdc0 	bl	800cd68 <__retarget_lock_release_recursive>
 800b1e8:	89ab      	ldrh	r3, [r5, #12]
 800b1ea:	065b      	lsls	r3, r3, #25
 800b1ec:	f53f af12 	bmi.w	800b014 <_vfiprintf_r+0x4c>
 800b1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1f2:	e711      	b.n	800b018 <_vfiprintf_r+0x50>
 800b1f4:	ab03      	add	r3, sp, #12
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	4b09      	ldr	r3, [pc, #36]	; (800b220 <_vfiprintf_r+0x258>)
 800b1fc:	a904      	add	r1, sp, #16
 800b1fe:	4630      	mov	r0, r6
 800b200:	f000 fb56 	bl	800b8b0 <_printf_i>
 800b204:	e7e4      	b.n	800b1d0 <_vfiprintf_r+0x208>
 800b206:	bf00      	nop
 800b208:	0800dadc 	.word	0x0800dadc
 800b20c:	0800dafc 	.word	0x0800dafc
 800b210:	0800dabc 	.word	0x0800dabc
 800b214:	0800d9e4 	.word	0x0800d9e4
 800b218:	0800d9ee 	.word	0x0800d9ee
 800b21c:	0800b369 	.word	0x0800b369
 800b220:	0800afa3 	.word	0x0800afa3
 800b224:	0800d9ea 	.word	0x0800d9ea

0800b228 <__cvt>:
 800b228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b22c:	ec55 4b10 	vmov	r4, r5, d0
 800b230:	2d00      	cmp	r5, #0
 800b232:	460e      	mov	r6, r1
 800b234:	4619      	mov	r1, r3
 800b236:	462b      	mov	r3, r5
 800b238:	bfbb      	ittet	lt
 800b23a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b23e:	461d      	movlt	r5, r3
 800b240:	2300      	movge	r3, #0
 800b242:	232d      	movlt	r3, #45	; 0x2d
 800b244:	700b      	strb	r3, [r1, #0]
 800b246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b24c:	4691      	mov	r9, r2
 800b24e:	f023 0820 	bic.w	r8, r3, #32
 800b252:	bfbc      	itt	lt
 800b254:	4622      	movlt	r2, r4
 800b256:	4614      	movlt	r4, r2
 800b258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b25c:	d005      	beq.n	800b26a <__cvt+0x42>
 800b25e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b262:	d100      	bne.n	800b266 <__cvt+0x3e>
 800b264:	3601      	adds	r6, #1
 800b266:	2102      	movs	r1, #2
 800b268:	e000      	b.n	800b26c <__cvt+0x44>
 800b26a:	2103      	movs	r1, #3
 800b26c:	ab03      	add	r3, sp, #12
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	ab02      	add	r3, sp, #8
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	ec45 4b10 	vmov	d0, r4, r5
 800b278:	4653      	mov	r3, sl
 800b27a:	4632      	mov	r2, r6
 800b27c:	f000 fdc8 	bl	800be10 <_dtoa_r>
 800b280:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b284:	4607      	mov	r7, r0
 800b286:	d102      	bne.n	800b28e <__cvt+0x66>
 800b288:	f019 0f01 	tst.w	r9, #1
 800b28c:	d022      	beq.n	800b2d4 <__cvt+0xac>
 800b28e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b292:	eb07 0906 	add.w	r9, r7, r6
 800b296:	d110      	bne.n	800b2ba <__cvt+0x92>
 800b298:	783b      	ldrb	r3, [r7, #0]
 800b29a:	2b30      	cmp	r3, #48	; 0x30
 800b29c:	d10a      	bne.n	800b2b4 <__cvt+0x8c>
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	f7f5 fc17 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2aa:	b918      	cbnz	r0, 800b2b4 <__cvt+0x8c>
 800b2ac:	f1c6 0601 	rsb	r6, r6, #1
 800b2b0:	f8ca 6000 	str.w	r6, [sl]
 800b2b4:	f8da 3000 	ldr.w	r3, [sl]
 800b2b8:	4499      	add	r9, r3
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f5 fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2c6:	b108      	cbz	r0, 800b2cc <__cvt+0xa4>
 800b2c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2cc:	2230      	movs	r2, #48	; 0x30
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	454b      	cmp	r3, r9
 800b2d2:	d307      	bcc.n	800b2e4 <__cvt+0xbc>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2d8:	1bdb      	subs	r3, r3, r7
 800b2da:	4638      	mov	r0, r7
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	b004      	add	sp, #16
 800b2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e4:	1c59      	adds	r1, r3, #1
 800b2e6:	9103      	str	r1, [sp, #12]
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e7f0      	b.n	800b2ce <__cvt+0xa6>

0800b2ec <__exponent>:
 800b2ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2900      	cmp	r1, #0
 800b2f2:	bfb8      	it	lt
 800b2f4:	4249      	neglt	r1, r1
 800b2f6:	f803 2b02 	strb.w	r2, [r3], #2
 800b2fa:	bfb4      	ite	lt
 800b2fc:	222d      	movlt	r2, #45	; 0x2d
 800b2fe:	222b      	movge	r2, #43	; 0x2b
 800b300:	2909      	cmp	r1, #9
 800b302:	7042      	strb	r2, [r0, #1]
 800b304:	dd2a      	ble.n	800b35c <__exponent+0x70>
 800b306:	f10d 0407 	add.w	r4, sp, #7
 800b30a:	46a4      	mov	ip, r4
 800b30c:	270a      	movs	r7, #10
 800b30e:	46a6      	mov	lr, r4
 800b310:	460a      	mov	r2, r1
 800b312:	fb91 f6f7 	sdiv	r6, r1, r7
 800b316:	fb07 1516 	mls	r5, r7, r6, r1
 800b31a:	3530      	adds	r5, #48	; 0x30
 800b31c:	2a63      	cmp	r2, #99	; 0x63
 800b31e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b322:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b326:	4631      	mov	r1, r6
 800b328:	dcf1      	bgt.n	800b30e <__exponent+0x22>
 800b32a:	3130      	adds	r1, #48	; 0x30
 800b32c:	f1ae 0502 	sub.w	r5, lr, #2
 800b330:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b334:	1c44      	adds	r4, r0, #1
 800b336:	4629      	mov	r1, r5
 800b338:	4561      	cmp	r1, ip
 800b33a:	d30a      	bcc.n	800b352 <__exponent+0x66>
 800b33c:	f10d 0209 	add.w	r2, sp, #9
 800b340:	eba2 020e 	sub.w	r2, r2, lr
 800b344:	4565      	cmp	r5, ip
 800b346:	bf88      	it	hi
 800b348:	2200      	movhi	r2, #0
 800b34a:	4413      	add	r3, r2
 800b34c:	1a18      	subs	r0, r3, r0
 800b34e:	b003      	add	sp, #12
 800b350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b356:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b35a:	e7ed      	b.n	800b338 <__exponent+0x4c>
 800b35c:	2330      	movs	r3, #48	; 0x30
 800b35e:	3130      	adds	r1, #48	; 0x30
 800b360:	7083      	strb	r3, [r0, #2]
 800b362:	70c1      	strb	r1, [r0, #3]
 800b364:	1d03      	adds	r3, r0, #4
 800b366:	e7f1      	b.n	800b34c <__exponent+0x60>

0800b368 <_printf_float>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	ed2d 8b02 	vpush	{d8}
 800b370:	b08d      	sub	sp, #52	; 0x34
 800b372:	460c      	mov	r4, r1
 800b374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b378:	4616      	mov	r6, r2
 800b37a:	461f      	mov	r7, r3
 800b37c:	4605      	mov	r5, r0
 800b37e:	f001 fced 	bl	800cd5c <_localeconv_r>
 800b382:	f8d0 a000 	ldr.w	sl, [r0]
 800b386:	4650      	mov	r0, sl
 800b388:	f7f4 ff2a 	bl	80001e0 <strlen>
 800b38c:	2300      	movs	r3, #0
 800b38e:	930a      	str	r3, [sp, #40]	; 0x28
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	f8d8 3000 	ldr.w	r3, [r8]
 800b398:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b39c:	3307      	adds	r3, #7
 800b39e:	f023 0307 	bic.w	r3, r3, #7
 800b3a2:	f103 0208 	add.w	r2, r3, #8
 800b3a6:	f8c8 2000 	str.w	r2, [r8]
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b3b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b3b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3ba:	9307      	str	r3, [sp, #28]
 800b3bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3c0:	ee08 0a10 	vmov	s16, r0
 800b3c4:	4b9f      	ldr	r3, [pc, #636]	; (800b644 <_printf_float+0x2dc>)
 800b3c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ce:	f7f5 fbb5 	bl	8000b3c <__aeabi_dcmpun>
 800b3d2:	bb88      	cbnz	r0, 800b438 <_printf_float+0xd0>
 800b3d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3d8:	4b9a      	ldr	r3, [pc, #616]	; (800b644 <_printf_float+0x2dc>)
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295
 800b3de:	f7f5 fb8f 	bl	8000b00 <__aeabi_dcmple>
 800b3e2:	bb48      	cbnz	r0, 800b438 <_printf_float+0xd0>
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	f7f5 fb7e 	bl	8000aec <__aeabi_dcmplt>
 800b3f0:	b110      	cbz	r0, 800b3f8 <_printf_float+0x90>
 800b3f2:	232d      	movs	r3, #45	; 0x2d
 800b3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3f8:	4b93      	ldr	r3, [pc, #588]	; (800b648 <_printf_float+0x2e0>)
 800b3fa:	4894      	ldr	r0, [pc, #592]	; (800b64c <_printf_float+0x2e4>)
 800b3fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b400:	bf94      	ite	ls
 800b402:	4698      	movls	r8, r3
 800b404:	4680      	movhi	r8, r0
 800b406:	2303      	movs	r3, #3
 800b408:	6123      	str	r3, [r4, #16]
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	f023 0204 	bic.w	r2, r3, #4
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	f04f 0900 	mov.w	r9, #0
 800b416:	9700      	str	r7, [sp, #0]
 800b418:	4633      	mov	r3, r6
 800b41a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 f9d8 	bl	800b7d4 <_printf_common>
 800b424:	3001      	adds	r0, #1
 800b426:	f040 8090 	bne.w	800b54a <_printf_float+0x1e2>
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	b00d      	add	sp, #52	; 0x34
 800b430:	ecbd 8b02 	vpop	{d8}
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	4642      	mov	r2, r8
 800b43a:	464b      	mov	r3, r9
 800b43c:	4640      	mov	r0, r8
 800b43e:	4649      	mov	r1, r9
 800b440:	f7f5 fb7c 	bl	8000b3c <__aeabi_dcmpun>
 800b444:	b140      	cbz	r0, 800b458 <_printf_float+0xf0>
 800b446:	464b      	mov	r3, r9
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bfbc      	itt	lt
 800b44c:	232d      	movlt	r3, #45	; 0x2d
 800b44e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b452:	487f      	ldr	r0, [pc, #508]	; (800b650 <_printf_float+0x2e8>)
 800b454:	4b7f      	ldr	r3, [pc, #508]	; (800b654 <_printf_float+0x2ec>)
 800b456:	e7d1      	b.n	800b3fc <_printf_float+0x94>
 800b458:	6863      	ldr	r3, [r4, #4]
 800b45a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b45e:	9206      	str	r2, [sp, #24]
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	d13f      	bne.n	800b4e4 <_printf_float+0x17c>
 800b464:	2306      	movs	r3, #6
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	6861      	ldr	r1, [r4, #4]
 800b46c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b470:	2300      	movs	r3, #0
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	ab0a      	add	r3, sp, #40	; 0x28
 800b476:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b47a:	ab09      	add	r3, sp, #36	; 0x24
 800b47c:	ec49 8b10 	vmov	d0, r8, r9
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	6022      	str	r2, [r4, #0]
 800b484:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b488:	4628      	mov	r0, r5
 800b48a:	f7ff fecd 	bl	800b228 <__cvt>
 800b48e:	9b06      	ldr	r3, [sp, #24]
 800b490:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b492:	2b47      	cmp	r3, #71	; 0x47
 800b494:	4680      	mov	r8, r0
 800b496:	d108      	bne.n	800b4aa <_printf_float+0x142>
 800b498:	1cc8      	adds	r0, r1, #3
 800b49a:	db02      	blt.n	800b4a2 <_printf_float+0x13a>
 800b49c:	6863      	ldr	r3, [r4, #4]
 800b49e:	4299      	cmp	r1, r3
 800b4a0:	dd41      	ble.n	800b526 <_printf_float+0x1be>
 800b4a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b4a6:	fa5f fb8b 	uxtb.w	fp, fp
 800b4aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4ae:	d820      	bhi.n	800b4f2 <_printf_float+0x18a>
 800b4b0:	3901      	subs	r1, #1
 800b4b2:	465a      	mov	r2, fp
 800b4b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b4b8:	9109      	str	r1, [sp, #36]	; 0x24
 800b4ba:	f7ff ff17 	bl	800b2ec <__exponent>
 800b4be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4c0:	1813      	adds	r3, r2, r0
 800b4c2:	2a01      	cmp	r2, #1
 800b4c4:	4681      	mov	r9, r0
 800b4c6:	6123      	str	r3, [r4, #16]
 800b4c8:	dc02      	bgt.n	800b4d0 <_printf_float+0x168>
 800b4ca:	6822      	ldr	r2, [r4, #0]
 800b4cc:	07d2      	lsls	r2, r2, #31
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_float+0x16c>
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d09c      	beq.n	800b416 <_printf_float+0xae>
 800b4dc:	232d      	movs	r3, #45	; 0x2d
 800b4de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e2:	e798      	b.n	800b416 <_printf_float+0xae>
 800b4e4:	9a06      	ldr	r2, [sp, #24]
 800b4e6:	2a47      	cmp	r2, #71	; 0x47
 800b4e8:	d1be      	bne.n	800b468 <_printf_float+0x100>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1bc      	bne.n	800b468 <_printf_float+0x100>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e7b9      	b.n	800b466 <_printf_float+0xfe>
 800b4f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b4f6:	d118      	bne.n	800b52a <_printf_float+0x1c2>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	6863      	ldr	r3, [r4, #4]
 800b4fc:	dd0b      	ble.n	800b516 <_printf_float+0x1ae>
 800b4fe:	6121      	str	r1, [r4, #16]
 800b500:	b913      	cbnz	r3, 800b508 <_printf_float+0x1a0>
 800b502:	6822      	ldr	r2, [r4, #0]
 800b504:	07d0      	lsls	r0, r2, #31
 800b506:	d502      	bpl.n	800b50e <_printf_float+0x1a6>
 800b508:	3301      	adds	r3, #1
 800b50a:	440b      	add	r3, r1
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b510:	f04f 0900 	mov.w	r9, #0
 800b514:	e7de      	b.n	800b4d4 <_printf_float+0x16c>
 800b516:	b913      	cbnz	r3, 800b51e <_printf_float+0x1b6>
 800b518:	6822      	ldr	r2, [r4, #0]
 800b51a:	07d2      	lsls	r2, r2, #31
 800b51c:	d501      	bpl.n	800b522 <_printf_float+0x1ba>
 800b51e:	3302      	adds	r3, #2
 800b520:	e7f4      	b.n	800b50c <_printf_float+0x1a4>
 800b522:	2301      	movs	r3, #1
 800b524:	e7f2      	b.n	800b50c <_printf_float+0x1a4>
 800b526:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b52c:	4299      	cmp	r1, r3
 800b52e:	db05      	blt.n	800b53c <_printf_float+0x1d4>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	6121      	str	r1, [r4, #16]
 800b534:	07d8      	lsls	r0, r3, #31
 800b536:	d5ea      	bpl.n	800b50e <_printf_float+0x1a6>
 800b538:	1c4b      	adds	r3, r1, #1
 800b53a:	e7e7      	b.n	800b50c <_printf_float+0x1a4>
 800b53c:	2900      	cmp	r1, #0
 800b53e:	bfd4      	ite	le
 800b540:	f1c1 0202 	rsble	r2, r1, #2
 800b544:	2201      	movgt	r2, #1
 800b546:	4413      	add	r3, r2
 800b548:	e7e0      	b.n	800b50c <_printf_float+0x1a4>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	055a      	lsls	r2, r3, #21
 800b54e:	d407      	bmi.n	800b560 <_printf_float+0x1f8>
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	4642      	mov	r2, r8
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	d12c      	bne.n	800b5b8 <_printf_float+0x250>
 800b55e:	e764      	b.n	800b42a <_printf_float+0xc2>
 800b560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b564:	f240 80e0 	bls.w	800b728 <_printf_float+0x3c0>
 800b568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b56c:	2200      	movs	r2, #0
 800b56e:	2300      	movs	r3, #0
 800b570:	f7f5 fab2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b574:	2800      	cmp	r0, #0
 800b576:	d034      	beq.n	800b5e2 <_printf_float+0x27a>
 800b578:	4a37      	ldr	r2, [pc, #220]	; (800b658 <_printf_float+0x2f0>)
 800b57a:	2301      	movs	r3, #1
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	f43f af51 	beq.w	800b42a <_printf_float+0xc2>
 800b588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b58c:	429a      	cmp	r2, r3
 800b58e:	db02      	blt.n	800b596 <_printf_float+0x22e>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	07d8      	lsls	r0, r3, #31
 800b594:	d510      	bpl.n	800b5b8 <_printf_float+0x250>
 800b596:	ee18 3a10 	vmov	r3, s16
 800b59a:	4652      	mov	r2, sl
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b8      	blx	r7
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f43f af41 	beq.w	800b42a <_printf_float+0xc2>
 800b5a8:	f04f 0800 	mov.w	r8, #0
 800b5ac:	f104 091a 	add.w	r9, r4, #26
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	4543      	cmp	r3, r8
 800b5b6:	dc09      	bgt.n	800b5cc <_printf_float+0x264>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	079b      	lsls	r3, r3, #30
 800b5bc:	f100 8105 	bmi.w	800b7ca <_printf_float+0x462>
 800b5c0:	68e0      	ldr	r0, [r4, #12]
 800b5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5c4:	4298      	cmp	r0, r3
 800b5c6:	bfb8      	it	lt
 800b5c8:	4618      	movlt	r0, r3
 800b5ca:	e730      	b.n	800b42e <_printf_float+0xc6>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	464a      	mov	r2, r9
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	47b8      	blx	r7
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	f43f af27 	beq.w	800b42a <_printf_float+0xc2>
 800b5dc:	f108 0801 	add.w	r8, r8, #1
 800b5e0:	e7e6      	b.n	800b5b0 <_printf_float+0x248>
 800b5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dc39      	bgt.n	800b65c <_printf_float+0x2f4>
 800b5e8:	4a1b      	ldr	r2, [pc, #108]	; (800b658 <_printf_float+0x2f0>)
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	47b8      	blx	r7
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	f43f af19 	beq.w	800b42a <_printf_float+0xc2>
 800b5f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	d102      	bne.n	800b606 <_printf_float+0x29e>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	07d9      	lsls	r1, r3, #31
 800b604:	d5d8      	bpl.n	800b5b8 <_printf_float+0x250>
 800b606:	ee18 3a10 	vmov	r3, s16
 800b60a:	4652      	mov	r2, sl
 800b60c:	4631      	mov	r1, r6
 800b60e:	4628      	mov	r0, r5
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	f43f af09 	beq.w	800b42a <_printf_float+0xc2>
 800b618:	f04f 0900 	mov.w	r9, #0
 800b61c:	f104 0a1a 	add.w	sl, r4, #26
 800b620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b622:	425b      	negs	r3, r3
 800b624:	454b      	cmp	r3, r9
 800b626:	dc01      	bgt.n	800b62c <_printf_float+0x2c4>
 800b628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62a:	e792      	b.n	800b552 <_printf_float+0x1ea>
 800b62c:	2301      	movs	r3, #1
 800b62e:	4652      	mov	r2, sl
 800b630:	4631      	mov	r1, r6
 800b632:	4628      	mov	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	3001      	adds	r0, #1
 800b638:	f43f aef7 	beq.w	800b42a <_printf_float+0xc2>
 800b63c:	f109 0901 	add.w	r9, r9, #1
 800b640:	e7ee      	b.n	800b620 <_printf_float+0x2b8>
 800b642:	bf00      	nop
 800b644:	7fefffff 	.word	0x7fefffff
 800b648:	0800d9f5 	.word	0x0800d9f5
 800b64c:	0800d9f9 	.word	0x0800d9f9
 800b650:	0800da01 	.word	0x0800da01
 800b654:	0800d9fd 	.word	0x0800d9fd
 800b658:	0800da05 	.word	0x0800da05
 800b65c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b65e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b660:	429a      	cmp	r2, r3
 800b662:	bfa8      	it	ge
 800b664:	461a      	movge	r2, r3
 800b666:	2a00      	cmp	r2, #0
 800b668:	4691      	mov	r9, r2
 800b66a:	dc37      	bgt.n	800b6dc <_printf_float+0x374>
 800b66c:	f04f 0b00 	mov.w	fp, #0
 800b670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b674:	f104 021a 	add.w	r2, r4, #26
 800b678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	eba3 0309 	sub.w	r3, r3, r9
 800b680:	455b      	cmp	r3, fp
 800b682:	dc33      	bgt.n	800b6ec <_printf_float+0x384>
 800b684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b688:	429a      	cmp	r2, r3
 800b68a:	db3b      	blt.n	800b704 <_printf_float+0x39c>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	07da      	lsls	r2, r3, #31
 800b690:	d438      	bmi.n	800b704 <_printf_float+0x39c>
 800b692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b694:	9a05      	ldr	r2, [sp, #20]
 800b696:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b698:	1a9a      	subs	r2, r3, r2
 800b69a:	eba3 0901 	sub.w	r9, r3, r1
 800b69e:	4591      	cmp	r9, r2
 800b6a0:	bfa8      	it	ge
 800b6a2:	4691      	movge	r9, r2
 800b6a4:	f1b9 0f00 	cmp.w	r9, #0
 800b6a8:	dc35      	bgt.n	800b716 <_printf_float+0x3ae>
 800b6aa:	f04f 0800 	mov.w	r8, #0
 800b6ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6b2:	f104 0a1a 	add.w	sl, r4, #26
 800b6b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	eba3 0309 	sub.w	r3, r3, r9
 800b6c0:	4543      	cmp	r3, r8
 800b6c2:	f77f af79 	ble.w	800b5b8 <_printf_float+0x250>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f aeaa 	beq.w	800b42a <_printf_float+0xc2>
 800b6d6:	f108 0801 	add.w	r8, r8, #1
 800b6da:	e7ec      	b.n	800b6b6 <_printf_float+0x34e>
 800b6dc:	4613      	mov	r3, r2
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	47b8      	blx	r7
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d1c0      	bne.n	800b66c <_printf_float+0x304>
 800b6ea:	e69e      	b.n	800b42a <_printf_float+0xc2>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	9205      	str	r2, [sp, #20]
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f ae97 	beq.w	800b42a <_printf_float+0xc2>
 800b6fc:	9a05      	ldr	r2, [sp, #20]
 800b6fe:	f10b 0b01 	add.w	fp, fp, #1
 800b702:	e7b9      	b.n	800b678 <_printf_float+0x310>
 800b704:	ee18 3a10 	vmov	r3, s16
 800b708:	4652      	mov	r2, sl
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	d1be      	bne.n	800b692 <_printf_float+0x32a>
 800b714:	e689      	b.n	800b42a <_printf_float+0xc2>
 800b716:	9a05      	ldr	r2, [sp, #20]
 800b718:	464b      	mov	r3, r9
 800b71a:	4442      	add	r2, r8
 800b71c:	4631      	mov	r1, r6
 800b71e:	4628      	mov	r0, r5
 800b720:	47b8      	blx	r7
 800b722:	3001      	adds	r0, #1
 800b724:	d1c1      	bne.n	800b6aa <_printf_float+0x342>
 800b726:	e680      	b.n	800b42a <_printf_float+0xc2>
 800b728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b72a:	2a01      	cmp	r2, #1
 800b72c:	dc01      	bgt.n	800b732 <_printf_float+0x3ca>
 800b72e:	07db      	lsls	r3, r3, #31
 800b730:	d538      	bpl.n	800b7a4 <_printf_float+0x43c>
 800b732:	2301      	movs	r3, #1
 800b734:	4642      	mov	r2, r8
 800b736:	4631      	mov	r1, r6
 800b738:	4628      	mov	r0, r5
 800b73a:	47b8      	blx	r7
 800b73c:	3001      	adds	r0, #1
 800b73e:	f43f ae74 	beq.w	800b42a <_printf_float+0xc2>
 800b742:	ee18 3a10 	vmov	r3, s16
 800b746:	4652      	mov	r2, sl
 800b748:	4631      	mov	r1, r6
 800b74a:	4628      	mov	r0, r5
 800b74c:	47b8      	blx	r7
 800b74e:	3001      	adds	r0, #1
 800b750:	f43f ae6b 	beq.w	800b42a <_printf_float+0xc2>
 800b754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	f7f5 f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b760:	b9d8      	cbnz	r0, 800b79a <_printf_float+0x432>
 800b762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b764:	f108 0201 	add.w	r2, r8, #1
 800b768:	3b01      	subs	r3, #1
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	d10e      	bne.n	800b792 <_printf_float+0x42a>
 800b774:	e659      	b.n	800b42a <_printf_float+0xc2>
 800b776:	2301      	movs	r3, #1
 800b778:	4652      	mov	r2, sl
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	f43f ae52 	beq.w	800b42a <_printf_float+0xc2>
 800b786:	f108 0801 	add.w	r8, r8, #1
 800b78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b78c:	3b01      	subs	r3, #1
 800b78e:	4543      	cmp	r3, r8
 800b790:	dcf1      	bgt.n	800b776 <_printf_float+0x40e>
 800b792:	464b      	mov	r3, r9
 800b794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b798:	e6dc      	b.n	800b554 <_printf_float+0x1ec>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	f104 0a1a 	add.w	sl, r4, #26
 800b7a2:	e7f2      	b.n	800b78a <_printf_float+0x422>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	4642      	mov	r2, r8
 800b7a8:	e7df      	b.n	800b76a <_printf_float+0x402>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	464a      	mov	r2, r9
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f43f ae38 	beq.w	800b42a <_printf_float+0xc2>
 800b7ba:	f108 0801 	add.w	r8, r8, #1
 800b7be:	68e3      	ldr	r3, [r4, #12]
 800b7c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7c2:	1a5b      	subs	r3, r3, r1
 800b7c4:	4543      	cmp	r3, r8
 800b7c6:	dcf0      	bgt.n	800b7aa <_printf_float+0x442>
 800b7c8:	e6fa      	b.n	800b5c0 <_printf_float+0x258>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	f104 0919 	add.w	r9, r4, #25
 800b7d2:	e7f4      	b.n	800b7be <_printf_float+0x456>

0800b7d4 <_printf_common>:
 800b7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d8:	4616      	mov	r6, r2
 800b7da:	4699      	mov	r9, r3
 800b7dc:	688a      	ldr	r2, [r1, #8]
 800b7de:	690b      	ldr	r3, [r1, #16]
 800b7e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bfb8      	it	lt
 800b7e8:	4613      	movlt	r3, r2
 800b7ea:	6033      	str	r3, [r6, #0]
 800b7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b10a      	cbz	r2, 800b7fa <_printf_common+0x26>
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	6033      	str	r3, [r6, #0]
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	0699      	lsls	r1, r3, #26
 800b7fe:	bf42      	ittt	mi
 800b800:	6833      	ldrmi	r3, [r6, #0]
 800b802:	3302      	addmi	r3, #2
 800b804:	6033      	strmi	r3, [r6, #0]
 800b806:	6825      	ldr	r5, [r4, #0]
 800b808:	f015 0506 	ands.w	r5, r5, #6
 800b80c:	d106      	bne.n	800b81c <_printf_common+0x48>
 800b80e:	f104 0a19 	add.w	sl, r4, #25
 800b812:	68e3      	ldr	r3, [r4, #12]
 800b814:	6832      	ldr	r2, [r6, #0]
 800b816:	1a9b      	subs	r3, r3, r2
 800b818:	42ab      	cmp	r3, r5
 800b81a:	dc26      	bgt.n	800b86a <_printf_common+0x96>
 800b81c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b820:	1e13      	subs	r3, r2, #0
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	bf18      	it	ne
 800b826:	2301      	movne	r3, #1
 800b828:	0692      	lsls	r2, r2, #26
 800b82a:	d42b      	bmi.n	800b884 <_printf_common+0xb0>
 800b82c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b830:	4649      	mov	r1, r9
 800b832:	4638      	mov	r0, r7
 800b834:	47c0      	blx	r8
 800b836:	3001      	adds	r0, #1
 800b838:	d01e      	beq.n	800b878 <_printf_common+0xa4>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	68e5      	ldr	r5, [r4, #12]
 800b83e:	6832      	ldr	r2, [r6, #0]
 800b840:	f003 0306 	and.w	r3, r3, #6
 800b844:	2b04      	cmp	r3, #4
 800b846:	bf08      	it	eq
 800b848:	1aad      	subeq	r5, r5, r2
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	6922      	ldr	r2, [r4, #16]
 800b84e:	bf0c      	ite	eq
 800b850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b854:	2500      	movne	r5, #0
 800b856:	4293      	cmp	r3, r2
 800b858:	bfc4      	itt	gt
 800b85a:	1a9b      	subgt	r3, r3, r2
 800b85c:	18ed      	addgt	r5, r5, r3
 800b85e:	2600      	movs	r6, #0
 800b860:	341a      	adds	r4, #26
 800b862:	42b5      	cmp	r5, r6
 800b864:	d11a      	bne.n	800b89c <_printf_common+0xc8>
 800b866:	2000      	movs	r0, #0
 800b868:	e008      	b.n	800b87c <_printf_common+0xa8>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4652      	mov	r2, sl
 800b86e:	4649      	mov	r1, r9
 800b870:	4638      	mov	r0, r7
 800b872:	47c0      	blx	r8
 800b874:	3001      	adds	r0, #1
 800b876:	d103      	bne.n	800b880 <_printf_common+0xac>
 800b878:	f04f 30ff 	mov.w	r0, #4294967295
 800b87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b880:	3501      	adds	r5, #1
 800b882:	e7c6      	b.n	800b812 <_printf_common+0x3e>
 800b884:	18e1      	adds	r1, r4, r3
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	2030      	movs	r0, #48	; 0x30
 800b88a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b88e:	4422      	add	r2, r4
 800b890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b898:	3302      	adds	r3, #2
 800b89a:	e7c7      	b.n	800b82c <_printf_common+0x58>
 800b89c:	2301      	movs	r3, #1
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	47c0      	blx	r8
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d0e6      	beq.n	800b878 <_printf_common+0xa4>
 800b8aa:	3601      	adds	r6, #1
 800b8ac:	e7d9      	b.n	800b862 <_printf_common+0x8e>
	...

0800b8b0 <_printf_i>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	7e0f      	ldrb	r7, [r1, #24]
 800b8b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8b8:	2f78      	cmp	r7, #120	; 0x78
 800b8ba:	4691      	mov	r9, r2
 800b8bc:	4680      	mov	r8, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	469a      	mov	sl, r3
 800b8c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8c6:	d807      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8c8:	2f62      	cmp	r7, #98	; 0x62
 800b8ca:	d80a      	bhi.n	800b8e2 <_printf_i+0x32>
 800b8cc:	2f00      	cmp	r7, #0
 800b8ce:	f000 80d8 	beq.w	800ba82 <_printf_i+0x1d2>
 800b8d2:	2f58      	cmp	r7, #88	; 0x58
 800b8d4:	f000 80a3 	beq.w	800ba1e <_printf_i+0x16e>
 800b8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8e0:	e03a      	b.n	800b958 <_printf_i+0xa8>
 800b8e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8e6:	2b15      	cmp	r3, #21
 800b8e8:	d8f6      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8ea:	a101      	add	r1, pc, #4	; (adr r1, 800b8f0 <_printf_i+0x40>)
 800b8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8f0:	0800b949 	.word	0x0800b949
 800b8f4:	0800b95d 	.word	0x0800b95d
 800b8f8:	0800b8d9 	.word	0x0800b8d9
 800b8fc:	0800b8d9 	.word	0x0800b8d9
 800b900:	0800b8d9 	.word	0x0800b8d9
 800b904:	0800b8d9 	.word	0x0800b8d9
 800b908:	0800b95d 	.word	0x0800b95d
 800b90c:	0800b8d9 	.word	0x0800b8d9
 800b910:	0800b8d9 	.word	0x0800b8d9
 800b914:	0800b8d9 	.word	0x0800b8d9
 800b918:	0800b8d9 	.word	0x0800b8d9
 800b91c:	0800ba69 	.word	0x0800ba69
 800b920:	0800b98d 	.word	0x0800b98d
 800b924:	0800ba4b 	.word	0x0800ba4b
 800b928:	0800b8d9 	.word	0x0800b8d9
 800b92c:	0800b8d9 	.word	0x0800b8d9
 800b930:	0800ba8b 	.word	0x0800ba8b
 800b934:	0800b8d9 	.word	0x0800b8d9
 800b938:	0800b98d 	.word	0x0800b98d
 800b93c:	0800b8d9 	.word	0x0800b8d9
 800b940:	0800b8d9 	.word	0x0800b8d9
 800b944:	0800ba53 	.word	0x0800ba53
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	602a      	str	r2, [r5, #0]
 800b950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b958:	2301      	movs	r3, #1
 800b95a:	e0a3      	b.n	800baa4 <_printf_i+0x1f4>
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	6829      	ldr	r1, [r5, #0]
 800b960:	0606      	lsls	r6, r0, #24
 800b962:	f101 0304 	add.w	r3, r1, #4
 800b966:	d50a      	bpl.n	800b97e <_printf_i+0xce>
 800b968:	680e      	ldr	r6, [r1, #0]
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	2e00      	cmp	r6, #0
 800b96e:	da03      	bge.n	800b978 <_printf_i+0xc8>
 800b970:	232d      	movs	r3, #45	; 0x2d
 800b972:	4276      	negs	r6, r6
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b978:	485e      	ldr	r0, [pc, #376]	; (800baf4 <_printf_i+0x244>)
 800b97a:	230a      	movs	r3, #10
 800b97c:	e019      	b.n	800b9b2 <_printf_i+0x102>
 800b97e:	680e      	ldr	r6, [r1, #0]
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b986:	bf18      	it	ne
 800b988:	b236      	sxthne	r6, r6
 800b98a:	e7ef      	b.n	800b96c <_printf_i+0xbc>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	1d19      	adds	r1, r3, #4
 800b992:	6029      	str	r1, [r5, #0]
 800b994:	0601      	lsls	r1, r0, #24
 800b996:	d501      	bpl.n	800b99c <_printf_i+0xec>
 800b998:	681e      	ldr	r6, [r3, #0]
 800b99a:	e002      	b.n	800b9a2 <_printf_i+0xf2>
 800b99c:	0646      	lsls	r6, r0, #25
 800b99e:	d5fb      	bpl.n	800b998 <_printf_i+0xe8>
 800b9a0:	881e      	ldrh	r6, [r3, #0]
 800b9a2:	4854      	ldr	r0, [pc, #336]	; (800baf4 <_printf_i+0x244>)
 800b9a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b9a6:	bf0c      	ite	eq
 800b9a8:	2308      	moveq	r3, #8
 800b9aa:	230a      	movne	r3, #10
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9b2:	6865      	ldr	r5, [r4, #4]
 800b9b4:	60a5      	str	r5, [r4, #8]
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	bfa2      	ittt	ge
 800b9ba:	6821      	ldrge	r1, [r4, #0]
 800b9bc:	f021 0104 	bicge.w	r1, r1, #4
 800b9c0:	6021      	strge	r1, [r4, #0]
 800b9c2:	b90e      	cbnz	r6, 800b9c8 <_printf_i+0x118>
 800b9c4:	2d00      	cmp	r5, #0
 800b9c6:	d04d      	beq.n	800ba64 <_printf_i+0x1b4>
 800b9c8:	4615      	mov	r5, r2
 800b9ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9ce:	fb03 6711 	mls	r7, r3, r1, r6
 800b9d2:	5dc7      	ldrb	r7, [r0, r7]
 800b9d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9d8:	4637      	mov	r7, r6
 800b9da:	42bb      	cmp	r3, r7
 800b9dc:	460e      	mov	r6, r1
 800b9de:	d9f4      	bls.n	800b9ca <_printf_i+0x11a>
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d10b      	bne.n	800b9fc <_printf_i+0x14c>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	07de      	lsls	r6, r3, #31
 800b9e8:	d508      	bpl.n	800b9fc <_printf_i+0x14c>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	6861      	ldr	r1, [r4, #4]
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	bfde      	ittt	le
 800b9f2:	2330      	movle	r3, #48	; 0x30
 800b9f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9fc:	1b52      	subs	r2, r2, r5
 800b9fe:	6122      	str	r2, [r4, #16]
 800ba00:	f8cd a000 	str.w	sl, [sp]
 800ba04:	464b      	mov	r3, r9
 800ba06:	aa03      	add	r2, sp, #12
 800ba08:	4621      	mov	r1, r4
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	f7ff fee2 	bl	800b7d4 <_printf_common>
 800ba10:	3001      	adds	r0, #1
 800ba12:	d14c      	bne.n	800baae <_printf_i+0x1fe>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	b004      	add	sp, #16
 800ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1e:	4835      	ldr	r0, [pc, #212]	; (800baf4 <_printf_i+0x244>)
 800ba20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba24:	6829      	ldr	r1, [r5, #0]
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba2c:	6029      	str	r1, [r5, #0]
 800ba2e:	061d      	lsls	r5, r3, #24
 800ba30:	d514      	bpl.n	800ba5c <_printf_i+0x1ac>
 800ba32:	07df      	lsls	r7, r3, #31
 800ba34:	bf44      	itt	mi
 800ba36:	f043 0320 	orrmi.w	r3, r3, #32
 800ba3a:	6023      	strmi	r3, [r4, #0]
 800ba3c:	b91e      	cbnz	r6, 800ba46 <_printf_i+0x196>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	f023 0320 	bic.w	r3, r3, #32
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	2310      	movs	r3, #16
 800ba48:	e7b0      	b.n	800b9ac <_printf_i+0xfc>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	f043 0320 	orr.w	r3, r3, #32
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	2378      	movs	r3, #120	; 0x78
 800ba54:	4828      	ldr	r0, [pc, #160]	; (800baf8 <_printf_i+0x248>)
 800ba56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba5a:	e7e3      	b.n	800ba24 <_printf_i+0x174>
 800ba5c:	0659      	lsls	r1, r3, #25
 800ba5e:	bf48      	it	mi
 800ba60:	b2b6      	uxthmi	r6, r6
 800ba62:	e7e6      	b.n	800ba32 <_printf_i+0x182>
 800ba64:	4615      	mov	r5, r2
 800ba66:	e7bb      	b.n	800b9e0 <_printf_i+0x130>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	6826      	ldr	r6, [r4, #0]
 800ba6c:	6961      	ldr	r1, [r4, #20]
 800ba6e:	1d18      	adds	r0, r3, #4
 800ba70:	6028      	str	r0, [r5, #0]
 800ba72:	0635      	lsls	r5, r6, #24
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	d501      	bpl.n	800ba7c <_printf_i+0x1cc>
 800ba78:	6019      	str	r1, [r3, #0]
 800ba7a:	e002      	b.n	800ba82 <_printf_i+0x1d2>
 800ba7c:	0670      	lsls	r0, r6, #25
 800ba7e:	d5fb      	bpl.n	800ba78 <_printf_i+0x1c8>
 800ba80:	8019      	strh	r1, [r3, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	6123      	str	r3, [r4, #16]
 800ba86:	4615      	mov	r5, r2
 800ba88:	e7ba      	b.n	800ba00 <_printf_i+0x150>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	1d1a      	adds	r2, r3, #4
 800ba8e:	602a      	str	r2, [r5, #0]
 800ba90:	681d      	ldr	r5, [r3, #0]
 800ba92:	6862      	ldr	r2, [r4, #4]
 800ba94:	2100      	movs	r1, #0
 800ba96:	4628      	mov	r0, r5
 800ba98:	f7f4 fbaa 	bl	80001f0 <memchr>
 800ba9c:	b108      	cbz	r0, 800baa2 <_printf_i+0x1f2>
 800ba9e:	1b40      	subs	r0, r0, r5
 800baa0:	6060      	str	r0, [r4, #4]
 800baa2:	6863      	ldr	r3, [r4, #4]
 800baa4:	6123      	str	r3, [r4, #16]
 800baa6:	2300      	movs	r3, #0
 800baa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baac:	e7a8      	b.n	800ba00 <_printf_i+0x150>
 800baae:	6923      	ldr	r3, [r4, #16]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4649      	mov	r1, r9
 800bab4:	4640      	mov	r0, r8
 800bab6:	47d0      	blx	sl
 800bab8:	3001      	adds	r0, #1
 800baba:	d0ab      	beq.n	800ba14 <_printf_i+0x164>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	079b      	lsls	r3, r3, #30
 800bac0:	d413      	bmi.n	800baea <_printf_i+0x23a>
 800bac2:	68e0      	ldr	r0, [r4, #12]
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	4298      	cmp	r0, r3
 800bac8:	bfb8      	it	lt
 800baca:	4618      	movlt	r0, r3
 800bacc:	e7a4      	b.n	800ba18 <_printf_i+0x168>
 800bace:	2301      	movs	r3, #1
 800bad0:	4632      	mov	r2, r6
 800bad2:	4649      	mov	r1, r9
 800bad4:	4640      	mov	r0, r8
 800bad6:	47d0      	blx	sl
 800bad8:	3001      	adds	r0, #1
 800bada:	d09b      	beq.n	800ba14 <_printf_i+0x164>
 800badc:	3501      	adds	r5, #1
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	9903      	ldr	r1, [sp, #12]
 800bae2:	1a5b      	subs	r3, r3, r1
 800bae4:	42ab      	cmp	r3, r5
 800bae6:	dcf2      	bgt.n	800bace <_printf_i+0x21e>
 800bae8:	e7eb      	b.n	800bac2 <_printf_i+0x212>
 800baea:	2500      	movs	r5, #0
 800baec:	f104 0619 	add.w	r6, r4, #25
 800baf0:	e7f5      	b.n	800bade <_printf_i+0x22e>
 800baf2:	bf00      	nop
 800baf4:	0800da07 	.word	0x0800da07
 800baf8:	0800da18 	.word	0x0800da18

0800bafc <iprintf>:
 800bafc:	b40f      	push	{r0, r1, r2, r3}
 800bafe:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <iprintf+0x2c>)
 800bb00:	b513      	push	{r0, r1, r4, lr}
 800bb02:	681c      	ldr	r4, [r3, #0]
 800bb04:	b124      	cbz	r4, 800bb10 <iprintf+0x14>
 800bb06:	69a3      	ldr	r3, [r4, #24]
 800bb08:	b913      	cbnz	r3, 800bb10 <iprintf+0x14>
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f001 f888 	bl	800cc20 <__sinit>
 800bb10:	ab05      	add	r3, sp, #20
 800bb12:	9a04      	ldr	r2, [sp, #16]
 800bb14:	68a1      	ldr	r1, [r4, #8]
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f7ff fa55 	bl	800afc8 <_vfiprintf_r>
 800bb1e:	b002      	add	sp, #8
 800bb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb24:	b004      	add	sp, #16
 800bb26:	4770      	bx	lr
 800bb28:	200002e4 	.word	0x200002e4

0800bb2c <realloc>:
 800bb2c:	4b02      	ldr	r3, [pc, #8]	; (800bb38 <realloc+0xc>)
 800bb2e:	460a      	mov	r2, r1
 800bb30:	4601      	mov	r1, r0
 800bb32:	6818      	ldr	r0, [r3, #0]
 800bb34:	f001 bd62 	b.w	800d5fc <_realloc_r>
 800bb38:	200002e4 	.word	0x200002e4

0800bb3c <_sbrk_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4d06      	ldr	r5, [pc, #24]	; (800bb58 <_sbrk_r+0x1c>)
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7f6 f9ca 	bl	8001ee0 <_sbrk>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_sbrk_r+0x1a>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_sbrk_r+0x1a>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	2000073c 	.word	0x2000073c

0800bb5c <strcpy>:
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb62:	f803 2b01 	strb.w	r2, [r3], #1
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	d1f9      	bne.n	800bb5e <strcpy+0x2>
 800bb6a:	4770      	bx	lr

0800bb6c <__swbuf_r>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	460e      	mov	r6, r1
 800bb70:	4614      	mov	r4, r2
 800bb72:	4605      	mov	r5, r0
 800bb74:	b118      	cbz	r0, 800bb7e <__swbuf_r+0x12>
 800bb76:	6983      	ldr	r3, [r0, #24]
 800bb78:	b90b      	cbnz	r3, 800bb7e <__swbuf_r+0x12>
 800bb7a:	f001 f851 	bl	800cc20 <__sinit>
 800bb7e:	4b21      	ldr	r3, [pc, #132]	; (800bc04 <__swbuf_r+0x98>)
 800bb80:	429c      	cmp	r4, r3
 800bb82:	d12b      	bne.n	800bbdc <__swbuf_r+0x70>
 800bb84:	686c      	ldr	r4, [r5, #4]
 800bb86:	69a3      	ldr	r3, [r4, #24]
 800bb88:	60a3      	str	r3, [r4, #8]
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	071a      	lsls	r2, r3, #28
 800bb8e:	d52f      	bpl.n	800bbf0 <__swbuf_r+0x84>
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	b36b      	cbz	r3, 800bbf0 <__swbuf_r+0x84>
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	6820      	ldr	r0, [r4, #0]
 800bb98:	1ac0      	subs	r0, r0, r3
 800bb9a:	6963      	ldr	r3, [r4, #20]
 800bb9c:	b2f6      	uxtb	r6, r6
 800bb9e:	4283      	cmp	r3, r0
 800bba0:	4637      	mov	r7, r6
 800bba2:	dc04      	bgt.n	800bbae <__swbuf_r+0x42>
 800bba4:	4621      	mov	r1, r4
 800bba6:	4628      	mov	r0, r5
 800bba8:	f000 ffa6 	bl	800caf8 <_fflush_r>
 800bbac:	bb30      	cbnz	r0, 800bbfc <__swbuf_r+0x90>
 800bbae:	68a3      	ldr	r3, [r4, #8]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	60a3      	str	r3, [r4, #8]
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	1c5a      	adds	r2, r3, #1
 800bbb8:	6022      	str	r2, [r4, #0]
 800bbba:	701e      	strb	r6, [r3, #0]
 800bbbc:	6963      	ldr	r3, [r4, #20]
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	4283      	cmp	r3, r0
 800bbc2:	d004      	beq.n	800bbce <__swbuf_r+0x62>
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	07db      	lsls	r3, r3, #31
 800bbc8:	d506      	bpl.n	800bbd8 <__swbuf_r+0x6c>
 800bbca:	2e0a      	cmp	r6, #10
 800bbcc:	d104      	bne.n	800bbd8 <__swbuf_r+0x6c>
 800bbce:	4621      	mov	r1, r4
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	f000 ff91 	bl	800caf8 <_fflush_r>
 800bbd6:	b988      	cbnz	r0, 800bbfc <__swbuf_r+0x90>
 800bbd8:	4638      	mov	r0, r7
 800bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbdc:	4b0a      	ldr	r3, [pc, #40]	; (800bc08 <__swbuf_r+0x9c>)
 800bbde:	429c      	cmp	r4, r3
 800bbe0:	d101      	bne.n	800bbe6 <__swbuf_r+0x7a>
 800bbe2:	68ac      	ldr	r4, [r5, #8]
 800bbe4:	e7cf      	b.n	800bb86 <__swbuf_r+0x1a>
 800bbe6:	4b09      	ldr	r3, [pc, #36]	; (800bc0c <__swbuf_r+0xa0>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	bf08      	it	eq
 800bbec:	68ec      	ldreq	r4, [r5, #12]
 800bbee:	e7ca      	b.n	800bb86 <__swbuf_r+0x1a>
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f000 f80c 	bl	800bc10 <__swsetup_r>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d0cb      	beq.n	800bb94 <__swbuf_r+0x28>
 800bbfc:	f04f 37ff 	mov.w	r7, #4294967295
 800bc00:	e7ea      	b.n	800bbd8 <__swbuf_r+0x6c>
 800bc02:	bf00      	nop
 800bc04:	0800dadc 	.word	0x0800dadc
 800bc08:	0800dafc 	.word	0x0800dafc
 800bc0c:	0800dabc 	.word	0x0800dabc

0800bc10 <__swsetup_r>:
 800bc10:	4b32      	ldr	r3, [pc, #200]	; (800bcdc <__swsetup_r+0xcc>)
 800bc12:	b570      	push	{r4, r5, r6, lr}
 800bc14:	681d      	ldr	r5, [r3, #0]
 800bc16:	4606      	mov	r6, r0
 800bc18:	460c      	mov	r4, r1
 800bc1a:	b125      	cbz	r5, 800bc26 <__swsetup_r+0x16>
 800bc1c:	69ab      	ldr	r3, [r5, #24]
 800bc1e:	b913      	cbnz	r3, 800bc26 <__swsetup_r+0x16>
 800bc20:	4628      	mov	r0, r5
 800bc22:	f000 fffd 	bl	800cc20 <__sinit>
 800bc26:	4b2e      	ldr	r3, [pc, #184]	; (800bce0 <__swsetup_r+0xd0>)
 800bc28:	429c      	cmp	r4, r3
 800bc2a:	d10f      	bne.n	800bc4c <__swsetup_r+0x3c>
 800bc2c:	686c      	ldr	r4, [r5, #4]
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc34:	0719      	lsls	r1, r3, #28
 800bc36:	d42c      	bmi.n	800bc92 <__swsetup_r+0x82>
 800bc38:	06dd      	lsls	r5, r3, #27
 800bc3a:	d411      	bmi.n	800bc60 <__swsetup_r+0x50>
 800bc3c:	2309      	movs	r3, #9
 800bc3e:	6033      	str	r3, [r6, #0]
 800bc40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4a:	e03e      	b.n	800bcca <__swsetup_r+0xba>
 800bc4c:	4b25      	ldr	r3, [pc, #148]	; (800bce4 <__swsetup_r+0xd4>)
 800bc4e:	429c      	cmp	r4, r3
 800bc50:	d101      	bne.n	800bc56 <__swsetup_r+0x46>
 800bc52:	68ac      	ldr	r4, [r5, #8]
 800bc54:	e7eb      	b.n	800bc2e <__swsetup_r+0x1e>
 800bc56:	4b24      	ldr	r3, [pc, #144]	; (800bce8 <__swsetup_r+0xd8>)
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	bf08      	it	eq
 800bc5c:	68ec      	ldreq	r4, [r5, #12]
 800bc5e:	e7e6      	b.n	800bc2e <__swsetup_r+0x1e>
 800bc60:	0758      	lsls	r0, r3, #29
 800bc62:	d512      	bpl.n	800bc8a <__swsetup_r+0x7a>
 800bc64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc66:	b141      	cbz	r1, 800bc7a <__swsetup_r+0x6a>
 800bc68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc6c:	4299      	cmp	r1, r3
 800bc6e:	d002      	beq.n	800bc76 <__swsetup_r+0x66>
 800bc70:	4630      	mov	r0, r6
 800bc72:	f001 fc77 	bl	800d564 <_free_r>
 800bc76:	2300      	movs	r3, #0
 800bc78:	6363      	str	r3, [r4, #52]	; 0x34
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	2300      	movs	r3, #0
 800bc84:	6063      	str	r3, [r4, #4]
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	f043 0308 	orr.w	r3, r3, #8
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	b94b      	cbnz	r3, 800bcaa <__swsetup_r+0x9a>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca0:	d003      	beq.n	800bcaa <__swsetup_r+0x9a>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4630      	mov	r0, r6
 800bca6:	f001 f885 	bl	800cdb4 <__smakebuf_r>
 800bcaa:	89a0      	ldrh	r0, [r4, #12]
 800bcac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcb0:	f010 0301 	ands.w	r3, r0, #1
 800bcb4:	d00a      	beq.n	800bccc <__swsetup_r+0xbc>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60a3      	str	r3, [r4, #8]
 800bcba:	6963      	ldr	r3, [r4, #20]
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	61a3      	str	r3, [r4, #24]
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	b943      	cbnz	r3, 800bcd6 <__swsetup_r+0xc6>
 800bcc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcc8:	d1ba      	bne.n	800bc40 <__swsetup_r+0x30>
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	0781      	lsls	r1, r0, #30
 800bcce:	bf58      	it	pl
 800bcd0:	6963      	ldrpl	r3, [r4, #20]
 800bcd2:	60a3      	str	r3, [r4, #8]
 800bcd4:	e7f4      	b.n	800bcc0 <__swsetup_r+0xb0>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e7f7      	b.n	800bcca <__swsetup_r+0xba>
 800bcda:	bf00      	nop
 800bcdc:	200002e4 	.word	0x200002e4
 800bce0:	0800dadc 	.word	0x0800dadc
 800bce4:	0800dafc 	.word	0x0800dafc
 800bce8:	0800dabc 	.word	0x0800dabc

0800bcec <abort>:
 800bcec:	b508      	push	{r3, lr}
 800bcee:	2006      	movs	r0, #6
 800bcf0:	f001 fcdc 	bl	800d6ac <raise>
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	f7f6 f897 	bl	8001e28 <_exit>

0800bcfa <quorem>:
 800bcfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfe:	6903      	ldr	r3, [r0, #16]
 800bd00:	690c      	ldr	r4, [r1, #16]
 800bd02:	42a3      	cmp	r3, r4
 800bd04:	4607      	mov	r7, r0
 800bd06:	f2c0 8081 	blt.w	800be0c <quorem+0x112>
 800bd0a:	3c01      	subs	r4, #1
 800bd0c:	f101 0814 	add.w	r8, r1, #20
 800bd10:	f100 0514 	add.w	r5, r0, #20
 800bd14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd22:	3301      	adds	r3, #1
 800bd24:	429a      	cmp	r2, r3
 800bd26:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd32:	d331      	bcc.n	800bd98 <quorem+0x9e>
 800bd34:	f04f 0e00 	mov.w	lr, #0
 800bd38:	4640      	mov	r0, r8
 800bd3a:	46ac      	mov	ip, r5
 800bd3c:	46f2      	mov	sl, lr
 800bd3e:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd42:	b293      	uxth	r3, r2
 800bd44:	fb06 e303 	mla	r3, r6, r3, lr
 800bd48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	ebaa 0303 	sub.w	r3, sl, r3
 800bd52:	f8dc a000 	ldr.w	sl, [ip]
 800bd56:	0c12      	lsrs	r2, r2, #16
 800bd58:	fa13 f38a 	uxtah	r3, r3, sl
 800bd5c:	fb06 e202 	mla	r2, r6, r2, lr
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	9b00      	ldr	r3, [sp, #0]
 800bd64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd68:	b292      	uxth	r2, r2
 800bd6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd72:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd76:	4581      	cmp	r9, r0
 800bd78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd7c:	f84c 3b04 	str.w	r3, [ip], #4
 800bd80:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd84:	d2db      	bcs.n	800bd3e <quorem+0x44>
 800bd86:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd8a:	b92b      	cbnz	r3, 800bd98 <quorem+0x9e>
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	3b04      	subs	r3, #4
 800bd90:	429d      	cmp	r5, r3
 800bd92:	461a      	mov	r2, r3
 800bd94:	d32e      	bcc.n	800bdf4 <quorem+0xfa>
 800bd96:	613c      	str	r4, [r7, #16]
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f001 fae1 	bl	800d360 <__mcmp>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	db24      	blt.n	800bdec <quorem+0xf2>
 800bda2:	3601      	adds	r6, #1
 800bda4:	4628      	mov	r0, r5
 800bda6:	f04f 0c00 	mov.w	ip, #0
 800bdaa:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdae:	f8d0 e000 	ldr.w	lr, [r0]
 800bdb2:	b293      	uxth	r3, r2
 800bdb4:	ebac 0303 	sub.w	r3, ip, r3
 800bdb8:	0c12      	lsrs	r2, r2, #16
 800bdba:	fa13 f38e 	uxtah	r3, r3, lr
 800bdbe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bdc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdcc:	45c1      	cmp	r9, r8
 800bdce:	f840 3b04 	str.w	r3, [r0], #4
 800bdd2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bdd6:	d2e8      	bcs.n	800bdaa <quorem+0xb0>
 800bdd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bddc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bde0:	b922      	cbnz	r2, 800bdec <quorem+0xf2>
 800bde2:	3b04      	subs	r3, #4
 800bde4:	429d      	cmp	r5, r3
 800bde6:	461a      	mov	r2, r3
 800bde8:	d30a      	bcc.n	800be00 <quorem+0x106>
 800bdea:	613c      	str	r4, [r7, #16]
 800bdec:	4630      	mov	r0, r6
 800bdee:	b003      	add	sp, #12
 800bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf4:	6812      	ldr	r2, [r2, #0]
 800bdf6:	3b04      	subs	r3, #4
 800bdf8:	2a00      	cmp	r2, #0
 800bdfa:	d1cc      	bne.n	800bd96 <quorem+0x9c>
 800bdfc:	3c01      	subs	r4, #1
 800bdfe:	e7c7      	b.n	800bd90 <quorem+0x96>
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	3b04      	subs	r3, #4
 800be04:	2a00      	cmp	r2, #0
 800be06:	d1f0      	bne.n	800bdea <quorem+0xf0>
 800be08:	3c01      	subs	r4, #1
 800be0a:	e7eb      	b.n	800bde4 <quorem+0xea>
 800be0c:	2000      	movs	r0, #0
 800be0e:	e7ee      	b.n	800bdee <quorem+0xf4>

0800be10 <_dtoa_r>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	ed2d 8b04 	vpush	{d8-d9}
 800be18:	ec57 6b10 	vmov	r6, r7, d0
 800be1c:	b093      	sub	sp, #76	; 0x4c
 800be1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be24:	9106      	str	r1, [sp, #24]
 800be26:	ee10 aa10 	vmov	sl, s0
 800be2a:	4604      	mov	r4, r0
 800be2c:	9209      	str	r2, [sp, #36]	; 0x24
 800be2e:	930c      	str	r3, [sp, #48]	; 0x30
 800be30:	46bb      	mov	fp, r7
 800be32:	b975      	cbnz	r5, 800be52 <_dtoa_r+0x42>
 800be34:	2010      	movs	r0, #16
 800be36:	f000 fffd 	bl	800ce34 <malloc>
 800be3a:	4602      	mov	r2, r0
 800be3c:	6260      	str	r0, [r4, #36]	; 0x24
 800be3e:	b920      	cbnz	r0, 800be4a <_dtoa_r+0x3a>
 800be40:	4ba7      	ldr	r3, [pc, #668]	; (800c0e0 <_dtoa_r+0x2d0>)
 800be42:	21ea      	movs	r1, #234	; 0xea
 800be44:	48a7      	ldr	r0, [pc, #668]	; (800c0e4 <_dtoa_r+0x2d4>)
 800be46:	f7fe ff73 	bl	800ad30 <__assert_func>
 800be4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be4e:	6005      	str	r5, [r0, #0]
 800be50:	60c5      	str	r5, [r0, #12]
 800be52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be54:	6819      	ldr	r1, [r3, #0]
 800be56:	b151      	cbz	r1, 800be6e <_dtoa_r+0x5e>
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	604a      	str	r2, [r1, #4]
 800be5c:	2301      	movs	r3, #1
 800be5e:	4093      	lsls	r3, r2
 800be60:	608b      	str	r3, [r1, #8]
 800be62:	4620      	mov	r0, r4
 800be64:	f001 f83a 	bl	800cedc <_Bfree>
 800be68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	1e3b      	subs	r3, r7, #0
 800be70:	bfaa      	itet	ge
 800be72:	2300      	movge	r3, #0
 800be74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be78:	f8c8 3000 	strge.w	r3, [r8]
 800be7c:	4b9a      	ldr	r3, [pc, #616]	; (800c0e8 <_dtoa_r+0x2d8>)
 800be7e:	bfbc      	itt	lt
 800be80:	2201      	movlt	r2, #1
 800be82:	f8c8 2000 	strlt.w	r2, [r8]
 800be86:	ea33 030b 	bics.w	r3, r3, fp
 800be8a:	d11b      	bne.n	800bec4 <_dtoa_r+0xb4>
 800be8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be98:	4333      	orrs	r3, r6
 800be9a:	f000 8592 	beq.w	800c9c2 <_dtoa_r+0xbb2>
 800be9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea0:	b963      	cbnz	r3, 800bebc <_dtoa_r+0xac>
 800bea2:	4b92      	ldr	r3, [pc, #584]	; (800c0ec <_dtoa_r+0x2dc>)
 800bea4:	e022      	b.n	800beec <_dtoa_r+0xdc>
 800bea6:	4b92      	ldr	r3, [pc, #584]	; (800c0f0 <_dtoa_r+0x2e0>)
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	3308      	adds	r3, #8
 800beac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	9801      	ldr	r0, [sp, #4]
 800beb2:	b013      	add	sp, #76	; 0x4c
 800beb4:	ecbd 8b04 	vpop	{d8-d9}
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	4b8b      	ldr	r3, [pc, #556]	; (800c0ec <_dtoa_r+0x2dc>)
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	3303      	adds	r3, #3
 800bec2:	e7f3      	b.n	800beac <_dtoa_r+0x9c>
 800bec4:	2200      	movs	r2, #0
 800bec6:	2300      	movs	r3, #0
 800bec8:	4650      	mov	r0, sl
 800beca:	4659      	mov	r1, fp
 800becc:	f7f4 fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed0:	ec4b ab19 	vmov	d9, sl, fp
 800bed4:	4680      	mov	r8, r0
 800bed6:	b158      	cbz	r0, 800bef0 <_dtoa_r+0xe0>
 800bed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beda:	2301      	movs	r3, #1
 800bedc:	6013      	str	r3, [r2, #0]
 800bede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 856b 	beq.w	800c9bc <_dtoa_r+0xbac>
 800bee6:	4883      	ldr	r0, [pc, #524]	; (800c0f4 <_dtoa_r+0x2e4>)
 800bee8:	6018      	str	r0, [r3, #0]
 800beea:	1e43      	subs	r3, r0, #1
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	e7df      	b.n	800beb0 <_dtoa_r+0xa0>
 800bef0:	ec4b ab10 	vmov	d0, sl, fp
 800bef4:	aa10      	add	r2, sp, #64	; 0x40
 800bef6:	a911      	add	r1, sp, #68	; 0x44
 800bef8:	4620      	mov	r0, r4
 800befa:	f001 fad7 	bl	800d4ac <__d2b>
 800befe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bf02:	ee08 0a10 	vmov	s16, r0
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	f000 8084 	beq.w	800c014 <_dtoa_r+0x204>
 800bf0c:	ee19 3a90 	vmov	r3, s19
 800bf10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bf18:	4656      	mov	r6, sl
 800bf1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bf1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bf26:	4b74      	ldr	r3, [pc, #464]	; (800c0f8 <_dtoa_r+0x2e8>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f7f4 f9b3 	bl	8000298 <__aeabi_dsub>
 800bf32:	a365      	add	r3, pc, #404	; (adr r3, 800c0c8 <_dtoa_r+0x2b8>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f7f4 fb66 	bl	8000608 <__aeabi_dmul>
 800bf3c:	a364      	add	r3, pc, #400	; (adr r3, 800c0d0 <_dtoa_r+0x2c0>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f9ab 	bl	800029c <__adddf3>
 800bf46:	4606      	mov	r6, r0
 800bf48:	4628      	mov	r0, r5
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	f7f4 faf2 	bl	8000534 <__aeabi_i2d>
 800bf50:	a361      	add	r3, pc, #388	; (adr r3, 800c0d8 <_dtoa_r+0x2c8>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f7f4 fb57 	bl	8000608 <__aeabi_dmul>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4630      	mov	r0, r6
 800bf60:	4639      	mov	r1, r7
 800bf62:	f7f4 f99b 	bl	800029c <__adddf3>
 800bf66:	4606      	mov	r6, r0
 800bf68:	460f      	mov	r7, r1
 800bf6a:	f7f4 fdfd 	bl	8000b68 <__aeabi_d2iz>
 800bf6e:	2200      	movs	r2, #0
 800bf70:	9000      	str	r0, [sp, #0]
 800bf72:	2300      	movs	r3, #0
 800bf74:	4630      	mov	r0, r6
 800bf76:	4639      	mov	r1, r7
 800bf78:	f7f4 fdb8 	bl	8000aec <__aeabi_dcmplt>
 800bf7c:	b150      	cbz	r0, 800bf94 <_dtoa_r+0x184>
 800bf7e:	9800      	ldr	r0, [sp, #0]
 800bf80:	f7f4 fad8 	bl	8000534 <__aeabi_i2d>
 800bf84:	4632      	mov	r2, r6
 800bf86:	463b      	mov	r3, r7
 800bf88:	f7f4 fda6 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf8c:	b910      	cbnz	r0, 800bf94 <_dtoa_r+0x184>
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	3b01      	subs	r3, #1
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	9b00      	ldr	r3, [sp, #0]
 800bf96:	2b16      	cmp	r3, #22
 800bf98:	d85a      	bhi.n	800c050 <_dtoa_r+0x240>
 800bf9a:	9a00      	ldr	r2, [sp, #0]
 800bf9c:	4b57      	ldr	r3, [pc, #348]	; (800c0fc <_dtoa_r+0x2ec>)
 800bf9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	ec51 0b19 	vmov	r0, r1, d9
 800bfaa:	f7f4 fd9f 	bl	8000aec <__aeabi_dcmplt>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	d050      	beq.n	800c054 <_dtoa_r+0x244>
 800bfb2:	9b00      	ldr	r3, [sp, #0]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfbe:	1b5d      	subs	r5, r3, r5
 800bfc0:	1e6b      	subs	r3, r5, #1
 800bfc2:	9305      	str	r3, [sp, #20]
 800bfc4:	bf45      	ittet	mi
 800bfc6:	f1c5 0301 	rsbmi	r3, r5, #1
 800bfca:	9304      	strmi	r3, [sp, #16]
 800bfcc:	2300      	movpl	r3, #0
 800bfce:	2300      	movmi	r3, #0
 800bfd0:	bf4c      	ite	mi
 800bfd2:	9305      	strmi	r3, [sp, #20]
 800bfd4:	9304      	strpl	r3, [sp, #16]
 800bfd6:	9b00      	ldr	r3, [sp, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	db3d      	blt.n	800c058 <_dtoa_r+0x248>
 800bfdc:	9b05      	ldr	r3, [sp, #20]
 800bfde:	9a00      	ldr	r2, [sp, #0]
 800bfe0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfe2:	4413      	add	r3, r2
 800bfe4:	9305      	str	r3, [sp, #20]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	9307      	str	r3, [sp, #28]
 800bfea:	9b06      	ldr	r3, [sp, #24]
 800bfec:	2b09      	cmp	r3, #9
 800bfee:	f200 8089 	bhi.w	800c104 <_dtoa_r+0x2f4>
 800bff2:	2b05      	cmp	r3, #5
 800bff4:	bfc4      	itt	gt
 800bff6:	3b04      	subgt	r3, #4
 800bff8:	9306      	strgt	r3, [sp, #24]
 800bffa:	9b06      	ldr	r3, [sp, #24]
 800bffc:	f1a3 0302 	sub.w	r3, r3, #2
 800c000:	bfcc      	ite	gt
 800c002:	2500      	movgt	r5, #0
 800c004:	2501      	movle	r5, #1
 800c006:	2b03      	cmp	r3, #3
 800c008:	f200 8087 	bhi.w	800c11a <_dtoa_r+0x30a>
 800c00c:	e8df f003 	tbb	[pc, r3]
 800c010:	59383a2d 	.word	0x59383a2d
 800c014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c018:	441d      	add	r5, r3
 800c01a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c01e:	2b20      	cmp	r3, #32
 800c020:	bfc1      	itttt	gt
 800c022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c02a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c02e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c032:	bfda      	itte	le
 800c034:	f1c3 0320 	rsble	r3, r3, #32
 800c038:	fa06 f003 	lslle.w	r0, r6, r3
 800c03c:	4318      	orrgt	r0, r3
 800c03e:	f7f4 fa69 	bl	8000514 <__aeabi_ui2d>
 800c042:	2301      	movs	r3, #1
 800c044:	4606      	mov	r6, r0
 800c046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c04a:	3d01      	subs	r5, #1
 800c04c:	930e      	str	r3, [sp, #56]	; 0x38
 800c04e:	e76a      	b.n	800bf26 <_dtoa_r+0x116>
 800c050:	2301      	movs	r3, #1
 800c052:	e7b2      	b.n	800bfba <_dtoa_r+0x1aa>
 800c054:	900b      	str	r0, [sp, #44]	; 0x2c
 800c056:	e7b1      	b.n	800bfbc <_dtoa_r+0x1ac>
 800c058:	9b04      	ldr	r3, [sp, #16]
 800c05a:	9a00      	ldr	r2, [sp, #0]
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	9304      	str	r3, [sp, #16]
 800c060:	4253      	negs	r3, r2
 800c062:	9307      	str	r3, [sp, #28]
 800c064:	2300      	movs	r3, #0
 800c066:	930a      	str	r3, [sp, #40]	; 0x28
 800c068:	e7bf      	b.n	800bfea <_dtoa_r+0x1da>
 800c06a:	2300      	movs	r3, #0
 800c06c:	9308      	str	r3, [sp, #32]
 800c06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c070:	2b00      	cmp	r3, #0
 800c072:	dc55      	bgt.n	800c120 <_dtoa_r+0x310>
 800c074:	2301      	movs	r3, #1
 800c076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c07a:	461a      	mov	r2, r3
 800c07c:	9209      	str	r2, [sp, #36]	; 0x24
 800c07e:	e00c      	b.n	800c09a <_dtoa_r+0x28a>
 800c080:	2301      	movs	r3, #1
 800c082:	e7f3      	b.n	800c06c <_dtoa_r+0x25c>
 800c084:	2300      	movs	r3, #0
 800c086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c088:	9308      	str	r3, [sp, #32]
 800c08a:	9b00      	ldr	r3, [sp, #0]
 800c08c:	4413      	add	r3, r2
 800c08e:	9302      	str	r3, [sp, #8]
 800c090:	3301      	adds	r3, #1
 800c092:	2b01      	cmp	r3, #1
 800c094:	9303      	str	r3, [sp, #12]
 800c096:	bfb8      	it	lt
 800c098:	2301      	movlt	r3, #1
 800c09a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c09c:	2200      	movs	r2, #0
 800c09e:	6042      	str	r2, [r0, #4]
 800c0a0:	2204      	movs	r2, #4
 800c0a2:	f102 0614 	add.w	r6, r2, #20
 800c0a6:	429e      	cmp	r6, r3
 800c0a8:	6841      	ldr	r1, [r0, #4]
 800c0aa:	d93d      	bls.n	800c128 <_dtoa_r+0x318>
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fed5 	bl	800ce5c <_Balloc>
 800c0b2:	9001      	str	r0, [sp, #4]
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d13b      	bne.n	800c130 <_dtoa_r+0x320>
 800c0b8:	4b11      	ldr	r3, [pc, #68]	; (800c100 <_dtoa_r+0x2f0>)
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c0c0:	e6c0      	b.n	800be44 <_dtoa_r+0x34>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e7df      	b.n	800c086 <_dtoa_r+0x276>
 800c0c6:	bf00      	nop
 800c0c8:	636f4361 	.word	0x636f4361
 800c0cc:	3fd287a7 	.word	0x3fd287a7
 800c0d0:	8b60c8b3 	.word	0x8b60c8b3
 800c0d4:	3fc68a28 	.word	0x3fc68a28
 800c0d8:	509f79fb 	.word	0x509f79fb
 800c0dc:	3fd34413 	.word	0x3fd34413
 800c0e0:	0800da36 	.word	0x0800da36
 800c0e4:	0800da4d 	.word	0x0800da4d
 800c0e8:	7ff00000 	.word	0x7ff00000
 800c0ec:	0800da32 	.word	0x0800da32
 800c0f0:	0800da29 	.word	0x0800da29
 800c0f4:	0800da06 	.word	0x0800da06
 800c0f8:	3ff80000 	.word	0x3ff80000
 800c0fc:	0800dba0 	.word	0x0800dba0
 800c100:	0800daa8 	.word	0x0800daa8
 800c104:	2501      	movs	r5, #1
 800c106:	2300      	movs	r3, #0
 800c108:	9306      	str	r3, [sp, #24]
 800c10a:	9508      	str	r5, [sp, #32]
 800c10c:	f04f 33ff 	mov.w	r3, #4294967295
 800c110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c114:	2200      	movs	r2, #0
 800c116:	2312      	movs	r3, #18
 800c118:	e7b0      	b.n	800c07c <_dtoa_r+0x26c>
 800c11a:	2301      	movs	r3, #1
 800c11c:	9308      	str	r3, [sp, #32]
 800c11e:	e7f5      	b.n	800c10c <_dtoa_r+0x2fc>
 800c120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c126:	e7b8      	b.n	800c09a <_dtoa_r+0x28a>
 800c128:	3101      	adds	r1, #1
 800c12a:	6041      	str	r1, [r0, #4]
 800c12c:	0052      	lsls	r2, r2, #1
 800c12e:	e7b8      	b.n	800c0a2 <_dtoa_r+0x292>
 800c130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c132:	9a01      	ldr	r2, [sp, #4]
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	9b03      	ldr	r3, [sp, #12]
 800c138:	2b0e      	cmp	r3, #14
 800c13a:	f200 809d 	bhi.w	800c278 <_dtoa_r+0x468>
 800c13e:	2d00      	cmp	r5, #0
 800c140:	f000 809a 	beq.w	800c278 <_dtoa_r+0x468>
 800c144:	9b00      	ldr	r3, [sp, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	dd32      	ble.n	800c1b0 <_dtoa_r+0x3a0>
 800c14a:	4ab7      	ldr	r2, [pc, #732]	; (800c428 <_dtoa_r+0x618>)
 800c14c:	f003 030f 	and.w	r3, r3, #15
 800c150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c154:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c158:	9b00      	ldr	r3, [sp, #0]
 800c15a:	05d8      	lsls	r0, r3, #23
 800c15c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c160:	d516      	bpl.n	800c190 <_dtoa_r+0x380>
 800c162:	4bb2      	ldr	r3, [pc, #712]	; (800c42c <_dtoa_r+0x61c>)
 800c164:	ec51 0b19 	vmov	r0, r1, d9
 800c168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c16c:	f7f4 fb76 	bl	800085c <__aeabi_ddiv>
 800c170:	f007 070f 	and.w	r7, r7, #15
 800c174:	4682      	mov	sl, r0
 800c176:	468b      	mov	fp, r1
 800c178:	2503      	movs	r5, #3
 800c17a:	4eac      	ldr	r6, [pc, #688]	; (800c42c <_dtoa_r+0x61c>)
 800c17c:	b957      	cbnz	r7, 800c194 <_dtoa_r+0x384>
 800c17e:	4642      	mov	r2, r8
 800c180:	464b      	mov	r3, r9
 800c182:	4650      	mov	r0, sl
 800c184:	4659      	mov	r1, fp
 800c186:	f7f4 fb69 	bl	800085c <__aeabi_ddiv>
 800c18a:	4682      	mov	sl, r0
 800c18c:	468b      	mov	fp, r1
 800c18e:	e028      	b.n	800c1e2 <_dtoa_r+0x3d2>
 800c190:	2502      	movs	r5, #2
 800c192:	e7f2      	b.n	800c17a <_dtoa_r+0x36a>
 800c194:	07f9      	lsls	r1, r7, #31
 800c196:	d508      	bpl.n	800c1aa <_dtoa_r+0x39a>
 800c198:	4640      	mov	r0, r8
 800c19a:	4649      	mov	r1, r9
 800c19c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1a0:	f7f4 fa32 	bl	8000608 <__aeabi_dmul>
 800c1a4:	3501      	adds	r5, #1
 800c1a6:	4680      	mov	r8, r0
 800c1a8:	4689      	mov	r9, r1
 800c1aa:	107f      	asrs	r7, r7, #1
 800c1ac:	3608      	adds	r6, #8
 800c1ae:	e7e5      	b.n	800c17c <_dtoa_r+0x36c>
 800c1b0:	f000 809b 	beq.w	800c2ea <_dtoa_r+0x4da>
 800c1b4:	9b00      	ldr	r3, [sp, #0]
 800c1b6:	4f9d      	ldr	r7, [pc, #628]	; (800c42c <_dtoa_r+0x61c>)
 800c1b8:	425e      	negs	r6, r3
 800c1ba:	4b9b      	ldr	r3, [pc, #620]	; (800c428 <_dtoa_r+0x618>)
 800c1bc:	f006 020f 	and.w	r2, r6, #15
 800c1c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	ec51 0b19 	vmov	r0, r1, d9
 800c1cc:	f7f4 fa1c 	bl	8000608 <__aeabi_dmul>
 800c1d0:	1136      	asrs	r6, r6, #4
 800c1d2:	4682      	mov	sl, r0
 800c1d4:	468b      	mov	fp, r1
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2502      	movs	r5, #2
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	d17a      	bne.n	800c2d4 <_dtoa_r+0x4c4>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1d3      	bne.n	800c18a <_dtoa_r+0x37a>
 800c1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 8082 	beq.w	800c2ee <_dtoa_r+0x4de>
 800c1ea:	4b91      	ldr	r3, [pc, #580]	; (800c430 <_dtoa_r+0x620>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4650      	mov	r0, sl
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	f7f4 fc7b 	bl	8000aec <__aeabi_dcmplt>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d079      	beq.n	800c2ee <_dtoa_r+0x4de>
 800c1fa:	9b03      	ldr	r3, [sp, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d076      	beq.n	800c2ee <_dtoa_r+0x4de>
 800c200:	9b02      	ldr	r3, [sp, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	dd36      	ble.n	800c274 <_dtoa_r+0x464>
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	4650      	mov	r0, sl
 800c20a:	4659      	mov	r1, fp
 800c20c:	1e5f      	subs	r7, r3, #1
 800c20e:	2200      	movs	r2, #0
 800c210:	4b88      	ldr	r3, [pc, #544]	; (800c434 <_dtoa_r+0x624>)
 800c212:	f7f4 f9f9 	bl	8000608 <__aeabi_dmul>
 800c216:	9e02      	ldr	r6, [sp, #8]
 800c218:	4682      	mov	sl, r0
 800c21a:	468b      	mov	fp, r1
 800c21c:	3501      	adds	r5, #1
 800c21e:	4628      	mov	r0, r5
 800c220:	f7f4 f988 	bl	8000534 <__aeabi_i2d>
 800c224:	4652      	mov	r2, sl
 800c226:	465b      	mov	r3, fp
 800c228:	f7f4 f9ee 	bl	8000608 <__aeabi_dmul>
 800c22c:	4b82      	ldr	r3, [pc, #520]	; (800c438 <_dtoa_r+0x628>)
 800c22e:	2200      	movs	r2, #0
 800c230:	f7f4 f834 	bl	800029c <__adddf3>
 800c234:	46d0      	mov	r8, sl
 800c236:	46d9      	mov	r9, fp
 800c238:	4682      	mov	sl, r0
 800c23a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c23e:	2e00      	cmp	r6, #0
 800c240:	d158      	bne.n	800c2f4 <_dtoa_r+0x4e4>
 800c242:	4b7e      	ldr	r3, [pc, #504]	; (800c43c <_dtoa_r+0x62c>)
 800c244:	2200      	movs	r2, #0
 800c246:	4640      	mov	r0, r8
 800c248:	4649      	mov	r1, r9
 800c24a:	f7f4 f825 	bl	8000298 <__aeabi_dsub>
 800c24e:	4652      	mov	r2, sl
 800c250:	465b      	mov	r3, fp
 800c252:	4680      	mov	r8, r0
 800c254:	4689      	mov	r9, r1
 800c256:	f7f4 fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f040 8295 	bne.w	800c78a <_dtoa_r+0x97a>
 800c260:	4652      	mov	r2, sl
 800c262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c266:	4640      	mov	r0, r8
 800c268:	4649      	mov	r1, r9
 800c26a:	f7f4 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	f040 8289 	bne.w	800c786 <_dtoa_r+0x976>
 800c274:	ec5b ab19 	vmov	sl, fp, d9
 800c278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f2c0 8148 	blt.w	800c510 <_dtoa_r+0x700>
 800c280:	9a00      	ldr	r2, [sp, #0]
 800c282:	2a0e      	cmp	r2, #14
 800c284:	f300 8144 	bgt.w	800c510 <_dtoa_r+0x700>
 800c288:	4b67      	ldr	r3, [pc, #412]	; (800c428 <_dtoa_r+0x618>)
 800c28a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c28e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	f280 80d5 	bge.w	800c444 <_dtoa_r+0x634>
 800c29a:	9b03      	ldr	r3, [sp, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f300 80d1 	bgt.w	800c444 <_dtoa_r+0x634>
 800c2a2:	f040 826f 	bne.w	800c784 <_dtoa_r+0x974>
 800c2a6:	4b65      	ldr	r3, [pc, #404]	; (800c43c <_dtoa_r+0x62c>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f7f4 f9ab 	bl	8000608 <__aeabi_dmul>
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	f7f4 fc2d 	bl	8000b14 <__aeabi_dcmpge>
 800c2ba:	9e03      	ldr	r6, [sp, #12]
 800c2bc:	4637      	mov	r7, r6
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	f040 8245 	bne.w	800c74e <_dtoa_r+0x93e>
 800c2c4:	9d01      	ldr	r5, [sp, #4]
 800c2c6:	2331      	movs	r3, #49	; 0x31
 800c2c8:	f805 3b01 	strb.w	r3, [r5], #1
 800c2cc:	9b00      	ldr	r3, [sp, #0]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	e240      	b.n	800c756 <_dtoa_r+0x946>
 800c2d4:	07f2      	lsls	r2, r6, #31
 800c2d6:	d505      	bpl.n	800c2e4 <_dtoa_r+0x4d4>
 800c2d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2dc:	f7f4 f994 	bl	8000608 <__aeabi_dmul>
 800c2e0:	3501      	adds	r5, #1
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	1076      	asrs	r6, r6, #1
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	e777      	b.n	800c1da <_dtoa_r+0x3ca>
 800c2ea:	2502      	movs	r5, #2
 800c2ec:	e779      	b.n	800c1e2 <_dtoa_r+0x3d2>
 800c2ee:	9f00      	ldr	r7, [sp, #0]
 800c2f0:	9e03      	ldr	r6, [sp, #12]
 800c2f2:	e794      	b.n	800c21e <_dtoa_r+0x40e>
 800c2f4:	9901      	ldr	r1, [sp, #4]
 800c2f6:	4b4c      	ldr	r3, [pc, #304]	; (800c428 <_dtoa_r+0x618>)
 800c2f8:	4431      	add	r1, r6
 800c2fa:	910d      	str	r1, [sp, #52]	; 0x34
 800c2fc:	9908      	ldr	r1, [sp, #32]
 800c2fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c306:	2900      	cmp	r1, #0
 800c308:	d043      	beq.n	800c392 <_dtoa_r+0x582>
 800c30a:	494d      	ldr	r1, [pc, #308]	; (800c440 <_dtoa_r+0x630>)
 800c30c:	2000      	movs	r0, #0
 800c30e:	f7f4 faa5 	bl	800085c <__aeabi_ddiv>
 800c312:	4652      	mov	r2, sl
 800c314:	465b      	mov	r3, fp
 800c316:	f7f3 ffbf 	bl	8000298 <__aeabi_dsub>
 800c31a:	9d01      	ldr	r5, [sp, #4]
 800c31c:	4682      	mov	sl, r0
 800c31e:	468b      	mov	fp, r1
 800c320:	4649      	mov	r1, r9
 800c322:	4640      	mov	r0, r8
 800c324:	f7f4 fc20 	bl	8000b68 <__aeabi_d2iz>
 800c328:	4606      	mov	r6, r0
 800c32a:	f7f4 f903 	bl	8000534 <__aeabi_i2d>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f3 ffaf 	bl	8000298 <__aeabi_dsub>
 800c33a:	3630      	adds	r6, #48	; 0x30
 800c33c:	f805 6b01 	strb.w	r6, [r5], #1
 800c340:	4652      	mov	r2, sl
 800c342:	465b      	mov	r3, fp
 800c344:	4680      	mov	r8, r0
 800c346:	4689      	mov	r9, r1
 800c348:	f7f4 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d163      	bne.n	800c418 <_dtoa_r+0x608>
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	4936      	ldr	r1, [pc, #216]	; (800c430 <_dtoa_r+0x620>)
 800c356:	2000      	movs	r0, #0
 800c358:	f7f3 ff9e 	bl	8000298 <__aeabi_dsub>
 800c35c:	4652      	mov	r2, sl
 800c35e:	465b      	mov	r3, fp
 800c360:	f7f4 fbc4 	bl	8000aec <__aeabi_dcmplt>
 800c364:	2800      	cmp	r0, #0
 800c366:	f040 80b5 	bne.w	800c4d4 <_dtoa_r+0x6c4>
 800c36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c36c:	429d      	cmp	r5, r3
 800c36e:	d081      	beq.n	800c274 <_dtoa_r+0x464>
 800c370:	4b30      	ldr	r3, [pc, #192]	; (800c434 <_dtoa_r+0x624>)
 800c372:	2200      	movs	r2, #0
 800c374:	4650      	mov	r0, sl
 800c376:	4659      	mov	r1, fp
 800c378:	f7f4 f946 	bl	8000608 <__aeabi_dmul>
 800c37c:	4b2d      	ldr	r3, [pc, #180]	; (800c434 <_dtoa_r+0x624>)
 800c37e:	4682      	mov	sl, r0
 800c380:	468b      	mov	fp, r1
 800c382:	4640      	mov	r0, r8
 800c384:	4649      	mov	r1, r9
 800c386:	2200      	movs	r2, #0
 800c388:	f7f4 f93e 	bl	8000608 <__aeabi_dmul>
 800c38c:	4680      	mov	r8, r0
 800c38e:	4689      	mov	r9, r1
 800c390:	e7c6      	b.n	800c320 <_dtoa_r+0x510>
 800c392:	4650      	mov	r0, sl
 800c394:	4659      	mov	r1, fp
 800c396:	f7f4 f937 	bl	8000608 <__aeabi_dmul>
 800c39a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39c:	9d01      	ldr	r5, [sp, #4]
 800c39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3a0:	4682      	mov	sl, r0
 800c3a2:	468b      	mov	fp, r1
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	f7f4 fbde 	bl	8000b68 <__aeabi_d2iz>
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	f7f4 f8c1 	bl	8000534 <__aeabi_i2d>
 800c3b2:	3630      	adds	r6, #48	; 0x30
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	f7f3 ff6c 	bl	8000298 <__aeabi_dsub>
 800c3c0:	f805 6b01 	strb.w	r6, [r5], #1
 800c3c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c6:	429d      	cmp	r5, r3
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	4689      	mov	r9, r1
 800c3cc:	f04f 0200 	mov.w	r2, #0
 800c3d0:	d124      	bne.n	800c41c <_dtoa_r+0x60c>
 800c3d2:	4b1b      	ldr	r3, [pc, #108]	; (800c440 <_dtoa_r+0x630>)
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	4659      	mov	r1, fp
 800c3d8:	f7f3 ff60 	bl	800029c <__adddf3>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	f7f4 fba0 	bl	8000b28 <__aeabi_dcmpgt>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d173      	bne.n	800c4d4 <_dtoa_r+0x6c4>
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	4913      	ldr	r1, [pc, #76]	; (800c440 <_dtoa_r+0x630>)
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f7f3 ff50 	bl	8000298 <__aeabi_dsub>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	4649      	mov	r1, r9
 800c400:	f7f4 fb74 	bl	8000aec <__aeabi_dcmplt>
 800c404:	2800      	cmp	r0, #0
 800c406:	f43f af35 	beq.w	800c274 <_dtoa_r+0x464>
 800c40a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c40c:	1e6b      	subs	r3, r5, #1
 800c40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c414:	2b30      	cmp	r3, #48	; 0x30
 800c416:	d0f8      	beq.n	800c40a <_dtoa_r+0x5fa>
 800c418:	9700      	str	r7, [sp, #0]
 800c41a:	e049      	b.n	800c4b0 <_dtoa_r+0x6a0>
 800c41c:	4b05      	ldr	r3, [pc, #20]	; (800c434 <_dtoa_r+0x624>)
 800c41e:	f7f4 f8f3 	bl	8000608 <__aeabi_dmul>
 800c422:	4680      	mov	r8, r0
 800c424:	4689      	mov	r9, r1
 800c426:	e7bd      	b.n	800c3a4 <_dtoa_r+0x594>
 800c428:	0800dba0 	.word	0x0800dba0
 800c42c:	0800db78 	.word	0x0800db78
 800c430:	3ff00000 	.word	0x3ff00000
 800c434:	40240000 	.word	0x40240000
 800c438:	401c0000 	.word	0x401c0000
 800c43c:	40140000 	.word	0x40140000
 800c440:	3fe00000 	.word	0x3fe00000
 800c444:	9d01      	ldr	r5, [sp, #4]
 800c446:	4656      	mov	r6, sl
 800c448:	465f      	mov	r7, fp
 800c44a:	4642      	mov	r2, r8
 800c44c:	464b      	mov	r3, r9
 800c44e:	4630      	mov	r0, r6
 800c450:	4639      	mov	r1, r7
 800c452:	f7f4 fa03 	bl	800085c <__aeabi_ddiv>
 800c456:	f7f4 fb87 	bl	8000b68 <__aeabi_d2iz>
 800c45a:	4682      	mov	sl, r0
 800c45c:	f7f4 f86a 	bl	8000534 <__aeabi_i2d>
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	f7f4 f8d0 	bl	8000608 <__aeabi_dmul>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4630      	mov	r0, r6
 800c46e:	4639      	mov	r1, r7
 800c470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c474:	f7f3 ff10 	bl	8000298 <__aeabi_dsub>
 800c478:	f805 6b01 	strb.w	r6, [r5], #1
 800c47c:	9e01      	ldr	r6, [sp, #4]
 800c47e:	9f03      	ldr	r7, [sp, #12]
 800c480:	1bae      	subs	r6, r5, r6
 800c482:	42b7      	cmp	r7, r6
 800c484:	4602      	mov	r2, r0
 800c486:	460b      	mov	r3, r1
 800c488:	d135      	bne.n	800c4f6 <_dtoa_r+0x6e6>
 800c48a:	f7f3 ff07 	bl	800029c <__adddf3>
 800c48e:	4642      	mov	r2, r8
 800c490:	464b      	mov	r3, r9
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	f7f4 fb47 	bl	8000b28 <__aeabi_dcmpgt>
 800c49a:	b9d0      	cbnz	r0, 800c4d2 <_dtoa_r+0x6c2>
 800c49c:	4642      	mov	r2, r8
 800c49e:	464b      	mov	r3, r9
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	4639      	mov	r1, r7
 800c4a4:	f7f4 fb18 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4a8:	b110      	cbz	r0, 800c4b0 <_dtoa_r+0x6a0>
 800c4aa:	f01a 0f01 	tst.w	sl, #1
 800c4ae:	d110      	bne.n	800c4d2 <_dtoa_r+0x6c2>
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	ee18 1a10 	vmov	r1, s16
 800c4b6:	f000 fd11 	bl	800cedc <_Bfree>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	9800      	ldr	r0, [sp, #0]
 800c4be:	702b      	strb	r3, [r5, #0]
 800c4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	6018      	str	r0, [r3, #0]
 800c4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f43f acf1 	beq.w	800beb0 <_dtoa_r+0xa0>
 800c4ce:	601d      	str	r5, [r3, #0]
 800c4d0:	e4ee      	b.n	800beb0 <_dtoa_r+0xa0>
 800c4d2:	9f00      	ldr	r7, [sp, #0]
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	461d      	mov	r5, r3
 800c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4dc:	2a39      	cmp	r2, #57	; 0x39
 800c4de:	d106      	bne.n	800c4ee <_dtoa_r+0x6de>
 800c4e0:	9a01      	ldr	r2, [sp, #4]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d1f7      	bne.n	800c4d6 <_dtoa_r+0x6c6>
 800c4e6:	9901      	ldr	r1, [sp, #4]
 800c4e8:	2230      	movs	r2, #48	; 0x30
 800c4ea:	3701      	adds	r7, #1
 800c4ec:	700a      	strb	r2, [r1, #0]
 800c4ee:	781a      	ldrb	r2, [r3, #0]
 800c4f0:	3201      	adds	r2, #1
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	e790      	b.n	800c418 <_dtoa_r+0x608>
 800c4f6:	4ba6      	ldr	r3, [pc, #664]	; (800c790 <_dtoa_r+0x980>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f7f4 f885 	bl	8000608 <__aeabi_dmul>
 800c4fe:	2200      	movs	r2, #0
 800c500:	2300      	movs	r3, #0
 800c502:	4606      	mov	r6, r0
 800c504:	460f      	mov	r7, r1
 800c506:	f7f4 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d09d      	beq.n	800c44a <_dtoa_r+0x63a>
 800c50e:	e7cf      	b.n	800c4b0 <_dtoa_r+0x6a0>
 800c510:	9a08      	ldr	r2, [sp, #32]
 800c512:	2a00      	cmp	r2, #0
 800c514:	f000 80d7 	beq.w	800c6c6 <_dtoa_r+0x8b6>
 800c518:	9a06      	ldr	r2, [sp, #24]
 800c51a:	2a01      	cmp	r2, #1
 800c51c:	f300 80ba 	bgt.w	800c694 <_dtoa_r+0x884>
 800c520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c522:	2a00      	cmp	r2, #0
 800c524:	f000 80b2 	beq.w	800c68c <_dtoa_r+0x87c>
 800c528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c52c:	9e07      	ldr	r6, [sp, #28]
 800c52e:	9d04      	ldr	r5, [sp, #16]
 800c530:	9a04      	ldr	r2, [sp, #16]
 800c532:	441a      	add	r2, r3
 800c534:	9204      	str	r2, [sp, #16]
 800c536:	9a05      	ldr	r2, [sp, #20]
 800c538:	2101      	movs	r1, #1
 800c53a:	441a      	add	r2, r3
 800c53c:	4620      	mov	r0, r4
 800c53e:	9205      	str	r2, [sp, #20]
 800c540:	f000 fd84 	bl	800d04c <__i2b>
 800c544:	4607      	mov	r7, r0
 800c546:	2d00      	cmp	r5, #0
 800c548:	dd0c      	ble.n	800c564 <_dtoa_r+0x754>
 800c54a:	9b05      	ldr	r3, [sp, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	dd09      	ble.n	800c564 <_dtoa_r+0x754>
 800c550:	42ab      	cmp	r3, r5
 800c552:	9a04      	ldr	r2, [sp, #16]
 800c554:	bfa8      	it	ge
 800c556:	462b      	movge	r3, r5
 800c558:	1ad2      	subs	r2, r2, r3
 800c55a:	9204      	str	r2, [sp, #16]
 800c55c:	9a05      	ldr	r2, [sp, #20]
 800c55e:	1aed      	subs	r5, r5, r3
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	9b07      	ldr	r3, [sp, #28]
 800c566:	b31b      	cbz	r3, 800c5b0 <_dtoa_r+0x7a0>
 800c568:	9b08      	ldr	r3, [sp, #32]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 80af 	beq.w	800c6ce <_dtoa_r+0x8be>
 800c570:	2e00      	cmp	r6, #0
 800c572:	dd13      	ble.n	800c59c <_dtoa_r+0x78c>
 800c574:	4639      	mov	r1, r7
 800c576:	4632      	mov	r2, r6
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fe27 	bl	800d1cc <__pow5mult>
 800c57e:	ee18 2a10 	vmov	r2, s16
 800c582:	4601      	mov	r1, r0
 800c584:	4607      	mov	r7, r0
 800c586:	4620      	mov	r0, r4
 800c588:	f000 fd76 	bl	800d078 <__multiply>
 800c58c:	ee18 1a10 	vmov	r1, s16
 800c590:	4680      	mov	r8, r0
 800c592:	4620      	mov	r0, r4
 800c594:	f000 fca2 	bl	800cedc <_Bfree>
 800c598:	ee08 8a10 	vmov	s16, r8
 800c59c:	9b07      	ldr	r3, [sp, #28]
 800c59e:	1b9a      	subs	r2, r3, r6
 800c5a0:	d006      	beq.n	800c5b0 <_dtoa_r+0x7a0>
 800c5a2:	ee18 1a10 	vmov	r1, s16
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 fe10 	bl	800d1cc <__pow5mult>
 800c5ac:	ee08 0a10 	vmov	s16, r0
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 fd4a 	bl	800d04c <__i2b>
 800c5b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	4606      	mov	r6, r0
 800c5be:	f340 8088 	ble.w	800c6d2 <_dtoa_r+0x8c2>
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 fe00 	bl	800d1cc <__pow5mult>
 800c5cc:	9b06      	ldr	r3, [sp, #24]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	f340 8081 	ble.w	800c6d8 <_dtoa_r+0x8c8>
 800c5d6:	f04f 0800 	mov.w	r8, #0
 800c5da:	6933      	ldr	r3, [r6, #16]
 800c5dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5e0:	6918      	ldr	r0, [r3, #16]
 800c5e2:	f000 fce3 	bl	800cfac <__hi0bits>
 800c5e6:	f1c0 0020 	rsb	r0, r0, #32
 800c5ea:	9b05      	ldr	r3, [sp, #20]
 800c5ec:	4418      	add	r0, r3
 800c5ee:	f010 001f 	ands.w	r0, r0, #31
 800c5f2:	f000 8092 	beq.w	800c71a <_dtoa_r+0x90a>
 800c5f6:	f1c0 0320 	rsb	r3, r0, #32
 800c5fa:	2b04      	cmp	r3, #4
 800c5fc:	f340 808a 	ble.w	800c714 <_dtoa_r+0x904>
 800c600:	f1c0 001c 	rsb	r0, r0, #28
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	4403      	add	r3, r0
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	9b05      	ldr	r3, [sp, #20]
 800c60c:	4403      	add	r3, r0
 800c60e:	4405      	add	r5, r0
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	9b04      	ldr	r3, [sp, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd07      	ble.n	800c628 <_dtoa_r+0x818>
 800c618:	ee18 1a10 	vmov	r1, s16
 800c61c:	461a      	mov	r2, r3
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 fe2e 	bl	800d280 <__lshift>
 800c624:	ee08 0a10 	vmov	s16, r0
 800c628:	9b05      	ldr	r3, [sp, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	dd05      	ble.n	800c63a <_dtoa_r+0x82a>
 800c62e:	4631      	mov	r1, r6
 800c630:	461a      	mov	r2, r3
 800c632:	4620      	mov	r0, r4
 800c634:	f000 fe24 	bl	800d280 <__lshift>
 800c638:	4606      	mov	r6, r0
 800c63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d06e      	beq.n	800c71e <_dtoa_r+0x90e>
 800c640:	ee18 0a10 	vmov	r0, s16
 800c644:	4631      	mov	r1, r6
 800c646:	f000 fe8b 	bl	800d360 <__mcmp>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	da67      	bge.n	800c71e <_dtoa_r+0x90e>
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	3b01      	subs	r3, #1
 800c652:	ee18 1a10 	vmov	r1, s16
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	220a      	movs	r2, #10
 800c65a:	2300      	movs	r3, #0
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 fc5f 	bl	800cf20 <__multadd>
 800c662:	9b08      	ldr	r3, [sp, #32]
 800c664:	ee08 0a10 	vmov	s16, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 81b1 	beq.w	800c9d0 <_dtoa_r+0xbc0>
 800c66e:	2300      	movs	r3, #0
 800c670:	4639      	mov	r1, r7
 800c672:	220a      	movs	r2, #10
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fc53 	bl	800cf20 <__multadd>
 800c67a:	9b02      	ldr	r3, [sp, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	4607      	mov	r7, r0
 800c680:	f300 808e 	bgt.w	800c7a0 <_dtoa_r+0x990>
 800c684:	9b06      	ldr	r3, [sp, #24]
 800c686:	2b02      	cmp	r3, #2
 800c688:	dc51      	bgt.n	800c72e <_dtoa_r+0x91e>
 800c68a:	e089      	b.n	800c7a0 <_dtoa_r+0x990>
 800c68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c68e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c692:	e74b      	b.n	800c52c <_dtoa_r+0x71c>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	1e5e      	subs	r6, r3, #1
 800c698:	9b07      	ldr	r3, [sp, #28]
 800c69a:	42b3      	cmp	r3, r6
 800c69c:	bfbf      	itttt	lt
 800c69e:	9b07      	ldrlt	r3, [sp, #28]
 800c6a0:	9607      	strlt	r6, [sp, #28]
 800c6a2:	1af2      	sublt	r2, r6, r3
 800c6a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c6a6:	bfb6      	itet	lt
 800c6a8:	189b      	addlt	r3, r3, r2
 800c6aa:	1b9e      	subge	r6, r3, r6
 800c6ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	bfb8      	it	lt
 800c6b2:	2600      	movlt	r6, #0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	bfb7      	itett	lt
 800c6b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c6bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c6c0:	1a9d      	sublt	r5, r3, r2
 800c6c2:	2300      	movlt	r3, #0
 800c6c4:	e734      	b.n	800c530 <_dtoa_r+0x720>
 800c6c6:	9e07      	ldr	r6, [sp, #28]
 800c6c8:	9d04      	ldr	r5, [sp, #16]
 800c6ca:	9f08      	ldr	r7, [sp, #32]
 800c6cc:	e73b      	b.n	800c546 <_dtoa_r+0x736>
 800c6ce:	9a07      	ldr	r2, [sp, #28]
 800c6d0:	e767      	b.n	800c5a2 <_dtoa_r+0x792>
 800c6d2:	9b06      	ldr	r3, [sp, #24]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	dc18      	bgt.n	800c70a <_dtoa_r+0x8fa>
 800c6d8:	f1ba 0f00 	cmp.w	sl, #0
 800c6dc:	d115      	bne.n	800c70a <_dtoa_r+0x8fa>
 800c6de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6e2:	b993      	cbnz	r3, 800c70a <_dtoa_r+0x8fa>
 800c6e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6e8:	0d1b      	lsrs	r3, r3, #20
 800c6ea:	051b      	lsls	r3, r3, #20
 800c6ec:	b183      	cbz	r3, 800c710 <_dtoa_r+0x900>
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	9b05      	ldr	r3, [sp, #20]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	9305      	str	r3, [sp, #20]
 800c6fa:	f04f 0801 	mov.w	r8, #1
 800c6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c700:	2b00      	cmp	r3, #0
 800c702:	f47f af6a 	bne.w	800c5da <_dtoa_r+0x7ca>
 800c706:	2001      	movs	r0, #1
 800c708:	e76f      	b.n	800c5ea <_dtoa_r+0x7da>
 800c70a:	f04f 0800 	mov.w	r8, #0
 800c70e:	e7f6      	b.n	800c6fe <_dtoa_r+0x8ee>
 800c710:	4698      	mov	r8, r3
 800c712:	e7f4      	b.n	800c6fe <_dtoa_r+0x8ee>
 800c714:	f43f af7d 	beq.w	800c612 <_dtoa_r+0x802>
 800c718:	4618      	mov	r0, r3
 800c71a:	301c      	adds	r0, #28
 800c71c:	e772      	b.n	800c604 <_dtoa_r+0x7f4>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	dc37      	bgt.n	800c794 <_dtoa_r+0x984>
 800c724:	9b06      	ldr	r3, [sp, #24]
 800c726:	2b02      	cmp	r3, #2
 800c728:	dd34      	ble.n	800c794 <_dtoa_r+0x984>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	9b02      	ldr	r3, [sp, #8]
 800c730:	b96b      	cbnz	r3, 800c74e <_dtoa_r+0x93e>
 800c732:	4631      	mov	r1, r6
 800c734:	2205      	movs	r2, #5
 800c736:	4620      	mov	r0, r4
 800c738:	f000 fbf2 	bl	800cf20 <__multadd>
 800c73c:	4601      	mov	r1, r0
 800c73e:	4606      	mov	r6, r0
 800c740:	ee18 0a10 	vmov	r0, s16
 800c744:	f000 fe0c 	bl	800d360 <__mcmp>
 800c748:	2800      	cmp	r0, #0
 800c74a:	f73f adbb 	bgt.w	800c2c4 <_dtoa_r+0x4b4>
 800c74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c750:	9d01      	ldr	r5, [sp, #4]
 800c752:	43db      	mvns	r3, r3
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	f04f 0800 	mov.w	r8, #0
 800c75a:	4631      	mov	r1, r6
 800c75c:	4620      	mov	r0, r4
 800c75e:	f000 fbbd 	bl	800cedc <_Bfree>
 800c762:	2f00      	cmp	r7, #0
 800c764:	f43f aea4 	beq.w	800c4b0 <_dtoa_r+0x6a0>
 800c768:	f1b8 0f00 	cmp.w	r8, #0
 800c76c:	d005      	beq.n	800c77a <_dtoa_r+0x96a>
 800c76e:	45b8      	cmp	r8, r7
 800c770:	d003      	beq.n	800c77a <_dtoa_r+0x96a>
 800c772:	4641      	mov	r1, r8
 800c774:	4620      	mov	r0, r4
 800c776:	f000 fbb1 	bl	800cedc <_Bfree>
 800c77a:	4639      	mov	r1, r7
 800c77c:	4620      	mov	r0, r4
 800c77e:	f000 fbad 	bl	800cedc <_Bfree>
 800c782:	e695      	b.n	800c4b0 <_dtoa_r+0x6a0>
 800c784:	2600      	movs	r6, #0
 800c786:	4637      	mov	r7, r6
 800c788:	e7e1      	b.n	800c74e <_dtoa_r+0x93e>
 800c78a:	9700      	str	r7, [sp, #0]
 800c78c:	4637      	mov	r7, r6
 800c78e:	e599      	b.n	800c2c4 <_dtoa_r+0x4b4>
 800c790:	40240000 	.word	0x40240000
 800c794:	9b08      	ldr	r3, [sp, #32]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 80ca 	beq.w	800c930 <_dtoa_r+0xb20>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	9302      	str	r3, [sp, #8]
 800c7a0:	2d00      	cmp	r5, #0
 800c7a2:	dd05      	ble.n	800c7b0 <_dtoa_r+0x9a0>
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	462a      	mov	r2, r5
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fd69 	bl	800d280 <__lshift>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	f1b8 0f00 	cmp.w	r8, #0
 800c7b4:	d05b      	beq.n	800c86e <_dtoa_r+0xa5e>
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 fb4f 	bl	800ce5c <_Balloc>
 800c7be:	4605      	mov	r5, r0
 800c7c0:	b928      	cbnz	r0, 800c7ce <_dtoa_r+0x9be>
 800c7c2:	4b87      	ldr	r3, [pc, #540]	; (800c9e0 <_dtoa_r+0xbd0>)
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c7ca:	f7ff bb3b 	b.w	800be44 <_dtoa_r+0x34>
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	3202      	adds	r2, #2
 800c7d2:	0092      	lsls	r2, r2, #2
 800c7d4:	f107 010c 	add.w	r1, r7, #12
 800c7d8:	300c      	adds	r0, #12
 800c7da:	f7fe fb0b 	bl	800adf4 <memcpy>
 800c7de:	2201      	movs	r2, #1
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fd4c 	bl	800d280 <__lshift>
 800c7e8:	9b01      	ldr	r3, [sp, #4]
 800c7ea:	f103 0901 	add.w	r9, r3, #1
 800c7ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	9305      	str	r3, [sp, #20]
 800c7f6:	f00a 0301 	and.w	r3, sl, #1
 800c7fa:	46b8      	mov	r8, r7
 800c7fc:	9304      	str	r3, [sp, #16]
 800c7fe:	4607      	mov	r7, r0
 800c800:	4631      	mov	r1, r6
 800c802:	ee18 0a10 	vmov	r0, s16
 800c806:	f7ff fa78 	bl	800bcfa <quorem>
 800c80a:	4641      	mov	r1, r8
 800c80c:	9002      	str	r0, [sp, #8]
 800c80e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c812:	ee18 0a10 	vmov	r0, s16
 800c816:	f000 fda3 	bl	800d360 <__mcmp>
 800c81a:	463a      	mov	r2, r7
 800c81c:	9003      	str	r0, [sp, #12]
 800c81e:	4631      	mov	r1, r6
 800c820:	4620      	mov	r0, r4
 800c822:	f000 fdb9 	bl	800d398 <__mdiff>
 800c826:	68c2      	ldr	r2, [r0, #12]
 800c828:	f109 3bff 	add.w	fp, r9, #4294967295
 800c82c:	4605      	mov	r5, r0
 800c82e:	bb02      	cbnz	r2, 800c872 <_dtoa_r+0xa62>
 800c830:	4601      	mov	r1, r0
 800c832:	ee18 0a10 	vmov	r0, s16
 800c836:	f000 fd93 	bl	800d360 <__mcmp>
 800c83a:	4602      	mov	r2, r0
 800c83c:	4629      	mov	r1, r5
 800c83e:	4620      	mov	r0, r4
 800c840:	9207      	str	r2, [sp, #28]
 800c842:	f000 fb4b 	bl	800cedc <_Bfree>
 800c846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c84a:	ea43 0102 	orr.w	r1, r3, r2
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	430b      	orrs	r3, r1
 800c852:	464d      	mov	r5, r9
 800c854:	d10f      	bne.n	800c876 <_dtoa_r+0xa66>
 800c856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c85a:	d02a      	beq.n	800c8b2 <_dtoa_r+0xaa2>
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	dd02      	ble.n	800c868 <_dtoa_r+0xa58>
 800c862:	9b02      	ldr	r3, [sp, #8]
 800c864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c868:	f88b a000 	strb.w	sl, [fp]
 800c86c:	e775      	b.n	800c75a <_dtoa_r+0x94a>
 800c86e:	4638      	mov	r0, r7
 800c870:	e7ba      	b.n	800c7e8 <_dtoa_r+0x9d8>
 800c872:	2201      	movs	r2, #1
 800c874:	e7e2      	b.n	800c83c <_dtoa_r+0xa2c>
 800c876:	9b03      	ldr	r3, [sp, #12]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	db04      	blt.n	800c886 <_dtoa_r+0xa76>
 800c87c:	9906      	ldr	r1, [sp, #24]
 800c87e:	430b      	orrs	r3, r1
 800c880:	9904      	ldr	r1, [sp, #16]
 800c882:	430b      	orrs	r3, r1
 800c884:	d122      	bne.n	800c8cc <_dtoa_r+0xabc>
 800c886:	2a00      	cmp	r2, #0
 800c888:	ddee      	ble.n	800c868 <_dtoa_r+0xa58>
 800c88a:	ee18 1a10 	vmov	r1, s16
 800c88e:	2201      	movs	r2, #1
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fcf5 	bl	800d280 <__lshift>
 800c896:	4631      	mov	r1, r6
 800c898:	ee08 0a10 	vmov	s16, r0
 800c89c:	f000 fd60 	bl	800d360 <__mcmp>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	dc03      	bgt.n	800c8ac <_dtoa_r+0xa9c>
 800c8a4:	d1e0      	bne.n	800c868 <_dtoa_r+0xa58>
 800c8a6:	f01a 0f01 	tst.w	sl, #1
 800c8aa:	d0dd      	beq.n	800c868 <_dtoa_r+0xa58>
 800c8ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8b0:	d1d7      	bne.n	800c862 <_dtoa_r+0xa52>
 800c8b2:	2339      	movs	r3, #57	; 0x39
 800c8b4:	f88b 3000 	strb.w	r3, [fp]
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	461d      	mov	r5, r3
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8c2:	2a39      	cmp	r2, #57	; 0x39
 800c8c4:	d071      	beq.n	800c9aa <_dtoa_r+0xb9a>
 800c8c6:	3201      	adds	r2, #1
 800c8c8:	701a      	strb	r2, [r3, #0]
 800c8ca:	e746      	b.n	800c75a <_dtoa_r+0x94a>
 800c8cc:	2a00      	cmp	r2, #0
 800c8ce:	dd07      	ble.n	800c8e0 <_dtoa_r+0xad0>
 800c8d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8d4:	d0ed      	beq.n	800c8b2 <_dtoa_r+0xaa2>
 800c8d6:	f10a 0301 	add.w	r3, sl, #1
 800c8da:	f88b 3000 	strb.w	r3, [fp]
 800c8de:	e73c      	b.n	800c75a <_dtoa_r+0x94a>
 800c8e0:	9b05      	ldr	r3, [sp, #20]
 800c8e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c8e6:	4599      	cmp	r9, r3
 800c8e8:	d047      	beq.n	800c97a <_dtoa_r+0xb6a>
 800c8ea:	ee18 1a10 	vmov	r1, s16
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	220a      	movs	r2, #10
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fb14 	bl	800cf20 <__multadd>
 800c8f8:	45b8      	cmp	r8, r7
 800c8fa:	ee08 0a10 	vmov	s16, r0
 800c8fe:	f04f 0300 	mov.w	r3, #0
 800c902:	f04f 020a 	mov.w	r2, #10
 800c906:	4641      	mov	r1, r8
 800c908:	4620      	mov	r0, r4
 800c90a:	d106      	bne.n	800c91a <_dtoa_r+0xb0a>
 800c90c:	f000 fb08 	bl	800cf20 <__multadd>
 800c910:	4680      	mov	r8, r0
 800c912:	4607      	mov	r7, r0
 800c914:	f109 0901 	add.w	r9, r9, #1
 800c918:	e772      	b.n	800c800 <_dtoa_r+0x9f0>
 800c91a:	f000 fb01 	bl	800cf20 <__multadd>
 800c91e:	4639      	mov	r1, r7
 800c920:	4680      	mov	r8, r0
 800c922:	2300      	movs	r3, #0
 800c924:	220a      	movs	r2, #10
 800c926:	4620      	mov	r0, r4
 800c928:	f000 fafa 	bl	800cf20 <__multadd>
 800c92c:	4607      	mov	r7, r0
 800c92e:	e7f1      	b.n	800c914 <_dtoa_r+0xb04>
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	9d01      	ldr	r5, [sp, #4]
 800c936:	ee18 0a10 	vmov	r0, s16
 800c93a:	4631      	mov	r1, r6
 800c93c:	f7ff f9dd 	bl	800bcfa <quorem>
 800c940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	f805 ab01 	strb.w	sl, [r5], #1
 800c94a:	1aea      	subs	r2, r5, r3
 800c94c:	9b02      	ldr	r3, [sp, #8]
 800c94e:	4293      	cmp	r3, r2
 800c950:	dd09      	ble.n	800c966 <_dtoa_r+0xb56>
 800c952:	ee18 1a10 	vmov	r1, s16
 800c956:	2300      	movs	r3, #0
 800c958:	220a      	movs	r2, #10
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 fae0 	bl	800cf20 <__multadd>
 800c960:	ee08 0a10 	vmov	s16, r0
 800c964:	e7e7      	b.n	800c936 <_dtoa_r+0xb26>
 800c966:	9b02      	ldr	r3, [sp, #8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	bfc8      	it	gt
 800c96c:	461d      	movgt	r5, r3
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	bfd8      	it	le
 800c972:	2501      	movle	r5, #1
 800c974:	441d      	add	r5, r3
 800c976:	f04f 0800 	mov.w	r8, #0
 800c97a:	ee18 1a10 	vmov	r1, s16
 800c97e:	2201      	movs	r2, #1
 800c980:	4620      	mov	r0, r4
 800c982:	f000 fc7d 	bl	800d280 <__lshift>
 800c986:	4631      	mov	r1, r6
 800c988:	ee08 0a10 	vmov	s16, r0
 800c98c:	f000 fce8 	bl	800d360 <__mcmp>
 800c990:	2800      	cmp	r0, #0
 800c992:	dc91      	bgt.n	800c8b8 <_dtoa_r+0xaa8>
 800c994:	d102      	bne.n	800c99c <_dtoa_r+0xb8c>
 800c996:	f01a 0f01 	tst.w	sl, #1
 800c99a:	d18d      	bne.n	800c8b8 <_dtoa_r+0xaa8>
 800c99c:	462b      	mov	r3, r5
 800c99e:	461d      	mov	r5, r3
 800c9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9a4:	2a30      	cmp	r2, #48	; 0x30
 800c9a6:	d0fa      	beq.n	800c99e <_dtoa_r+0xb8e>
 800c9a8:	e6d7      	b.n	800c75a <_dtoa_r+0x94a>
 800c9aa:	9a01      	ldr	r2, [sp, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d184      	bne.n	800c8ba <_dtoa_r+0xaaa>
 800c9b0:	9b00      	ldr	r3, [sp, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	2331      	movs	r3, #49	; 0x31
 800c9b8:	7013      	strb	r3, [r2, #0]
 800c9ba:	e6ce      	b.n	800c75a <_dtoa_r+0x94a>
 800c9bc:	4b09      	ldr	r3, [pc, #36]	; (800c9e4 <_dtoa_r+0xbd4>)
 800c9be:	f7ff ba95 	b.w	800beec <_dtoa_r+0xdc>
 800c9c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f47f aa6e 	bne.w	800bea6 <_dtoa_r+0x96>
 800c9ca:	4b07      	ldr	r3, [pc, #28]	; (800c9e8 <_dtoa_r+0xbd8>)
 800c9cc:	f7ff ba8e 	b.w	800beec <_dtoa_r+0xdc>
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dcae      	bgt.n	800c934 <_dtoa_r+0xb24>
 800c9d6:	9b06      	ldr	r3, [sp, #24]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	f73f aea8 	bgt.w	800c72e <_dtoa_r+0x91e>
 800c9de:	e7a9      	b.n	800c934 <_dtoa_r+0xb24>
 800c9e0:	0800daa8 	.word	0x0800daa8
 800c9e4:	0800da05 	.word	0x0800da05
 800c9e8:	0800da29 	.word	0x0800da29

0800c9ec <__sflush_r>:
 800c9ec:	898a      	ldrh	r2, [r1, #12]
 800c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	0710      	lsls	r0, r2, #28
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	d458      	bmi.n	800caac <__sflush_r+0xc0>
 800c9fa:	684b      	ldr	r3, [r1, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dc05      	bgt.n	800ca0c <__sflush_r+0x20>
 800ca00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	dc02      	bgt.n	800ca0c <__sflush_r+0x20>
 800ca06:	2000      	movs	r0, #0
 800ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca0e:	2e00      	cmp	r6, #0
 800ca10:	d0f9      	beq.n	800ca06 <__sflush_r+0x1a>
 800ca12:	2300      	movs	r3, #0
 800ca14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca18:	682f      	ldr	r7, [r5, #0]
 800ca1a:	602b      	str	r3, [r5, #0]
 800ca1c:	d032      	beq.n	800ca84 <__sflush_r+0x98>
 800ca1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	075a      	lsls	r2, r3, #29
 800ca24:	d505      	bpl.n	800ca32 <__sflush_r+0x46>
 800ca26:	6863      	ldr	r3, [r4, #4]
 800ca28:	1ac0      	subs	r0, r0, r3
 800ca2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca2c:	b10b      	cbz	r3, 800ca32 <__sflush_r+0x46>
 800ca2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca30:	1ac0      	subs	r0, r0, r3
 800ca32:	2300      	movs	r3, #0
 800ca34:	4602      	mov	r2, r0
 800ca36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca38:	6a21      	ldr	r1, [r4, #32]
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b0      	blx	r6
 800ca3e:	1c43      	adds	r3, r0, #1
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	d106      	bne.n	800ca52 <__sflush_r+0x66>
 800ca44:	6829      	ldr	r1, [r5, #0]
 800ca46:	291d      	cmp	r1, #29
 800ca48:	d82c      	bhi.n	800caa4 <__sflush_r+0xb8>
 800ca4a:	4a2a      	ldr	r2, [pc, #168]	; (800caf4 <__sflush_r+0x108>)
 800ca4c:	40ca      	lsrs	r2, r1
 800ca4e:	07d6      	lsls	r6, r2, #31
 800ca50:	d528      	bpl.n	800caa4 <__sflush_r+0xb8>
 800ca52:	2200      	movs	r2, #0
 800ca54:	6062      	str	r2, [r4, #4]
 800ca56:	04d9      	lsls	r1, r3, #19
 800ca58:	6922      	ldr	r2, [r4, #16]
 800ca5a:	6022      	str	r2, [r4, #0]
 800ca5c:	d504      	bpl.n	800ca68 <__sflush_r+0x7c>
 800ca5e:	1c42      	adds	r2, r0, #1
 800ca60:	d101      	bne.n	800ca66 <__sflush_r+0x7a>
 800ca62:	682b      	ldr	r3, [r5, #0]
 800ca64:	b903      	cbnz	r3, 800ca68 <__sflush_r+0x7c>
 800ca66:	6560      	str	r0, [r4, #84]	; 0x54
 800ca68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca6a:	602f      	str	r7, [r5, #0]
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d0ca      	beq.n	800ca06 <__sflush_r+0x1a>
 800ca70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca74:	4299      	cmp	r1, r3
 800ca76:	d002      	beq.n	800ca7e <__sflush_r+0x92>
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 fd73 	bl	800d564 <_free_r>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	6360      	str	r0, [r4, #52]	; 0x34
 800ca82:	e7c1      	b.n	800ca08 <__sflush_r+0x1c>
 800ca84:	6a21      	ldr	r1, [r4, #32]
 800ca86:	2301      	movs	r3, #1
 800ca88:	4628      	mov	r0, r5
 800ca8a:	47b0      	blx	r6
 800ca8c:	1c41      	adds	r1, r0, #1
 800ca8e:	d1c7      	bne.n	800ca20 <__sflush_r+0x34>
 800ca90:	682b      	ldr	r3, [r5, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0c4      	beq.n	800ca20 <__sflush_r+0x34>
 800ca96:	2b1d      	cmp	r3, #29
 800ca98:	d001      	beq.n	800ca9e <__sflush_r+0xb2>
 800ca9a:	2b16      	cmp	r3, #22
 800ca9c:	d101      	bne.n	800caa2 <__sflush_r+0xb6>
 800ca9e:	602f      	str	r7, [r5, #0]
 800caa0:	e7b1      	b.n	800ca06 <__sflush_r+0x1a>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa8:	81a3      	strh	r3, [r4, #12]
 800caaa:	e7ad      	b.n	800ca08 <__sflush_r+0x1c>
 800caac:	690f      	ldr	r7, [r1, #16]
 800caae:	2f00      	cmp	r7, #0
 800cab0:	d0a9      	beq.n	800ca06 <__sflush_r+0x1a>
 800cab2:	0793      	lsls	r3, r2, #30
 800cab4:	680e      	ldr	r6, [r1, #0]
 800cab6:	bf08      	it	eq
 800cab8:	694b      	ldreq	r3, [r1, #20]
 800caba:	600f      	str	r7, [r1, #0]
 800cabc:	bf18      	it	ne
 800cabe:	2300      	movne	r3, #0
 800cac0:	eba6 0807 	sub.w	r8, r6, r7
 800cac4:	608b      	str	r3, [r1, #8]
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	dd9c      	ble.n	800ca06 <__sflush_r+0x1a>
 800cacc:	6a21      	ldr	r1, [r4, #32]
 800cace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cad0:	4643      	mov	r3, r8
 800cad2:	463a      	mov	r2, r7
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b0      	blx	r6
 800cad8:	2800      	cmp	r0, #0
 800cada:	dc06      	bgt.n	800caea <__sflush_r+0xfe>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	e78e      	b.n	800ca08 <__sflush_r+0x1c>
 800caea:	4407      	add	r7, r0
 800caec:	eba8 0800 	sub.w	r8, r8, r0
 800caf0:	e7e9      	b.n	800cac6 <__sflush_r+0xda>
 800caf2:	bf00      	nop
 800caf4:	20400001 	.word	0x20400001

0800caf8 <_fflush_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	4605      	mov	r5, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	b913      	cbnz	r3, 800cb08 <_fflush_r+0x10>
 800cb02:	2500      	movs	r5, #0
 800cb04:	4628      	mov	r0, r5
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
 800cb08:	b118      	cbz	r0, 800cb12 <_fflush_r+0x1a>
 800cb0a:	6983      	ldr	r3, [r0, #24]
 800cb0c:	b90b      	cbnz	r3, 800cb12 <_fflush_r+0x1a>
 800cb0e:	f000 f887 	bl	800cc20 <__sinit>
 800cb12:	4b14      	ldr	r3, [pc, #80]	; (800cb64 <_fflush_r+0x6c>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	d11b      	bne.n	800cb50 <_fflush_r+0x58>
 800cb18:	686c      	ldr	r4, [r5, #4]
 800cb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0ef      	beq.n	800cb02 <_fflush_r+0xa>
 800cb22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb24:	07d0      	lsls	r0, r2, #31
 800cb26:	d404      	bmi.n	800cb32 <_fflush_r+0x3a>
 800cb28:	0599      	lsls	r1, r3, #22
 800cb2a:	d402      	bmi.n	800cb32 <_fflush_r+0x3a>
 800cb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb2e:	f000 f91a 	bl	800cd66 <__retarget_lock_acquire_recursive>
 800cb32:	4628      	mov	r0, r5
 800cb34:	4621      	mov	r1, r4
 800cb36:	f7ff ff59 	bl	800c9ec <__sflush_r>
 800cb3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb3c:	07da      	lsls	r2, r3, #31
 800cb3e:	4605      	mov	r5, r0
 800cb40:	d4e0      	bmi.n	800cb04 <_fflush_r+0xc>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	059b      	lsls	r3, r3, #22
 800cb46:	d4dd      	bmi.n	800cb04 <_fflush_r+0xc>
 800cb48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb4a:	f000 f90d 	bl	800cd68 <__retarget_lock_release_recursive>
 800cb4e:	e7d9      	b.n	800cb04 <_fflush_r+0xc>
 800cb50:	4b05      	ldr	r3, [pc, #20]	; (800cb68 <_fflush_r+0x70>)
 800cb52:	429c      	cmp	r4, r3
 800cb54:	d101      	bne.n	800cb5a <_fflush_r+0x62>
 800cb56:	68ac      	ldr	r4, [r5, #8]
 800cb58:	e7df      	b.n	800cb1a <_fflush_r+0x22>
 800cb5a:	4b04      	ldr	r3, [pc, #16]	; (800cb6c <_fflush_r+0x74>)
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	bf08      	it	eq
 800cb60:	68ec      	ldreq	r4, [r5, #12]
 800cb62:	e7da      	b.n	800cb1a <_fflush_r+0x22>
 800cb64:	0800dadc 	.word	0x0800dadc
 800cb68:	0800dafc 	.word	0x0800dafc
 800cb6c:	0800dabc 	.word	0x0800dabc

0800cb70 <std>:
 800cb70:	2300      	movs	r3, #0
 800cb72:	b510      	push	{r4, lr}
 800cb74:	4604      	mov	r4, r0
 800cb76:	e9c0 3300 	strd	r3, r3, [r0]
 800cb7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb7e:	6083      	str	r3, [r0, #8]
 800cb80:	8181      	strh	r1, [r0, #12]
 800cb82:	6643      	str	r3, [r0, #100]	; 0x64
 800cb84:	81c2      	strh	r2, [r0, #14]
 800cb86:	6183      	str	r3, [r0, #24]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	2208      	movs	r2, #8
 800cb8c:	305c      	adds	r0, #92	; 0x5c
 800cb8e:	f7fe f93f 	bl	800ae10 <memset>
 800cb92:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <std+0x38>)
 800cb94:	6263      	str	r3, [r4, #36]	; 0x24
 800cb96:	4b05      	ldr	r3, [pc, #20]	; (800cbac <std+0x3c>)
 800cb98:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb9a:	4b05      	ldr	r3, [pc, #20]	; (800cbb0 <std+0x40>)
 800cb9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <std+0x44>)
 800cba0:	6224      	str	r4, [r4, #32]
 800cba2:	6323      	str	r3, [r4, #48]	; 0x30
 800cba4:	bd10      	pop	{r4, pc}
 800cba6:	bf00      	nop
 800cba8:	0800d6e5 	.word	0x0800d6e5
 800cbac:	0800d707 	.word	0x0800d707
 800cbb0:	0800d73f 	.word	0x0800d73f
 800cbb4:	0800d763 	.word	0x0800d763

0800cbb8 <_cleanup_r>:
 800cbb8:	4901      	ldr	r1, [pc, #4]	; (800cbc0 <_cleanup_r+0x8>)
 800cbba:	f000 b8af 	b.w	800cd1c <_fwalk_reent>
 800cbbe:	bf00      	nop
 800cbc0:	0800caf9 	.word	0x0800caf9

0800cbc4 <__sfmoreglue>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	2268      	movs	r2, #104	; 0x68
 800cbc8:	1e4d      	subs	r5, r1, #1
 800cbca:	4355      	muls	r5, r2
 800cbcc:	460e      	mov	r6, r1
 800cbce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbd2:	f7fe f95b 	bl	800ae8c <_malloc_r>
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	b140      	cbz	r0, 800cbec <__sfmoreglue+0x28>
 800cbda:	2100      	movs	r1, #0
 800cbdc:	e9c0 1600 	strd	r1, r6, [r0]
 800cbe0:	300c      	adds	r0, #12
 800cbe2:	60a0      	str	r0, [r4, #8]
 800cbe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbe8:	f7fe f912 	bl	800ae10 <memset>
 800cbec:	4620      	mov	r0, r4
 800cbee:	bd70      	pop	{r4, r5, r6, pc}

0800cbf0 <__sfp_lock_acquire>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	; (800cbf8 <__sfp_lock_acquire+0x8>)
 800cbf2:	f000 b8b8 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	20000739 	.word	0x20000739

0800cbfc <__sfp_lock_release>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	; (800cc04 <__sfp_lock_release+0x8>)
 800cbfe:	f000 b8b3 	b.w	800cd68 <__retarget_lock_release_recursive>
 800cc02:	bf00      	nop
 800cc04:	20000739 	.word	0x20000739

0800cc08 <__sinit_lock_acquire>:
 800cc08:	4801      	ldr	r0, [pc, #4]	; (800cc10 <__sinit_lock_acquire+0x8>)
 800cc0a:	f000 b8ac 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800cc0e:	bf00      	nop
 800cc10:	2000073a 	.word	0x2000073a

0800cc14 <__sinit_lock_release>:
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <__sinit_lock_release+0x8>)
 800cc16:	f000 b8a7 	b.w	800cd68 <__retarget_lock_release_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	2000073a 	.word	0x2000073a

0800cc20 <__sinit>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	f7ff fff0 	bl	800cc08 <__sinit_lock_acquire>
 800cc28:	69a3      	ldr	r3, [r4, #24]
 800cc2a:	b11b      	cbz	r3, 800cc34 <__sinit+0x14>
 800cc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc30:	f7ff bff0 	b.w	800cc14 <__sinit_lock_release>
 800cc34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc38:	6523      	str	r3, [r4, #80]	; 0x50
 800cc3a:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <__sinit+0x68>)
 800cc3c:	4a13      	ldr	r2, [pc, #76]	; (800cc8c <__sinit+0x6c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc42:	42a3      	cmp	r3, r4
 800cc44:	bf04      	itt	eq
 800cc46:	2301      	moveq	r3, #1
 800cc48:	61a3      	streq	r3, [r4, #24]
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 f820 	bl	800cc90 <__sfp>
 800cc50:	6060      	str	r0, [r4, #4]
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 f81c 	bl	800cc90 <__sfp>
 800cc58:	60a0      	str	r0, [r4, #8]
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 f818 	bl	800cc90 <__sfp>
 800cc60:	2200      	movs	r2, #0
 800cc62:	60e0      	str	r0, [r4, #12]
 800cc64:	2104      	movs	r1, #4
 800cc66:	6860      	ldr	r0, [r4, #4]
 800cc68:	f7ff ff82 	bl	800cb70 <std>
 800cc6c:	68a0      	ldr	r0, [r4, #8]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	2109      	movs	r1, #9
 800cc72:	f7ff ff7d 	bl	800cb70 <std>
 800cc76:	68e0      	ldr	r0, [r4, #12]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	2112      	movs	r1, #18
 800cc7c:	f7ff ff78 	bl	800cb70 <std>
 800cc80:	2301      	movs	r3, #1
 800cc82:	61a3      	str	r3, [r4, #24]
 800cc84:	e7d2      	b.n	800cc2c <__sinit+0xc>
 800cc86:	bf00      	nop
 800cc88:	0800d9e0 	.word	0x0800d9e0
 800cc8c:	0800cbb9 	.word	0x0800cbb9

0800cc90 <__sfp>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	4607      	mov	r7, r0
 800cc94:	f7ff ffac 	bl	800cbf0 <__sfp_lock_acquire>
 800cc98:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <__sfp+0x84>)
 800cc9a:	681e      	ldr	r6, [r3, #0]
 800cc9c:	69b3      	ldr	r3, [r6, #24]
 800cc9e:	b913      	cbnz	r3, 800cca6 <__sfp+0x16>
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7ff ffbd 	bl	800cc20 <__sinit>
 800cca6:	3648      	adds	r6, #72	; 0x48
 800cca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	d503      	bpl.n	800ccb8 <__sfp+0x28>
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	b30b      	cbz	r3, 800ccf8 <__sfp+0x68>
 800ccb4:	6836      	ldr	r6, [r6, #0]
 800ccb6:	e7f7      	b.n	800cca8 <__sfp+0x18>
 800ccb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ccbc:	b9d5      	cbnz	r5, 800ccf4 <__sfp+0x64>
 800ccbe:	4b16      	ldr	r3, [pc, #88]	; (800cd18 <__sfp+0x88>)
 800ccc0:	60e3      	str	r3, [r4, #12]
 800ccc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccc6:	6665      	str	r5, [r4, #100]	; 0x64
 800ccc8:	f000 f84c 	bl	800cd64 <__retarget_lock_init_recursive>
 800cccc:	f7ff ff96 	bl	800cbfc <__sfp_lock_release>
 800ccd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccd8:	6025      	str	r5, [r4, #0]
 800ccda:	61a5      	str	r5, [r4, #24]
 800ccdc:	2208      	movs	r2, #8
 800ccde:	4629      	mov	r1, r5
 800cce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cce4:	f7fe f894 	bl	800ae10 <memset>
 800cce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf4:	3468      	adds	r4, #104	; 0x68
 800ccf6:	e7d9      	b.n	800ccac <__sfp+0x1c>
 800ccf8:	2104      	movs	r1, #4
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f7ff ff62 	bl	800cbc4 <__sfmoreglue>
 800cd00:	4604      	mov	r4, r0
 800cd02:	6030      	str	r0, [r6, #0]
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d1d5      	bne.n	800ccb4 <__sfp+0x24>
 800cd08:	f7ff ff78 	bl	800cbfc <__sfp_lock_release>
 800cd0c:	230c      	movs	r3, #12
 800cd0e:	603b      	str	r3, [r7, #0]
 800cd10:	e7ee      	b.n	800ccf0 <__sfp+0x60>
 800cd12:	bf00      	nop
 800cd14:	0800d9e0 	.word	0x0800d9e0
 800cd18:	ffff0001 	.word	0xffff0001

0800cd1c <_fwalk_reent>:
 800cd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd20:	4606      	mov	r6, r0
 800cd22:	4688      	mov	r8, r1
 800cd24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd28:	2700      	movs	r7, #0
 800cd2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd2e:	f1b9 0901 	subs.w	r9, r9, #1
 800cd32:	d505      	bpl.n	800cd40 <_fwalk_reent+0x24>
 800cd34:	6824      	ldr	r4, [r4, #0]
 800cd36:	2c00      	cmp	r4, #0
 800cd38:	d1f7      	bne.n	800cd2a <_fwalk_reent+0xe>
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd40:	89ab      	ldrh	r3, [r5, #12]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d907      	bls.n	800cd56 <_fwalk_reent+0x3a>
 800cd46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	d003      	beq.n	800cd56 <_fwalk_reent+0x3a>
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4630      	mov	r0, r6
 800cd52:	47c0      	blx	r8
 800cd54:	4307      	orrs	r7, r0
 800cd56:	3568      	adds	r5, #104	; 0x68
 800cd58:	e7e9      	b.n	800cd2e <_fwalk_reent+0x12>
	...

0800cd5c <_localeconv_r>:
 800cd5c:	4800      	ldr	r0, [pc, #0]	; (800cd60 <_localeconv_r+0x4>)
 800cd5e:	4770      	bx	lr
 800cd60:	20000438 	.word	0x20000438

0800cd64 <__retarget_lock_init_recursive>:
 800cd64:	4770      	bx	lr

0800cd66 <__retarget_lock_acquire_recursive>:
 800cd66:	4770      	bx	lr

0800cd68 <__retarget_lock_release_recursive>:
 800cd68:	4770      	bx	lr

0800cd6a <__swhatbuf_r>:
 800cd6a:	b570      	push	{r4, r5, r6, lr}
 800cd6c:	460e      	mov	r6, r1
 800cd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd72:	2900      	cmp	r1, #0
 800cd74:	b096      	sub	sp, #88	; 0x58
 800cd76:	4614      	mov	r4, r2
 800cd78:	461d      	mov	r5, r3
 800cd7a:	da08      	bge.n	800cd8e <__swhatbuf_r+0x24>
 800cd7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	602a      	str	r2, [r5, #0]
 800cd84:	061a      	lsls	r2, r3, #24
 800cd86:	d410      	bmi.n	800cdaa <__swhatbuf_r+0x40>
 800cd88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd8c:	e00e      	b.n	800cdac <__swhatbuf_r+0x42>
 800cd8e:	466a      	mov	r2, sp
 800cd90:	f000 fd0e 	bl	800d7b0 <_fstat_r>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	dbf1      	blt.n	800cd7c <__swhatbuf_r+0x12>
 800cd98:	9a01      	ldr	r2, [sp, #4]
 800cd9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cda2:	425a      	negs	r2, r3
 800cda4:	415a      	adcs	r2, r3
 800cda6:	602a      	str	r2, [r5, #0]
 800cda8:	e7ee      	b.n	800cd88 <__swhatbuf_r+0x1e>
 800cdaa:	2340      	movs	r3, #64	; 0x40
 800cdac:	2000      	movs	r0, #0
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	b016      	add	sp, #88	; 0x58
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}

0800cdb4 <__smakebuf_r>:
 800cdb4:	898b      	ldrh	r3, [r1, #12]
 800cdb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdb8:	079d      	lsls	r5, r3, #30
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	d507      	bpl.n	800cdd0 <__smakebuf_r+0x1c>
 800cdc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	6123      	str	r3, [r4, #16]
 800cdc8:	2301      	movs	r3, #1
 800cdca:	6163      	str	r3, [r4, #20]
 800cdcc:	b002      	add	sp, #8
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
 800cdd0:	ab01      	add	r3, sp, #4
 800cdd2:	466a      	mov	r2, sp
 800cdd4:	f7ff ffc9 	bl	800cd6a <__swhatbuf_r>
 800cdd8:	9900      	ldr	r1, [sp, #0]
 800cdda:	4605      	mov	r5, r0
 800cddc:	4630      	mov	r0, r6
 800cdde:	f7fe f855 	bl	800ae8c <_malloc_r>
 800cde2:	b948      	cbnz	r0, 800cdf8 <__smakebuf_r+0x44>
 800cde4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde8:	059a      	lsls	r2, r3, #22
 800cdea:	d4ef      	bmi.n	800cdcc <__smakebuf_r+0x18>
 800cdec:	f023 0303 	bic.w	r3, r3, #3
 800cdf0:	f043 0302 	orr.w	r3, r3, #2
 800cdf4:	81a3      	strh	r3, [r4, #12]
 800cdf6:	e7e3      	b.n	800cdc0 <__smakebuf_r+0xc>
 800cdf8:	4b0d      	ldr	r3, [pc, #52]	; (800ce30 <__smakebuf_r+0x7c>)
 800cdfa:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	6020      	str	r0, [r4, #0]
 800ce00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	9b00      	ldr	r3, [sp, #0]
 800ce08:	6163      	str	r3, [r4, #20]
 800ce0a:	9b01      	ldr	r3, [sp, #4]
 800ce0c:	6120      	str	r0, [r4, #16]
 800ce0e:	b15b      	cbz	r3, 800ce28 <__smakebuf_r+0x74>
 800ce10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce14:	4630      	mov	r0, r6
 800ce16:	f000 fcdd 	bl	800d7d4 <_isatty_r>
 800ce1a:	b128      	cbz	r0, 800ce28 <__smakebuf_r+0x74>
 800ce1c:	89a3      	ldrh	r3, [r4, #12]
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	f043 0301 	orr.w	r3, r3, #1
 800ce26:	81a3      	strh	r3, [r4, #12]
 800ce28:	89a0      	ldrh	r0, [r4, #12]
 800ce2a:	4305      	orrs	r5, r0
 800ce2c:	81a5      	strh	r5, [r4, #12]
 800ce2e:	e7cd      	b.n	800cdcc <__smakebuf_r+0x18>
 800ce30:	0800cbb9 	.word	0x0800cbb9

0800ce34 <malloc>:
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <malloc+0xc>)
 800ce36:	4601      	mov	r1, r0
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	f7fe b827 	b.w	800ae8c <_malloc_r>
 800ce3e:	bf00      	nop
 800ce40:	200002e4 	.word	0x200002e4

0800ce44 <__malloc_lock>:
 800ce44:	4801      	ldr	r0, [pc, #4]	; (800ce4c <__malloc_lock+0x8>)
 800ce46:	f7ff bf8e 	b.w	800cd66 <__retarget_lock_acquire_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	20000738 	.word	0x20000738

0800ce50 <__malloc_unlock>:
 800ce50:	4801      	ldr	r0, [pc, #4]	; (800ce58 <__malloc_unlock+0x8>)
 800ce52:	f7ff bf89 	b.w	800cd68 <__retarget_lock_release_recursive>
 800ce56:	bf00      	nop
 800ce58:	20000738 	.word	0x20000738

0800ce5c <_Balloc>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	b976      	cbnz	r6, 800ce84 <_Balloc+0x28>
 800ce66:	2010      	movs	r0, #16
 800ce68:	f7ff ffe4 	bl	800ce34 <malloc>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	6260      	str	r0, [r4, #36]	; 0x24
 800ce70:	b920      	cbnz	r0, 800ce7c <_Balloc+0x20>
 800ce72:	4b18      	ldr	r3, [pc, #96]	; (800ced4 <_Balloc+0x78>)
 800ce74:	4818      	ldr	r0, [pc, #96]	; (800ced8 <_Balloc+0x7c>)
 800ce76:	2166      	movs	r1, #102	; 0x66
 800ce78:	f7fd ff5a 	bl	800ad30 <__assert_func>
 800ce7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce80:	6006      	str	r6, [r0, #0]
 800ce82:	60c6      	str	r6, [r0, #12]
 800ce84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce86:	68f3      	ldr	r3, [r6, #12]
 800ce88:	b183      	cbz	r3, 800ceac <_Balloc+0x50>
 800ce8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce92:	b9b8      	cbnz	r0, 800cec4 <_Balloc+0x68>
 800ce94:	2101      	movs	r1, #1
 800ce96:	fa01 f605 	lsl.w	r6, r1, r5
 800ce9a:	1d72      	adds	r2, r6, #5
 800ce9c:	0092      	lsls	r2, r2, #2
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7fd ffbe 	bl	800ae20 <_calloc_r>
 800cea4:	b160      	cbz	r0, 800cec0 <_Balloc+0x64>
 800cea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ceaa:	e00e      	b.n	800ceca <_Balloc+0x6e>
 800ceac:	2221      	movs	r2, #33	; 0x21
 800ceae:	2104      	movs	r1, #4
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f7fd ffb5 	bl	800ae20 <_calloc_r>
 800ceb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceb8:	60f0      	str	r0, [r6, #12]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1e4      	bne.n	800ce8a <_Balloc+0x2e>
 800cec0:	2000      	movs	r0, #0
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	6802      	ldr	r2, [r0, #0]
 800cec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceca:	2300      	movs	r3, #0
 800cecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ced0:	e7f7      	b.n	800cec2 <_Balloc+0x66>
 800ced2:	bf00      	nop
 800ced4:	0800da36 	.word	0x0800da36
 800ced8:	0800db1c 	.word	0x0800db1c

0800cedc <_Bfree>:
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cee0:	4605      	mov	r5, r0
 800cee2:	460c      	mov	r4, r1
 800cee4:	b976      	cbnz	r6, 800cf04 <_Bfree+0x28>
 800cee6:	2010      	movs	r0, #16
 800cee8:	f7ff ffa4 	bl	800ce34 <malloc>
 800ceec:	4602      	mov	r2, r0
 800ceee:	6268      	str	r0, [r5, #36]	; 0x24
 800cef0:	b920      	cbnz	r0, 800cefc <_Bfree+0x20>
 800cef2:	4b09      	ldr	r3, [pc, #36]	; (800cf18 <_Bfree+0x3c>)
 800cef4:	4809      	ldr	r0, [pc, #36]	; (800cf1c <_Bfree+0x40>)
 800cef6:	218a      	movs	r1, #138	; 0x8a
 800cef8:	f7fd ff1a 	bl	800ad30 <__assert_func>
 800cefc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf00:	6006      	str	r6, [r0, #0]
 800cf02:	60c6      	str	r6, [r0, #12]
 800cf04:	b13c      	cbz	r4, 800cf16 <_Bfree+0x3a>
 800cf06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf08:	6862      	ldr	r2, [r4, #4]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf10:	6021      	str	r1, [r4, #0]
 800cf12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	0800da36 	.word	0x0800da36
 800cf1c:	0800db1c 	.word	0x0800db1c

0800cf20 <__multadd>:
 800cf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf24:	690d      	ldr	r5, [r1, #16]
 800cf26:	4607      	mov	r7, r0
 800cf28:	460c      	mov	r4, r1
 800cf2a:	461e      	mov	r6, r3
 800cf2c:	f101 0c14 	add.w	ip, r1, #20
 800cf30:	2000      	movs	r0, #0
 800cf32:	f8dc 3000 	ldr.w	r3, [ip]
 800cf36:	b299      	uxth	r1, r3
 800cf38:	fb02 6101 	mla	r1, r2, r1, r6
 800cf3c:	0c1e      	lsrs	r6, r3, #16
 800cf3e:	0c0b      	lsrs	r3, r1, #16
 800cf40:	fb02 3306 	mla	r3, r2, r6, r3
 800cf44:	b289      	uxth	r1, r1
 800cf46:	3001      	adds	r0, #1
 800cf48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf4c:	4285      	cmp	r5, r0
 800cf4e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf56:	dcec      	bgt.n	800cf32 <__multadd+0x12>
 800cf58:	b30e      	cbz	r6, 800cf9e <__multadd+0x7e>
 800cf5a:	68a3      	ldr	r3, [r4, #8]
 800cf5c:	42ab      	cmp	r3, r5
 800cf5e:	dc19      	bgt.n	800cf94 <__multadd+0x74>
 800cf60:	6861      	ldr	r1, [r4, #4]
 800cf62:	4638      	mov	r0, r7
 800cf64:	3101      	adds	r1, #1
 800cf66:	f7ff ff79 	bl	800ce5c <_Balloc>
 800cf6a:	4680      	mov	r8, r0
 800cf6c:	b928      	cbnz	r0, 800cf7a <__multadd+0x5a>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	4b0c      	ldr	r3, [pc, #48]	; (800cfa4 <__multadd+0x84>)
 800cf72:	480d      	ldr	r0, [pc, #52]	; (800cfa8 <__multadd+0x88>)
 800cf74:	21b5      	movs	r1, #181	; 0xb5
 800cf76:	f7fd fedb 	bl	800ad30 <__assert_func>
 800cf7a:	6922      	ldr	r2, [r4, #16]
 800cf7c:	3202      	adds	r2, #2
 800cf7e:	f104 010c 	add.w	r1, r4, #12
 800cf82:	0092      	lsls	r2, r2, #2
 800cf84:	300c      	adds	r0, #12
 800cf86:	f7fd ff35 	bl	800adf4 <memcpy>
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	f7ff ffa5 	bl	800cedc <_Bfree>
 800cf92:	4644      	mov	r4, r8
 800cf94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf98:	3501      	adds	r5, #1
 800cf9a:	615e      	str	r6, [r3, #20]
 800cf9c:	6125      	str	r5, [r4, #16]
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa4:	0800daa8 	.word	0x0800daa8
 800cfa8:	0800db1c 	.word	0x0800db1c

0800cfac <__hi0bits>:
 800cfac:	0c03      	lsrs	r3, r0, #16
 800cfae:	041b      	lsls	r3, r3, #16
 800cfb0:	b9d3      	cbnz	r3, 800cfe8 <__hi0bits+0x3c>
 800cfb2:	0400      	lsls	r0, r0, #16
 800cfb4:	2310      	movs	r3, #16
 800cfb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfba:	bf04      	itt	eq
 800cfbc:	0200      	lsleq	r0, r0, #8
 800cfbe:	3308      	addeq	r3, #8
 800cfc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfc4:	bf04      	itt	eq
 800cfc6:	0100      	lsleq	r0, r0, #4
 800cfc8:	3304      	addeq	r3, #4
 800cfca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfce:	bf04      	itt	eq
 800cfd0:	0080      	lsleq	r0, r0, #2
 800cfd2:	3302      	addeq	r3, #2
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	db05      	blt.n	800cfe4 <__hi0bits+0x38>
 800cfd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfdc:	f103 0301 	add.w	r3, r3, #1
 800cfe0:	bf08      	it	eq
 800cfe2:	2320      	moveq	r3, #32
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	4770      	bx	lr
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e7e4      	b.n	800cfb6 <__hi0bits+0xa>

0800cfec <__lo0bits>:
 800cfec:	6803      	ldr	r3, [r0, #0]
 800cfee:	f013 0207 	ands.w	r2, r3, #7
 800cff2:	4601      	mov	r1, r0
 800cff4:	d00b      	beq.n	800d00e <__lo0bits+0x22>
 800cff6:	07da      	lsls	r2, r3, #31
 800cff8:	d423      	bmi.n	800d042 <__lo0bits+0x56>
 800cffa:	0798      	lsls	r0, r3, #30
 800cffc:	bf49      	itett	mi
 800cffe:	085b      	lsrmi	r3, r3, #1
 800d000:	089b      	lsrpl	r3, r3, #2
 800d002:	2001      	movmi	r0, #1
 800d004:	600b      	strmi	r3, [r1, #0]
 800d006:	bf5c      	itt	pl
 800d008:	600b      	strpl	r3, [r1, #0]
 800d00a:	2002      	movpl	r0, #2
 800d00c:	4770      	bx	lr
 800d00e:	b298      	uxth	r0, r3
 800d010:	b9a8      	cbnz	r0, 800d03e <__lo0bits+0x52>
 800d012:	0c1b      	lsrs	r3, r3, #16
 800d014:	2010      	movs	r0, #16
 800d016:	b2da      	uxtb	r2, r3
 800d018:	b90a      	cbnz	r2, 800d01e <__lo0bits+0x32>
 800d01a:	3008      	adds	r0, #8
 800d01c:	0a1b      	lsrs	r3, r3, #8
 800d01e:	071a      	lsls	r2, r3, #28
 800d020:	bf04      	itt	eq
 800d022:	091b      	lsreq	r3, r3, #4
 800d024:	3004      	addeq	r0, #4
 800d026:	079a      	lsls	r2, r3, #30
 800d028:	bf04      	itt	eq
 800d02a:	089b      	lsreq	r3, r3, #2
 800d02c:	3002      	addeq	r0, #2
 800d02e:	07da      	lsls	r2, r3, #31
 800d030:	d403      	bmi.n	800d03a <__lo0bits+0x4e>
 800d032:	085b      	lsrs	r3, r3, #1
 800d034:	f100 0001 	add.w	r0, r0, #1
 800d038:	d005      	beq.n	800d046 <__lo0bits+0x5a>
 800d03a:	600b      	str	r3, [r1, #0]
 800d03c:	4770      	bx	lr
 800d03e:	4610      	mov	r0, r2
 800d040:	e7e9      	b.n	800d016 <__lo0bits+0x2a>
 800d042:	2000      	movs	r0, #0
 800d044:	4770      	bx	lr
 800d046:	2020      	movs	r0, #32
 800d048:	4770      	bx	lr
	...

0800d04c <__i2b>:
 800d04c:	b510      	push	{r4, lr}
 800d04e:	460c      	mov	r4, r1
 800d050:	2101      	movs	r1, #1
 800d052:	f7ff ff03 	bl	800ce5c <_Balloc>
 800d056:	4602      	mov	r2, r0
 800d058:	b928      	cbnz	r0, 800d066 <__i2b+0x1a>
 800d05a:	4b05      	ldr	r3, [pc, #20]	; (800d070 <__i2b+0x24>)
 800d05c:	4805      	ldr	r0, [pc, #20]	; (800d074 <__i2b+0x28>)
 800d05e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d062:	f7fd fe65 	bl	800ad30 <__assert_func>
 800d066:	2301      	movs	r3, #1
 800d068:	6144      	str	r4, [r0, #20]
 800d06a:	6103      	str	r3, [r0, #16]
 800d06c:	bd10      	pop	{r4, pc}
 800d06e:	bf00      	nop
 800d070:	0800daa8 	.word	0x0800daa8
 800d074:	0800db1c 	.word	0x0800db1c

0800d078 <__multiply>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	4691      	mov	r9, r2
 800d07e:	690a      	ldr	r2, [r1, #16]
 800d080:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d084:	429a      	cmp	r2, r3
 800d086:	bfb8      	it	lt
 800d088:	460b      	movlt	r3, r1
 800d08a:	460c      	mov	r4, r1
 800d08c:	bfbc      	itt	lt
 800d08e:	464c      	movlt	r4, r9
 800d090:	4699      	movlt	r9, r3
 800d092:	6927      	ldr	r7, [r4, #16]
 800d094:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d098:	68a3      	ldr	r3, [r4, #8]
 800d09a:	6861      	ldr	r1, [r4, #4]
 800d09c:	eb07 060a 	add.w	r6, r7, sl
 800d0a0:	42b3      	cmp	r3, r6
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	bfb8      	it	lt
 800d0a6:	3101      	addlt	r1, #1
 800d0a8:	f7ff fed8 	bl	800ce5c <_Balloc>
 800d0ac:	b930      	cbnz	r0, 800d0bc <__multiply+0x44>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	4b44      	ldr	r3, [pc, #272]	; (800d1c4 <__multiply+0x14c>)
 800d0b2:	4845      	ldr	r0, [pc, #276]	; (800d1c8 <__multiply+0x150>)
 800d0b4:	f240 115d 	movw	r1, #349	; 0x15d
 800d0b8:	f7fd fe3a 	bl	800ad30 <__assert_func>
 800d0bc:	f100 0514 	add.w	r5, r0, #20
 800d0c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	4543      	cmp	r3, r8
 800d0ca:	d321      	bcc.n	800d110 <__multiply+0x98>
 800d0cc:	f104 0314 	add.w	r3, r4, #20
 800d0d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d0d4:	f109 0314 	add.w	r3, r9, #20
 800d0d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0dc:	9202      	str	r2, [sp, #8]
 800d0de:	1b3a      	subs	r2, r7, r4
 800d0e0:	3a15      	subs	r2, #21
 800d0e2:	f022 0203 	bic.w	r2, r2, #3
 800d0e6:	3204      	adds	r2, #4
 800d0e8:	f104 0115 	add.w	r1, r4, #21
 800d0ec:	428f      	cmp	r7, r1
 800d0ee:	bf38      	it	cc
 800d0f0:	2204      	movcc	r2, #4
 800d0f2:	9201      	str	r2, [sp, #4]
 800d0f4:	9a02      	ldr	r2, [sp, #8]
 800d0f6:	9303      	str	r3, [sp, #12]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d80c      	bhi.n	800d116 <__multiply+0x9e>
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	dd03      	ble.n	800d108 <__multiply+0x90>
 800d100:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d104:	2b00      	cmp	r3, #0
 800d106:	d05a      	beq.n	800d1be <__multiply+0x146>
 800d108:	6106      	str	r6, [r0, #16]
 800d10a:	b005      	add	sp, #20
 800d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d110:	f843 2b04 	str.w	r2, [r3], #4
 800d114:	e7d8      	b.n	800d0c8 <__multiply+0x50>
 800d116:	f8b3 a000 	ldrh.w	sl, [r3]
 800d11a:	f1ba 0f00 	cmp.w	sl, #0
 800d11e:	d024      	beq.n	800d16a <__multiply+0xf2>
 800d120:	f104 0e14 	add.w	lr, r4, #20
 800d124:	46a9      	mov	r9, r5
 800d126:	f04f 0c00 	mov.w	ip, #0
 800d12a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d12e:	f8d9 1000 	ldr.w	r1, [r9]
 800d132:	fa1f fb82 	uxth.w	fp, r2
 800d136:	b289      	uxth	r1, r1
 800d138:	fb0a 110b 	mla	r1, sl, fp, r1
 800d13c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d140:	f8d9 2000 	ldr.w	r2, [r9]
 800d144:	4461      	add	r1, ip
 800d146:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d14a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d14e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d152:	b289      	uxth	r1, r1
 800d154:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d158:	4577      	cmp	r7, lr
 800d15a:	f849 1b04 	str.w	r1, [r9], #4
 800d15e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d162:	d8e2      	bhi.n	800d12a <__multiply+0xb2>
 800d164:	9a01      	ldr	r2, [sp, #4]
 800d166:	f845 c002 	str.w	ip, [r5, r2]
 800d16a:	9a03      	ldr	r2, [sp, #12]
 800d16c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d170:	3304      	adds	r3, #4
 800d172:	f1b9 0f00 	cmp.w	r9, #0
 800d176:	d020      	beq.n	800d1ba <__multiply+0x142>
 800d178:	6829      	ldr	r1, [r5, #0]
 800d17a:	f104 0c14 	add.w	ip, r4, #20
 800d17e:	46ae      	mov	lr, r5
 800d180:	f04f 0a00 	mov.w	sl, #0
 800d184:	f8bc b000 	ldrh.w	fp, [ip]
 800d188:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d18c:	fb09 220b 	mla	r2, r9, fp, r2
 800d190:	4492      	add	sl, r2
 800d192:	b289      	uxth	r1, r1
 800d194:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d198:	f84e 1b04 	str.w	r1, [lr], #4
 800d19c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1a0:	f8be 1000 	ldrh.w	r1, [lr]
 800d1a4:	0c12      	lsrs	r2, r2, #16
 800d1a6:	fb09 1102 	mla	r1, r9, r2, r1
 800d1aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d1ae:	4567      	cmp	r7, ip
 800d1b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d1b4:	d8e6      	bhi.n	800d184 <__multiply+0x10c>
 800d1b6:	9a01      	ldr	r2, [sp, #4]
 800d1b8:	50a9      	str	r1, [r5, r2]
 800d1ba:	3504      	adds	r5, #4
 800d1bc:	e79a      	b.n	800d0f4 <__multiply+0x7c>
 800d1be:	3e01      	subs	r6, #1
 800d1c0:	e79c      	b.n	800d0fc <__multiply+0x84>
 800d1c2:	bf00      	nop
 800d1c4:	0800daa8 	.word	0x0800daa8
 800d1c8:	0800db1c 	.word	0x0800db1c

0800d1cc <__pow5mult>:
 800d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d0:	4615      	mov	r5, r2
 800d1d2:	f012 0203 	ands.w	r2, r2, #3
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	460f      	mov	r7, r1
 800d1da:	d007      	beq.n	800d1ec <__pow5mult+0x20>
 800d1dc:	4c25      	ldr	r4, [pc, #148]	; (800d274 <__pow5mult+0xa8>)
 800d1de:	3a01      	subs	r2, #1
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1e6:	f7ff fe9b 	bl	800cf20 <__multadd>
 800d1ea:	4607      	mov	r7, r0
 800d1ec:	10ad      	asrs	r5, r5, #2
 800d1ee:	d03d      	beq.n	800d26c <__pow5mult+0xa0>
 800d1f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1f2:	b97c      	cbnz	r4, 800d214 <__pow5mult+0x48>
 800d1f4:	2010      	movs	r0, #16
 800d1f6:	f7ff fe1d 	bl	800ce34 <malloc>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	6270      	str	r0, [r6, #36]	; 0x24
 800d1fe:	b928      	cbnz	r0, 800d20c <__pow5mult+0x40>
 800d200:	4b1d      	ldr	r3, [pc, #116]	; (800d278 <__pow5mult+0xac>)
 800d202:	481e      	ldr	r0, [pc, #120]	; (800d27c <__pow5mult+0xb0>)
 800d204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d208:	f7fd fd92 	bl	800ad30 <__assert_func>
 800d20c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d210:	6004      	str	r4, [r0, #0]
 800d212:	60c4      	str	r4, [r0, #12]
 800d214:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d21c:	b94c      	cbnz	r4, 800d232 <__pow5mult+0x66>
 800d21e:	f240 2171 	movw	r1, #625	; 0x271
 800d222:	4630      	mov	r0, r6
 800d224:	f7ff ff12 	bl	800d04c <__i2b>
 800d228:	2300      	movs	r3, #0
 800d22a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d22e:	4604      	mov	r4, r0
 800d230:	6003      	str	r3, [r0, #0]
 800d232:	f04f 0900 	mov.w	r9, #0
 800d236:	07eb      	lsls	r3, r5, #31
 800d238:	d50a      	bpl.n	800d250 <__pow5mult+0x84>
 800d23a:	4639      	mov	r1, r7
 800d23c:	4622      	mov	r2, r4
 800d23e:	4630      	mov	r0, r6
 800d240:	f7ff ff1a 	bl	800d078 <__multiply>
 800d244:	4639      	mov	r1, r7
 800d246:	4680      	mov	r8, r0
 800d248:	4630      	mov	r0, r6
 800d24a:	f7ff fe47 	bl	800cedc <_Bfree>
 800d24e:	4647      	mov	r7, r8
 800d250:	106d      	asrs	r5, r5, #1
 800d252:	d00b      	beq.n	800d26c <__pow5mult+0xa0>
 800d254:	6820      	ldr	r0, [r4, #0]
 800d256:	b938      	cbnz	r0, 800d268 <__pow5mult+0x9c>
 800d258:	4622      	mov	r2, r4
 800d25a:	4621      	mov	r1, r4
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7ff ff0b 	bl	800d078 <__multiply>
 800d262:	6020      	str	r0, [r4, #0]
 800d264:	f8c0 9000 	str.w	r9, [r0]
 800d268:	4604      	mov	r4, r0
 800d26a:	e7e4      	b.n	800d236 <__pow5mult+0x6a>
 800d26c:	4638      	mov	r0, r7
 800d26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d272:	bf00      	nop
 800d274:	0800dc68 	.word	0x0800dc68
 800d278:	0800da36 	.word	0x0800da36
 800d27c:	0800db1c 	.word	0x0800db1c

0800d280 <__lshift>:
 800d280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	6849      	ldr	r1, [r1, #4]
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d28e:	68a3      	ldr	r3, [r4, #8]
 800d290:	4607      	mov	r7, r0
 800d292:	4691      	mov	r9, r2
 800d294:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d298:	f108 0601 	add.w	r6, r8, #1
 800d29c:	42b3      	cmp	r3, r6
 800d29e:	db0b      	blt.n	800d2b8 <__lshift+0x38>
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	f7ff fddb 	bl	800ce5c <_Balloc>
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	b948      	cbnz	r0, 800d2be <__lshift+0x3e>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <__lshift+0xd8>)
 800d2ae:	482b      	ldr	r0, [pc, #172]	; (800d35c <__lshift+0xdc>)
 800d2b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d2b4:	f7fd fd3c 	bl	800ad30 <__assert_func>
 800d2b8:	3101      	adds	r1, #1
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	e7ee      	b.n	800d29c <__lshift+0x1c>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	f100 0114 	add.w	r1, r0, #20
 800d2c4:	f100 0210 	add.w	r2, r0, #16
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	4553      	cmp	r3, sl
 800d2cc:	db37      	blt.n	800d33e <__lshift+0xbe>
 800d2ce:	6920      	ldr	r0, [r4, #16]
 800d2d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2d4:	f104 0314 	add.w	r3, r4, #20
 800d2d8:	f019 091f 	ands.w	r9, r9, #31
 800d2dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d2e4:	d02f      	beq.n	800d346 <__lshift+0xc6>
 800d2e6:	f1c9 0e20 	rsb	lr, r9, #32
 800d2ea:	468a      	mov	sl, r1
 800d2ec:	f04f 0c00 	mov.w	ip, #0
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	fa02 f209 	lsl.w	r2, r2, r9
 800d2f6:	ea42 020c 	orr.w	r2, r2, ip
 800d2fa:	f84a 2b04 	str.w	r2, [sl], #4
 800d2fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d302:	4298      	cmp	r0, r3
 800d304:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d308:	d8f2      	bhi.n	800d2f0 <__lshift+0x70>
 800d30a:	1b03      	subs	r3, r0, r4
 800d30c:	3b15      	subs	r3, #21
 800d30e:	f023 0303 	bic.w	r3, r3, #3
 800d312:	3304      	adds	r3, #4
 800d314:	f104 0215 	add.w	r2, r4, #21
 800d318:	4290      	cmp	r0, r2
 800d31a:	bf38      	it	cc
 800d31c:	2304      	movcc	r3, #4
 800d31e:	f841 c003 	str.w	ip, [r1, r3]
 800d322:	f1bc 0f00 	cmp.w	ip, #0
 800d326:	d001      	beq.n	800d32c <__lshift+0xac>
 800d328:	f108 0602 	add.w	r6, r8, #2
 800d32c:	3e01      	subs	r6, #1
 800d32e:	4638      	mov	r0, r7
 800d330:	612e      	str	r6, [r5, #16]
 800d332:	4621      	mov	r1, r4
 800d334:	f7ff fdd2 	bl	800cedc <_Bfree>
 800d338:	4628      	mov	r0, r5
 800d33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d342:	3301      	adds	r3, #1
 800d344:	e7c1      	b.n	800d2ca <__lshift+0x4a>
 800d346:	3904      	subs	r1, #4
 800d348:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d350:	4298      	cmp	r0, r3
 800d352:	d8f9      	bhi.n	800d348 <__lshift+0xc8>
 800d354:	e7ea      	b.n	800d32c <__lshift+0xac>
 800d356:	bf00      	nop
 800d358:	0800daa8 	.word	0x0800daa8
 800d35c:	0800db1c 	.word	0x0800db1c

0800d360 <__mcmp>:
 800d360:	b530      	push	{r4, r5, lr}
 800d362:	6902      	ldr	r2, [r0, #16]
 800d364:	690c      	ldr	r4, [r1, #16]
 800d366:	1b12      	subs	r2, r2, r4
 800d368:	d10e      	bne.n	800d388 <__mcmp+0x28>
 800d36a:	f100 0314 	add.w	r3, r0, #20
 800d36e:	3114      	adds	r1, #20
 800d370:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d374:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d378:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d37c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d380:	42a5      	cmp	r5, r4
 800d382:	d003      	beq.n	800d38c <__mcmp+0x2c>
 800d384:	d305      	bcc.n	800d392 <__mcmp+0x32>
 800d386:	2201      	movs	r2, #1
 800d388:	4610      	mov	r0, r2
 800d38a:	bd30      	pop	{r4, r5, pc}
 800d38c:	4283      	cmp	r3, r0
 800d38e:	d3f3      	bcc.n	800d378 <__mcmp+0x18>
 800d390:	e7fa      	b.n	800d388 <__mcmp+0x28>
 800d392:	f04f 32ff 	mov.w	r2, #4294967295
 800d396:	e7f7      	b.n	800d388 <__mcmp+0x28>

0800d398 <__mdiff>:
 800d398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	460c      	mov	r4, r1
 800d39e:	4606      	mov	r6, r0
 800d3a0:	4611      	mov	r1, r2
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	4690      	mov	r8, r2
 800d3a6:	f7ff ffdb 	bl	800d360 <__mcmp>
 800d3aa:	1e05      	subs	r5, r0, #0
 800d3ac:	d110      	bne.n	800d3d0 <__mdiff+0x38>
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	f7ff fd53 	bl	800ce5c <_Balloc>
 800d3b6:	b930      	cbnz	r0, 800d3c6 <__mdiff+0x2e>
 800d3b8:	4b3a      	ldr	r3, [pc, #232]	; (800d4a4 <__mdiff+0x10c>)
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	f240 2132 	movw	r1, #562	; 0x232
 800d3c0:	4839      	ldr	r0, [pc, #228]	; (800d4a8 <__mdiff+0x110>)
 800d3c2:	f7fd fcb5 	bl	800ad30 <__assert_func>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d0:	bfa4      	itt	ge
 800d3d2:	4643      	movge	r3, r8
 800d3d4:	46a0      	movge	r8, r4
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3dc:	bfa6      	itte	ge
 800d3de:	461c      	movge	r4, r3
 800d3e0:	2500      	movge	r5, #0
 800d3e2:	2501      	movlt	r5, #1
 800d3e4:	f7ff fd3a 	bl	800ce5c <_Balloc>
 800d3e8:	b920      	cbnz	r0, 800d3f4 <__mdiff+0x5c>
 800d3ea:	4b2e      	ldr	r3, [pc, #184]	; (800d4a4 <__mdiff+0x10c>)
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d3f2:	e7e5      	b.n	800d3c0 <__mdiff+0x28>
 800d3f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3f8:	6926      	ldr	r6, [r4, #16]
 800d3fa:	60c5      	str	r5, [r0, #12]
 800d3fc:	f104 0914 	add.w	r9, r4, #20
 800d400:	f108 0514 	add.w	r5, r8, #20
 800d404:	f100 0e14 	add.w	lr, r0, #20
 800d408:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d40c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d410:	f108 0210 	add.w	r2, r8, #16
 800d414:	46f2      	mov	sl, lr
 800d416:	2100      	movs	r1, #0
 800d418:	f859 3b04 	ldr.w	r3, [r9], #4
 800d41c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d420:	fa1f f883 	uxth.w	r8, r3
 800d424:	fa11 f18b 	uxtah	r1, r1, fp
 800d428:	0c1b      	lsrs	r3, r3, #16
 800d42a:	eba1 0808 	sub.w	r8, r1, r8
 800d42e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d432:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d436:	fa1f f888 	uxth.w	r8, r8
 800d43a:	1419      	asrs	r1, r3, #16
 800d43c:	454e      	cmp	r6, r9
 800d43e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d442:	f84a 3b04 	str.w	r3, [sl], #4
 800d446:	d8e7      	bhi.n	800d418 <__mdiff+0x80>
 800d448:	1b33      	subs	r3, r6, r4
 800d44a:	3b15      	subs	r3, #21
 800d44c:	f023 0303 	bic.w	r3, r3, #3
 800d450:	3304      	adds	r3, #4
 800d452:	3415      	adds	r4, #21
 800d454:	42a6      	cmp	r6, r4
 800d456:	bf38      	it	cc
 800d458:	2304      	movcc	r3, #4
 800d45a:	441d      	add	r5, r3
 800d45c:	4473      	add	r3, lr
 800d45e:	469e      	mov	lr, r3
 800d460:	462e      	mov	r6, r5
 800d462:	4566      	cmp	r6, ip
 800d464:	d30e      	bcc.n	800d484 <__mdiff+0xec>
 800d466:	f10c 0203 	add.w	r2, ip, #3
 800d46a:	1b52      	subs	r2, r2, r5
 800d46c:	f022 0203 	bic.w	r2, r2, #3
 800d470:	3d03      	subs	r5, #3
 800d472:	45ac      	cmp	ip, r5
 800d474:	bf38      	it	cc
 800d476:	2200      	movcc	r2, #0
 800d478:	441a      	add	r2, r3
 800d47a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d47e:	b17b      	cbz	r3, 800d4a0 <__mdiff+0x108>
 800d480:	6107      	str	r7, [r0, #16]
 800d482:	e7a3      	b.n	800d3cc <__mdiff+0x34>
 800d484:	f856 8b04 	ldr.w	r8, [r6], #4
 800d488:	fa11 f288 	uxtah	r2, r1, r8
 800d48c:	1414      	asrs	r4, r2, #16
 800d48e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d492:	b292      	uxth	r2, r2
 800d494:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d498:	f84e 2b04 	str.w	r2, [lr], #4
 800d49c:	1421      	asrs	r1, r4, #16
 800d49e:	e7e0      	b.n	800d462 <__mdiff+0xca>
 800d4a0:	3f01      	subs	r7, #1
 800d4a2:	e7ea      	b.n	800d47a <__mdiff+0xe2>
 800d4a4:	0800daa8 	.word	0x0800daa8
 800d4a8:	0800db1c 	.word	0x0800db1c

0800d4ac <__d2b>:
 800d4ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	4689      	mov	r9, r1
 800d4b2:	2101      	movs	r1, #1
 800d4b4:	ec57 6b10 	vmov	r6, r7, d0
 800d4b8:	4690      	mov	r8, r2
 800d4ba:	f7ff fccf 	bl	800ce5c <_Balloc>
 800d4be:	4604      	mov	r4, r0
 800d4c0:	b930      	cbnz	r0, 800d4d0 <__d2b+0x24>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	4b25      	ldr	r3, [pc, #148]	; (800d55c <__d2b+0xb0>)
 800d4c6:	4826      	ldr	r0, [pc, #152]	; (800d560 <__d2b+0xb4>)
 800d4c8:	f240 310a 	movw	r1, #778	; 0x30a
 800d4cc:	f7fd fc30 	bl	800ad30 <__assert_func>
 800d4d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d4d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4d8:	bb35      	cbnz	r5, 800d528 <__d2b+0x7c>
 800d4da:	2e00      	cmp	r6, #0
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	d028      	beq.n	800d532 <__d2b+0x86>
 800d4e0:	4668      	mov	r0, sp
 800d4e2:	9600      	str	r6, [sp, #0]
 800d4e4:	f7ff fd82 	bl	800cfec <__lo0bits>
 800d4e8:	9900      	ldr	r1, [sp, #0]
 800d4ea:	b300      	cbz	r0, 800d52e <__d2b+0x82>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	40c2      	lsrs	r2, r0
 800d4fa:	6163      	str	r3, [r4, #20]
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9b01      	ldr	r3, [sp, #4]
 800d500:	61a3      	str	r3, [r4, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf14      	ite	ne
 800d506:	2202      	movne	r2, #2
 800d508:	2201      	moveq	r2, #1
 800d50a:	6122      	str	r2, [r4, #16]
 800d50c:	b1d5      	cbz	r5, 800d544 <__d2b+0x98>
 800d50e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d512:	4405      	add	r5, r0
 800d514:	f8c9 5000 	str.w	r5, [r9]
 800d518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d51c:	f8c8 0000 	str.w	r0, [r8]
 800d520:	4620      	mov	r0, r4
 800d522:	b003      	add	sp, #12
 800d524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d52c:	e7d5      	b.n	800d4da <__d2b+0x2e>
 800d52e:	6161      	str	r1, [r4, #20]
 800d530:	e7e5      	b.n	800d4fe <__d2b+0x52>
 800d532:	a801      	add	r0, sp, #4
 800d534:	f7ff fd5a 	bl	800cfec <__lo0bits>
 800d538:	9b01      	ldr	r3, [sp, #4]
 800d53a:	6163      	str	r3, [r4, #20]
 800d53c:	2201      	movs	r2, #1
 800d53e:	6122      	str	r2, [r4, #16]
 800d540:	3020      	adds	r0, #32
 800d542:	e7e3      	b.n	800d50c <__d2b+0x60>
 800d544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d54c:	f8c9 0000 	str.w	r0, [r9]
 800d550:	6918      	ldr	r0, [r3, #16]
 800d552:	f7ff fd2b 	bl	800cfac <__hi0bits>
 800d556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d55a:	e7df      	b.n	800d51c <__d2b+0x70>
 800d55c:	0800daa8 	.word	0x0800daa8
 800d560:	0800db1c 	.word	0x0800db1c

0800d564 <_free_r>:
 800d564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d566:	2900      	cmp	r1, #0
 800d568:	d044      	beq.n	800d5f4 <_free_r+0x90>
 800d56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d56e:	9001      	str	r0, [sp, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f1a1 0404 	sub.w	r4, r1, #4
 800d576:	bfb8      	it	lt
 800d578:	18e4      	addlt	r4, r4, r3
 800d57a:	f7ff fc63 	bl	800ce44 <__malloc_lock>
 800d57e:	4a1e      	ldr	r2, [pc, #120]	; (800d5f8 <_free_r+0x94>)
 800d580:	9801      	ldr	r0, [sp, #4]
 800d582:	6813      	ldr	r3, [r2, #0]
 800d584:	b933      	cbnz	r3, 800d594 <_free_r+0x30>
 800d586:	6063      	str	r3, [r4, #4]
 800d588:	6014      	str	r4, [r2, #0]
 800d58a:	b003      	add	sp, #12
 800d58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d590:	f7ff bc5e 	b.w	800ce50 <__malloc_unlock>
 800d594:	42a3      	cmp	r3, r4
 800d596:	d908      	bls.n	800d5aa <_free_r+0x46>
 800d598:	6825      	ldr	r5, [r4, #0]
 800d59a:	1961      	adds	r1, r4, r5
 800d59c:	428b      	cmp	r3, r1
 800d59e:	bf01      	itttt	eq
 800d5a0:	6819      	ldreq	r1, [r3, #0]
 800d5a2:	685b      	ldreq	r3, [r3, #4]
 800d5a4:	1949      	addeq	r1, r1, r5
 800d5a6:	6021      	streq	r1, [r4, #0]
 800d5a8:	e7ed      	b.n	800d586 <_free_r+0x22>
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	b10b      	cbz	r3, 800d5b4 <_free_r+0x50>
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	d9fa      	bls.n	800d5aa <_free_r+0x46>
 800d5b4:	6811      	ldr	r1, [r2, #0]
 800d5b6:	1855      	adds	r5, r2, r1
 800d5b8:	42a5      	cmp	r5, r4
 800d5ba:	d10b      	bne.n	800d5d4 <_free_r+0x70>
 800d5bc:	6824      	ldr	r4, [r4, #0]
 800d5be:	4421      	add	r1, r4
 800d5c0:	1854      	adds	r4, r2, r1
 800d5c2:	42a3      	cmp	r3, r4
 800d5c4:	6011      	str	r1, [r2, #0]
 800d5c6:	d1e0      	bne.n	800d58a <_free_r+0x26>
 800d5c8:	681c      	ldr	r4, [r3, #0]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	6053      	str	r3, [r2, #4]
 800d5ce:	4421      	add	r1, r4
 800d5d0:	6011      	str	r1, [r2, #0]
 800d5d2:	e7da      	b.n	800d58a <_free_r+0x26>
 800d5d4:	d902      	bls.n	800d5dc <_free_r+0x78>
 800d5d6:	230c      	movs	r3, #12
 800d5d8:	6003      	str	r3, [r0, #0]
 800d5da:	e7d6      	b.n	800d58a <_free_r+0x26>
 800d5dc:	6825      	ldr	r5, [r4, #0]
 800d5de:	1961      	adds	r1, r4, r5
 800d5e0:	428b      	cmp	r3, r1
 800d5e2:	bf04      	itt	eq
 800d5e4:	6819      	ldreq	r1, [r3, #0]
 800d5e6:	685b      	ldreq	r3, [r3, #4]
 800d5e8:	6063      	str	r3, [r4, #4]
 800d5ea:	bf04      	itt	eq
 800d5ec:	1949      	addeq	r1, r1, r5
 800d5ee:	6021      	streq	r1, [r4, #0]
 800d5f0:	6054      	str	r4, [r2, #4]
 800d5f2:	e7ca      	b.n	800d58a <_free_r+0x26>
 800d5f4:	b003      	add	sp, #12
 800d5f6:	bd30      	pop	{r4, r5, pc}
 800d5f8:	20000730 	.word	0x20000730

0800d5fc <_realloc_r>:
 800d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d600:	4680      	mov	r8, r0
 800d602:	4614      	mov	r4, r2
 800d604:	460e      	mov	r6, r1
 800d606:	b921      	cbnz	r1, 800d612 <_realloc_r+0x16>
 800d608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d60c:	4611      	mov	r1, r2
 800d60e:	f7fd bc3d 	b.w	800ae8c <_malloc_r>
 800d612:	b92a      	cbnz	r2, 800d620 <_realloc_r+0x24>
 800d614:	f7ff ffa6 	bl	800d564 <_free_r>
 800d618:	4625      	mov	r5, r4
 800d61a:	4628      	mov	r0, r5
 800d61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d620:	f000 f90c 	bl	800d83c <_malloc_usable_size_r>
 800d624:	4284      	cmp	r4, r0
 800d626:	4607      	mov	r7, r0
 800d628:	d802      	bhi.n	800d630 <_realloc_r+0x34>
 800d62a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d62e:	d812      	bhi.n	800d656 <_realloc_r+0x5a>
 800d630:	4621      	mov	r1, r4
 800d632:	4640      	mov	r0, r8
 800d634:	f7fd fc2a 	bl	800ae8c <_malloc_r>
 800d638:	4605      	mov	r5, r0
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d0ed      	beq.n	800d61a <_realloc_r+0x1e>
 800d63e:	42bc      	cmp	r4, r7
 800d640:	4622      	mov	r2, r4
 800d642:	4631      	mov	r1, r6
 800d644:	bf28      	it	cs
 800d646:	463a      	movcs	r2, r7
 800d648:	f7fd fbd4 	bl	800adf4 <memcpy>
 800d64c:	4631      	mov	r1, r6
 800d64e:	4640      	mov	r0, r8
 800d650:	f7ff ff88 	bl	800d564 <_free_r>
 800d654:	e7e1      	b.n	800d61a <_realloc_r+0x1e>
 800d656:	4635      	mov	r5, r6
 800d658:	e7df      	b.n	800d61a <_realloc_r+0x1e>

0800d65a <_raise_r>:
 800d65a:	291f      	cmp	r1, #31
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	d904      	bls.n	800d66e <_raise_r+0x14>
 800d664:	2316      	movs	r3, #22
 800d666:	6003      	str	r3, [r0, #0]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	bd38      	pop	{r3, r4, r5, pc}
 800d66e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d670:	b112      	cbz	r2, 800d678 <_raise_r+0x1e>
 800d672:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d676:	b94b      	cbnz	r3, 800d68c <_raise_r+0x32>
 800d678:	4620      	mov	r0, r4
 800d67a:	f000 f831 	bl	800d6e0 <_getpid_r>
 800d67e:	462a      	mov	r2, r5
 800d680:	4601      	mov	r1, r0
 800d682:	4620      	mov	r0, r4
 800d684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d688:	f000 b818 	b.w	800d6bc <_kill_r>
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d00a      	beq.n	800d6a6 <_raise_r+0x4c>
 800d690:	1c59      	adds	r1, r3, #1
 800d692:	d103      	bne.n	800d69c <_raise_r+0x42>
 800d694:	2316      	movs	r3, #22
 800d696:	6003      	str	r3, [r0, #0]
 800d698:	2001      	movs	r0, #1
 800d69a:	e7e7      	b.n	800d66c <_raise_r+0x12>
 800d69c:	2400      	movs	r4, #0
 800d69e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	4798      	blx	r3
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	e7e0      	b.n	800d66c <_raise_r+0x12>
	...

0800d6ac <raise>:
 800d6ac:	4b02      	ldr	r3, [pc, #8]	; (800d6b8 <raise+0xc>)
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	6818      	ldr	r0, [r3, #0]
 800d6b2:	f7ff bfd2 	b.w	800d65a <_raise_r>
 800d6b6:	bf00      	nop
 800d6b8:	200002e4 	.word	0x200002e4

0800d6bc <_kill_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4d07      	ldr	r5, [pc, #28]	; (800d6dc <_kill_r+0x20>)
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	4608      	mov	r0, r1
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	f7f4 fb9d 	bl	8001e08 <_kill>
 800d6ce:	1c43      	adds	r3, r0, #1
 800d6d0:	d102      	bne.n	800d6d8 <_kill_r+0x1c>
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	b103      	cbz	r3, 800d6d8 <_kill_r+0x1c>
 800d6d6:	6023      	str	r3, [r4, #0]
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
 800d6da:	bf00      	nop
 800d6dc:	2000073c 	.word	0x2000073c

0800d6e0 <_getpid_r>:
 800d6e0:	f7f4 bb8a 	b.w	8001df8 <_getpid>

0800d6e4 <__sread>:
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ec:	f000 f8ae 	bl	800d84c <_read_r>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	bfab      	itete	ge
 800d6f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800d6f8:	181b      	addge	r3, r3, r0
 800d6fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d6fe:	bfac      	ite	ge
 800d700:	6563      	strge	r3, [r4, #84]	; 0x54
 800d702:	81a3      	strhlt	r3, [r4, #12]
 800d704:	bd10      	pop	{r4, pc}

0800d706 <__swrite>:
 800d706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d70a:	461f      	mov	r7, r3
 800d70c:	898b      	ldrh	r3, [r1, #12]
 800d70e:	05db      	lsls	r3, r3, #23
 800d710:	4605      	mov	r5, r0
 800d712:	460c      	mov	r4, r1
 800d714:	4616      	mov	r6, r2
 800d716:	d505      	bpl.n	800d724 <__swrite+0x1e>
 800d718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d71c:	2302      	movs	r3, #2
 800d71e:	2200      	movs	r2, #0
 800d720:	f000 f868 	bl	800d7f4 <_lseek_r>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d72a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d72e:	81a3      	strh	r3, [r4, #12]
 800d730:	4632      	mov	r2, r6
 800d732:	463b      	mov	r3, r7
 800d734:	4628      	mov	r0, r5
 800d736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d73a:	f000 b817 	b.w	800d76c <_write_r>

0800d73e <__sseek>:
 800d73e:	b510      	push	{r4, lr}
 800d740:	460c      	mov	r4, r1
 800d742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d746:	f000 f855 	bl	800d7f4 <_lseek_r>
 800d74a:	1c43      	adds	r3, r0, #1
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	bf15      	itete	ne
 800d750:	6560      	strne	r0, [r4, #84]	; 0x54
 800d752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d75a:	81a3      	strheq	r3, [r4, #12]
 800d75c:	bf18      	it	ne
 800d75e:	81a3      	strhne	r3, [r4, #12]
 800d760:	bd10      	pop	{r4, pc}

0800d762 <__sclose>:
 800d762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d766:	f000 b813 	b.w	800d790 <_close_r>
	...

0800d76c <_write_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d07      	ldr	r5, [pc, #28]	; (800d78c <_write_r+0x20>)
 800d770:	4604      	mov	r4, r0
 800d772:	4608      	mov	r0, r1
 800d774:	4611      	mov	r1, r2
 800d776:	2200      	movs	r2, #0
 800d778:	602a      	str	r2, [r5, #0]
 800d77a:	461a      	mov	r2, r3
 800d77c:	f7f3 ff57 	bl	800162e <_write>
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	d102      	bne.n	800d78a <_write_r+0x1e>
 800d784:	682b      	ldr	r3, [r5, #0]
 800d786:	b103      	cbz	r3, 800d78a <_write_r+0x1e>
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	bd38      	pop	{r3, r4, r5, pc}
 800d78c:	2000073c 	.word	0x2000073c

0800d790 <_close_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d06      	ldr	r5, [pc, #24]	; (800d7ac <_close_r+0x1c>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	f7f4 fb6b 	bl	8001e76 <_close>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_close_r+0x1a>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_close_r+0x1a>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	2000073c 	.word	0x2000073c

0800d7b0 <_fstat_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	4d07      	ldr	r5, [pc, #28]	; (800d7d0 <_fstat_r+0x20>)
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	4608      	mov	r0, r1
 800d7ba:	4611      	mov	r1, r2
 800d7bc:	602b      	str	r3, [r5, #0]
 800d7be:	f7f4 fb66 	bl	8001e8e <_fstat>
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	d102      	bne.n	800d7cc <_fstat_r+0x1c>
 800d7c6:	682b      	ldr	r3, [r5, #0]
 800d7c8:	b103      	cbz	r3, 800d7cc <_fstat_r+0x1c>
 800d7ca:	6023      	str	r3, [r4, #0]
 800d7cc:	bd38      	pop	{r3, r4, r5, pc}
 800d7ce:	bf00      	nop
 800d7d0:	2000073c 	.word	0x2000073c

0800d7d4 <_isatty_r>:
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	4d06      	ldr	r5, [pc, #24]	; (800d7f0 <_isatty_r+0x1c>)
 800d7d8:	2300      	movs	r3, #0
 800d7da:	4604      	mov	r4, r0
 800d7dc:	4608      	mov	r0, r1
 800d7de:	602b      	str	r3, [r5, #0]
 800d7e0:	f7f4 fb65 	bl	8001eae <_isatty>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_isatty_r+0x1a>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_isatty_r+0x1a>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	2000073c 	.word	0x2000073c

0800d7f4 <_lseek_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d07      	ldr	r5, [pc, #28]	; (800d814 <_lseek_r+0x20>)
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	4608      	mov	r0, r1
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	2200      	movs	r2, #0
 800d800:	602a      	str	r2, [r5, #0]
 800d802:	461a      	mov	r2, r3
 800d804:	f7f4 fb5e 	bl	8001ec4 <_lseek>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d102      	bne.n	800d812 <_lseek_r+0x1e>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	b103      	cbz	r3, 800d812 <_lseek_r+0x1e>
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	2000073c 	.word	0x2000073c

0800d818 <__ascii_mbtowc>:
 800d818:	b082      	sub	sp, #8
 800d81a:	b901      	cbnz	r1, 800d81e <__ascii_mbtowc+0x6>
 800d81c:	a901      	add	r1, sp, #4
 800d81e:	b142      	cbz	r2, 800d832 <__ascii_mbtowc+0x1a>
 800d820:	b14b      	cbz	r3, 800d836 <__ascii_mbtowc+0x1e>
 800d822:	7813      	ldrb	r3, [r2, #0]
 800d824:	600b      	str	r3, [r1, #0]
 800d826:	7812      	ldrb	r2, [r2, #0]
 800d828:	1e10      	subs	r0, r2, #0
 800d82a:	bf18      	it	ne
 800d82c:	2001      	movne	r0, #1
 800d82e:	b002      	add	sp, #8
 800d830:	4770      	bx	lr
 800d832:	4610      	mov	r0, r2
 800d834:	e7fb      	b.n	800d82e <__ascii_mbtowc+0x16>
 800d836:	f06f 0001 	mvn.w	r0, #1
 800d83a:	e7f8      	b.n	800d82e <__ascii_mbtowc+0x16>

0800d83c <_malloc_usable_size_r>:
 800d83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d840:	1f18      	subs	r0, r3, #4
 800d842:	2b00      	cmp	r3, #0
 800d844:	bfbc      	itt	lt
 800d846:	580b      	ldrlt	r3, [r1, r0]
 800d848:	18c0      	addlt	r0, r0, r3
 800d84a:	4770      	bx	lr

0800d84c <_read_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	4d07      	ldr	r5, [pc, #28]	; (800d86c <_read_r+0x20>)
 800d850:	4604      	mov	r4, r0
 800d852:	4608      	mov	r0, r1
 800d854:	4611      	mov	r1, r2
 800d856:	2200      	movs	r2, #0
 800d858:	602a      	str	r2, [r5, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	f7f4 faee 	bl	8001e3c <_read>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_read_r+0x1e>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_read_r+0x1e>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	2000073c 	.word	0x2000073c

0800d870 <__ascii_wctomb>:
 800d870:	b149      	cbz	r1, 800d886 <__ascii_wctomb+0x16>
 800d872:	2aff      	cmp	r2, #255	; 0xff
 800d874:	bf85      	ittet	hi
 800d876:	238a      	movhi	r3, #138	; 0x8a
 800d878:	6003      	strhi	r3, [r0, #0]
 800d87a:	700a      	strbls	r2, [r1, #0]
 800d87c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d880:	bf98      	it	ls
 800d882:	2001      	movls	r0, #1
 800d884:	4770      	bx	lr
 800d886:	4608      	mov	r0, r1
 800d888:	4770      	bx	lr
	...

0800d88c <_init>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	bf00      	nop
 800d890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d892:	bc08      	pop	{r3}
 800d894:	469e      	mov	lr, r3
 800d896:	4770      	bx	lr

0800d898 <_fini>:
 800d898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89a:	bf00      	nop
 800d89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d89e:	bc08      	pop	{r3}
 800d8a0:	469e      	mov	lr, r3
 800d8a2:	4770      	bx	lr
